<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YiYing’s sharing</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://muchstudy.com/"/>
  <updated>2020-08-28T10:50:32.043Z</updated>
  <id>http://muchstudy.com/</id>
  
  <author>
    <name>YiYing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何做好一线团队管理？</title>
    <link href="http://muchstudy.com/2020/08/28/%E5%A6%82%E4%BD%95%E5%81%9A%E5%A5%BD%E4%B8%80%E7%BA%BF%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86%EF%BC%9F/"/>
    <id>http://muchstudy.com/2020/08/28/如何做好一线团队管理？/</id>
    <published>2020-08-28T10:37:57.000Z</published>
    <updated>2020-08-28T10:50:32.043Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/08/28/如何做好一线团队管理？/team.jpeg"><p>之所以想聊聊这个话题，是因为最近面试有一半的面试官都会问这个问题，分享一下我对一线团队管理的粗浅看法。</p><h2 id="对上"><a href="#对上" class="headerlink" title="对上"></a>对上</h2><ul><li><p>及时反馈</p><blockquote><p>这里不仅指老板交代的事项要及时反馈与主动担责，还指遇到项目问题或者需要老板支持的事项需要及时反馈。</p></blockquote></li><li><p>适当提要求</p><blockquote><p>结合上一条，针对具体的事项需要向老板适当的提一些要求。比如，解决这个问题预计需要两天，做这个复杂项目需要两个人员支持，让老板协调资源等等</p></blockquote></li><li><p>给出靠谱结论</p><blockquote><p>结合上一条，提要求的同时，一定要给出靠谱结论。比如需要老板协调两个资源协助项目开发，一定要给出需要什么技术水平的人员，具体支持多久，什么时候可以释放，资源到位后具体是怎么安排的等等。老板交代的事项也同理，一定要给出里程碑计划，比如预计明天到什么里程碑，周几能完全搞定等。</p></blockquote></li><li><p>信息及时同步</p><blockquote><p>信息及时同步的核心目的在于防止信息差带来认知的不一样。比如团队接下来一个季度的计划、想做哪些技术基础设施让老板知晓并给出建议、线上问题及时同步给老板避免更上一级老板问到直属老板时一脸懵逼等。</p></blockquote></li></ul><h2 id="对下"><a href="#对下" class="headerlink" title="对下"></a>对下</h2><ul><li><p>建立信任，上下一心</p><blockquote><p>作为一个团队leader，我觉得这一条是最重要的，需要排在首位。只有相互建立了信任，大家才能够上下一心，只有上下一心，在遇到困难时才能够同舟共济，携手向前。<br>怎么才能建立信任呢？我觉得核心就两点：一个是体现自己技术方向的专业可信赖，另一个就是发自内心的希望与带领团队向好的方向发展，让团队的每一个成员都能够在团队中成长与提升。</p></blockquote></li><li><p>目标清晰，节点跟踪</p><blockquote><p>每一件任务都需要给出明确的预期目标，并且不能等着最终拿结果，需要对关键节点进行跟踪，避免目标偏差。</p></blockquote></li><li><p>氛围打造，开心工作</p><blockquote><p>大家每天面对的是冰冷的机器，不能让氛围也变得冰冷。一个好的氛围，会使得所有人干活儿更有冲劲，面对困难更少的畏难情绪，带来更高的工作效率。<br>怎么打造一个好的氛围呢？我觉得可以从这几个方面入手：</p><ol><li>每周组织好文章新技术资料导读与分享，打造好的技术氛围，同时还可以借助技术的讨论拉近大家的距离</li><li>Leader主动承担一些零碎的事项，让团队成员能够安心的工作</li><li>做好格挡。比如一些不合理的需求，质量不高的需要应该在还没到团队成员之前就格挡回去。比如明知团队工作饱和度很高，一些低优需求就应该格挡回去，或者重新做优先级排序，切记不顾团队同学的实际情况做<code>传声筒</code>。</li></ol></blockquote></li></ul><ul><li>梯队建设，人尽其才<blockquote><p>做好团队人才盘点，结合业务，梯队合理，人员合理搭档。根据团队人员不同的技术能力与性格特点，安排合适的事项，人尽其才，提供最大的发挥空间。</p></blockquote></li></ul><h2 id="对外"><a href="#对外" class="headerlink" title="对外"></a>对外</h2><ul><li><p>个人&amp;团队影响力建设、体现专业、建立信任</p><blockquote><p>首要的还是建立信任。信任的来源在于专业以及做事靠谱。<br>具体怎么做？可以考虑通过技术分享、业务流程分享、无可挑剔的项目设计与排期、重大项目复盘等方式来增加个人&amp;团队的影响力。</p></blockquote></li><li><p>定好规则制度</p><blockquote><p>有完善的规则制度，大家沟通协作起来才会更加的顺畅。<br>比如：跟PM定好需求到什么程度才能做需求评审，评审到什么程度才能做排期；跟QA定好需求CASE通过率达到多少才能提测，否则打回；跟UI/UE对齐组件规范，UI走查规则；跟RD定好接口规范，接口规则等。</p></blockquote></li><li><p>知己知彼，了解其他组业务、技术、人员情况</p><blockquote><p>了解其他组的人员那情况，比如人员梯队情况，技术能力情况，这样当各个团队的人组合到一起承接项目时才能知道会产生什么化学反应。</p></blockquote></li><li><p>为团队争取更多空间</p><blockquote><p>有空间大家才会有充足的动力，空间不会从天上掉下来，需要靠争取与挖掘。<br>比如：了解到大团队中各个团队都没有做某一项技术基础设施，比如组件库、性能监控等，那么可以主动向老板提，看能不能让自己组把这一块技术基础设施做下来。 - <code>争取</code><br>比如：发现营销侧营销活动页面很多，而且很多页面有一些相同的规则。那么，可以引导PM，是不是可以通过技术手段解决，比如做一个营销活动页面自动生成与发布的系统。 - <code>挖掘</code>  </p></blockquote></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最后，一线团队管理一半需要专业能力够强，另一半则是考验一个人除开技术之外的综合能力。有些人也真的从性格上来说天生就不善言辞，不适应做团队管理。所以，最重要的还是认清自己的优劣势，扬长避短，做最适合自己的选择。</p><p>附上本文的脑图</p><img src="/2020/08/28/如何做好一线团队管理？/一线团队管理脑图.jpg"><p>最后再啰嗦一句，最近调休在家整理了一下面试过程中一些有实际意义的技术问题，已经发布在了blog上，这些问题都是一些小点，本着让更多的人受益的原则，接下来会每天搬一篇到公众号上来。</p><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/08/28/如何做好一线团队管理？/team.jpeg&quot;&gt;
&lt;p&gt;之所以想聊聊这个话题，是因为最近面试有一半的面试官都会问这个问题，分享一下我对一线团队管理的粗浅看法。&lt;/p&gt;
&lt;h2 id=&quot;对上&quot;&gt;&lt;a href=&quot;#对上&quot; class=&quot;he
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>递归调用栈溢出问题分析与解决</title>
    <link href="http://muchstudy.com/2020/08/27/%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8%E6%A0%88%E6%BA%A2%E5%87%BA%E9%97%AE%E9%A2%98%E5%88%86%E6%9E%90%E4%B8%8E%E8%A7%A3%E5%86%B3/"/>
    <id>http://muchstudy.com/2020/08/27/递归调用栈溢出问题分析与解决/</id>
    <published>2020-08-27T01:48:35.000Z</published>
    <updated>2020-08-27T01:49:17.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题模拟"><a href="#问题模拟" class="headerlink" title="问题模拟"></a>问题模拟</h2><p>让递归爆栈还是很简单的，例如如下代码就能轻而易举实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 故意来一次爆栈体验</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stackOverflow</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    stackOverflow()</span><br><span class="line">&#125;</span><br><span class="line">stackOverflow()</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">VM42:<span class="number">3</span> Uncaught <span class="built_in">RangeError</span>: Maximum call stack size exceeded</span><br><span class="line">    at stackOverflow (<span class="xml"><span class="tag">&lt;<span class="name">anonymous</span>&gt;</span>:3:5)</span></span><br><span class="line">    at stackOverflow (&lt;anonymous&gt;:3:5)</span><br><span class="line">    at stackOverflow (&lt;anonymous&gt;:3:5)</span><br><span class="line">    at stackOverflow (&lt;anonymous&gt;:3:5)</span><br><span class="line">    at stackOverflow (&lt;anonymous&gt;:3:5)</span><br><span class="line">    at stackOverflow (&lt;anonymous&gt;:3:5)</span><br><span class="line">    at stackOverflow (&lt;anonymous&gt;:3:5)</span><br><span class="line">    at stackOverflow (&lt;anonymous&gt;:3:5)</span><br><span class="line">    at stackOverflow (&lt;anonymous&gt;:3:5)</span><br><span class="line">    at stackOverflow (&lt;anonymous&gt;:3:5)</span><br></pre></td></tr></table></figure></p><p>我们还能通过如下代码看到浏览器最大的调用栈是多少<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">getStackDepth</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + getStackDepth()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// Call stack overflow</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line"><span class="number">12539</span></span><br></pre></td></tr></table></figure></p><blockquote><p>数量取决于方法体所占用的空间，占用空间越大，可用栈数量越小。可尝试在方法中增加变量，会发现结果变小。</p></blockquote><h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>我们都知道，程序运行时有堆内存，还有栈内存。<br>每一次方法执行，都会把方法压到执行栈中。<br>栈空间是有大小的，当超过栈空间大小，就会触发<code>Maximum call stack size exceeded</code>异常。</p><p>关于调用栈之前的这篇文章中有说明：<a href="http://muchstudy.com/2019/03/04/CodeReview%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%85%B3%E4%BA%8EJS%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E7%9A%84%E9%9A%8F%E6%83%B3%E6%95%B4%E7%90%86/">CodeReview过程中关于JS代码性能的随想整理</a></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>有了原因分析，解决方案也清晰了，那就是想办法规避掉不停的往调用栈塞方法。</p><h3 id="样例准备"><a href="#样例准备" class="headerlink" title="样例准备"></a>样例准备</h3><p>准备一个相加的例子（这个例子不具备实际意义，本来想准备个阶乘的例子，发现还没爆栈就超出整形长度了，累加也一样，所以就出现了这么一个看起来有点脑残的样例…）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用递归实现相加，比如输入add(10),打印10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num===<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + add(num<span class="number">-1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，参数比较小的时候一切正常，当参数太大的时候就爆栈了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">10</span>)</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line">add(<span class="number">100000</span>)</span><br><span class="line"><span class="comment">// 提示爆栈</span></span><br><span class="line">VM505:<span class="number">2</span> Uncaught <span class="built_in">RangeError</span>: Maximum call stack size exceeded</span><br><span class="line">    at add (<span class="xml"><span class="tag">&lt;<span class="name">anonymous</span>&gt;</span>:2:3)</span></span><br><span class="line">    at add (&lt;anonymous&gt;:5:16)</span><br><span class="line">    at add (&lt;anonymous&gt;:5:16)</span><br><span class="line">    at add (&lt;anonymous&gt;:5:16)</span><br><span class="line">    at add (&lt;anonymous&gt;:5:16)</span><br><span class="line">    at add (&lt;anonymous&gt;:5:16)</span><br><span class="line">    at add (&lt;anonymous&gt;:5:16)</span><br><span class="line">    at add (&lt;anonymous&gt;:5:16)</span><br><span class="line">    at add (&lt;anonymous&gt;:5:16)</span><br><span class="line">    at add (&lt;anonymous&gt;:5:16)</span><br></pre></td></tr></table></figure></p><h3 id="递归转循环"><a href="#递归转循环" class="headerlink" title="递归转循环"></a>递归转循环</h3><p>大部分递归都可以转为循环实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span>(num--)&#123;</span><br><span class="line">    result = result+<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">100000</span>)</span><br><span class="line"><span class="comment">// 正常输出100000</span></span><br><span class="line"><span class="comment">// 100000</span></span><br></pre></td></tr></table></figure></p><h3 id="蹦床函数"><a href="#蹦床函数" class="headerlink" title="蹦床函数"></a>蹦床函数</h3><p>爆栈的核心在于不停的往调用栈塞入函数，那么我们可以想办法每次递归都执行对应函数，避免调用栈增加</p><ul><li><p>对递归改写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每次返回函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num, result=<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num===<span class="number">1</span>) <span class="keyword">return</span> result</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span> add(num<span class="number">-1</span>, <span class="number">1</span>+result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>蹦床函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trampoline</span>(<span class="params">fun</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = fun()</span><br><span class="line">  <span class="comment">// 循环调用，解决递归问题</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">typeof</span>(result)===<span class="string">'function'</span>) &#123;</span><br><span class="line">    result = result()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trampoline(add(<span class="number">100000</span>))</span><br><span class="line"><span class="comment">// 返回100000</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>最后还有一个sao操作，就跟传说中的<code>睡眠排序</code>一样，那就是setTimeout，代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num, result=<span class="number">1</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num===<span class="number">1</span>) resolve(result)</span><br><span class="line">    <span class="comment">// 实际上为最少4ms执行一次</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      add(num<span class="number">-1</span>, <span class="number">1</span>+result).then(<span class="function"><span class="params">res</span>=&gt;</span>resolve(res))</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 能够正常返回100，参数为15000时，也能返回值(证明不会爆栈)，就是巨慢...</span></span><br><span class="line">add(<span class="number">100</span>).then(<span class="function"><span class="params">res</span>=&gt;</span><span class="built_in">console</span>.log(res))</span><br></pre></td></tr></table></figure></p><p>相关文章</p><blockquote><p><a href="https://github.com/pfan123/Articles/issues/50" target="_blank" rel="noopener">如何避免 JavaScript 长递归导致的堆栈溢出？</a><br><a href="http://www.thinkingincrowd.me/2016/06/06/How-to-avoid-Stack-overflow-error-on-recursive/" target="_blank" rel="noopener">How to avoid Stack overflow error on recursion</a><br><a href="http://muchstudy.com/2019/03/04/CodeReview%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%85%B3%E4%BA%8EJS%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E7%9A%84%E9%9A%8F%E6%83%B3%E6%95%B4%E7%90%86/">CodeReview过程中关于JS代码性能的随想整理</a></p></blockquote><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题模拟&quot;&gt;&lt;a href=&quot;#问题模拟&quot; class=&quot;headerlink&quot; title=&quot;问题模拟&quot;&gt;&lt;/a&gt;问题模拟&lt;/h2&gt;&lt;p&gt;让递归爆栈还是很简单的，例如如下代码就能轻而易举实现&lt;br&gt;&lt;figure class=&quot;highlight javascr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>模拟koa洋葱模型实现</title>
    <link href="http://muchstudy.com/2020/08/26/%E6%A8%A1%E6%8B%9Fkoa%E6%B4%8B%E8%91%B1%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0/"/>
    <id>http://muchstudy.com/2020/08/26/模拟koa洋葱模型实现/</id>
    <published>2020-08-26T06:32:34.000Z</published>
    <updated>2020-08-26T06:44:35.205Z</updated>
    
    <content type="html"><![CDATA[<p>koa洋葱模型即是注册的中间件采取先进后出的运行策略。<br><img src="/2020/08/26/模拟koa洋葱模型实现/洋葱模型.jpg"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> next =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line">app.use(<span class="keyword">async</span> next =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="string">"hello"</span>);</span><br><span class="line">        &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">app.use(<span class="keyword">async</span> next =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> fn(); <span class="comment">// 调用异步函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">6</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.compose();</span><br></pre></td></tr></table></figure><p>实现use与compose方法，预期输出如下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">hello</span><br><span class="line">6</span><br><span class="line">4</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><h2 id="方法实现"><a href="#方法实现" class="headerlink" title="方法实现"></a>方法实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = &#123;</span><br><span class="line">    middlewares: []</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 use 方法</span></span><br><span class="line">app.use = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    app.middlewares.push(fn);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.compose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 递归函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 如果所有中间件都执行完跳出</span></span><br><span class="line">        <span class="keyword">if</span> (index === app.middlewares.length) <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出第 index 个中间件并执行</span></span><br><span class="line">        <span class="keyword">const</span> middleware = app.middlewares[index];</span><br><span class="line">        <span class="comment">// 核心在这一行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(middleware(<span class="function"><span class="params">()</span> =&gt;</span> dispatch(index + <span class="number">1</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取出第一个中间件函数执行</span></span><br><span class="line">    dispatch(<span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;koa洋葱模型即是注册的中间件采取先进后出的运行策略。&lt;br&gt;&lt;img src=&quot;/2020/08/26/模拟koa洋葱模型实现/洋葱模型.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Promise重试功能实现</title>
    <link href="http://muchstudy.com/2020/08/15/Promise%E9%87%8D%E8%AF%95%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
    <id>http://muchstudy.com/2020/08/15/Promise重试功能实现/</id>
    <published>2020-08-15T15:28:10.000Z</published>
    <updated>2020-08-15T15:29:23.689Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>使用Promise封装异步请求数据时，当请求失败，可重试指定次数，最好封装一个<code>retry(fun:Promise, times:Number)</code>的重试工具函数</p><h2 id="方法实现"><a href="#方法实现" class="headerlink" title="方法实现"></a>方法实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">retry</span>(<span class="params">fn, times</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            fn().then(resolve).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(times--)&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">`还有 <span class="subst">$&#123;times&#125;</span> 次尝试`</span>)</span><br><span class="line">                    run()</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    reject(err)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        run()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试样例"><a href="#测试样例" class="headerlink" title="测试样例"></a>测试样例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每隔一秒生成一个随机数，大于0.9才resolve</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">retryDemo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> r = <span class="built_in">Math</span>.random()</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(r)</span><br><span class="line">            <span class="keyword">if</span>(r&gt;<span class="number">0.9</span>)&#123;</span><br><span class="line">                resolve(r)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                reject(<span class="string">'error:'</span>+r)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用重试函数</span></span><br><span class="line">retry(retryDemo, <span class="number">5</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'成功：'</span>+ res)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印结果如下，5次都失败则打印error</span></span><br><span class="line"><span class="comment">0.13828016742576854</span></span><br><span class="line"><span class="comment">VM642:6 还有 4 次尝试</span></span><br><span class="line"><span class="comment">VM642:21 0.44909079753721226</span></span><br><span class="line"><span class="comment">VM642:6 还有 3 次尝试</span></span><br><span class="line"><span class="comment">VM642:21 0.03058115685015439</span></span><br><span class="line"><span class="comment">VM642:6 还有 2 次尝试</span></span><br><span class="line"><span class="comment">VM642:21 0.29728641790549015</span></span><br><span class="line"><span class="comment">VM642:6 还有 1 次尝试</span></span><br><span class="line"><span class="comment">VM642:21 0.9243906323866069</span></span><br><span class="line"><span class="comment">VM725:2 成功：0.9243906323866069</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;使用Promise封装异步请求数据时，当请求失败，可重试指定次数，最好封装一个&lt;code&gt;retry(fun:Promise
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Javascript类型与类型判断</title>
    <link href="http://muchstudy.com/2020/07/31/Javascript%E7%B1%BB%E5%9E%8B%E4%B8%8E%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    <id>http://muchstudy.com/2020/07/31/Javascript类型与类型判断/</id>
    <published>2020-07-31T15:32:39.000Z</published>
    <updated>2020-08-09T15:59:11.468Z</updated>
    
    <content type="html"><![CDATA[<p>JS类型与类型判断是JS中的基础，有必要归纳总结整理一下。</p><blockquote><p>对于这样一篇文章实际上是个人资料库里的一个整理文档，一直在想这么一篇烂大街的文章分享出来是不是有水文的嫌疑？但是，转过头一想，如果大家把文章中的外链都翻过一遍，那就会觉得：<strong>一个不起眼的小点也有它的价值。</strong></p></blockquote><h2 id="JS类型"><a href="#JS类型" class="headerlink" title="JS类型"></a>JS类型</h2><p>JS共有8种类型，如下表所示</p><p>7种<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive" target="_blank" rel="noopener">基本类型</a></p><ul><li>Boolean</li><li>Null</li><li>Undefined</li><li>Number</li><li>BigInt</li><li>String</li><li>Symbol</li></ul><blockquote><p>基本类型（基本数值、基本数据类型）是一种既非对象也无方法的数据。<br>所有基本类型的值都是不可改变的。但需要注意的是，基本类型本身和一个赋值为基本类型的变量的区别。变量会被赋予一个新值，而原值不能像数组、对象以及函数那样被改变。</p></blockquote><p>剩余一种</p><ul><li>Object</li></ul><blockquote><p>除 Object 以外的所有类型都是不可变的（值本身无法被改变）</p><p>JavaScript 数据类型和数据结构：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures</a></p></blockquote><h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><h3 id="基本类型判断"><a href="#基本类型判断" class="headerlink" title="基本类型判断"></a>基本类型判断</h3><ul><li><p>Boolean</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// boolean</span></span><br></pre></td></tr></table></figure></li><li><p>Number</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">1</span> <span class="comment">// number</span></span><br></pre></td></tr></table></figure></li><li><p>String</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="string">'1'</span> <span class="comment">// string</span></span><br></pre></td></tr></table></figure></li><li><p>Undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// undefined</span></span><br><span class="line"><span class="literal">undefined</span> === <span class="literal">undefined</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>Null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">null</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>为什么<code>typeof null</code>为Object呢？答案如下：<br>在 JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 0。由于 null 代表的是空指针（大多数平台下值为 0x00），因此，null 的类型标签是 0，typeof null 也因此返回 “object”。（参考来源）<br>曾有一个 ECMAScript 的修复提案（通过选择性加入的方式），但被拒绝了。该提案会导致 typeof null === ‘null’。</p><p>Why is typeof null “object”? : <a href="https://stackoverflow.com/questions/18808226/why-is-typeof-null-object" target="_blank" rel="noopener">https://stackoverflow.com/questions/18808226/why-is-typeof-null-object</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof#null" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof#null</a></p></blockquote><ul><li>BigInt<br>可以用在一个整数字面量后面加 n 的方式定义一个 BigInt ，如：10n，或者调用函数BigInt()。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">10</span>n === <span class="string">'bigint'</span>; <span class="comment">// true</span></span><br><span class="line"><span class="number">10</span>n == <span class="number">10</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">10</span>n === <span class="number">10</span> <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> BigInt(<span class="string">'1'</span>) === <span class="string">'bigint'</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>BigInt: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt</a></p></blockquote><ul><li>Symbol<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>() <span class="comment">// symbol</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>由上可以看出，基本类型除了null之外，都可以使用typeof判断出来具体类型.</p><p>Why is typeof null “object”? : <a href="https://stackoverflow.com/questions/18808226/why-is-typeof-null-object" target="_blank" rel="noopener">https://stackoverflow.com/questions/18808226/why-is-typeof-null-object</a></p></blockquote><h3 id="Object类型判断"><a href="#Object类型判断" class="headerlink" title="Object类型判断"></a>Object类型判断</h3><ul><li><p>Array</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>,<span class="number">2</span>]) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>Function</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> (<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;) <span class="comment">// function</span></span><br></pre></td></tr></table></figure></li></ul><p>对于像Date、Math等对象，就没有很好的直接判断方式了，但是可以通过<code>Object.prototype.toString.call(obj)</code>来判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call([]); <span class="comment">// [object Array]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="string">''</span>); <span class="comment">// [object String]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">// [object Date]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>); <span class="comment">// [object Number]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;); <span class="comment">// [object Function]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="regexp">/test/i</span>); <span class="comment">// [object RegExp]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">true</span>); <span class="comment">// [object Boolean]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>); <span class="comment">// [object Null]</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(); <span class="comment">// [object Undefined]</span></span><br></pre></td></tr></table></figure><blockquote><p>Understanding JavaScript types and reliable type checking.<br><a href="https://ultimatecourses.com/blog/understanding-javascript-types-and-reliable-type-checking" target="_blank" rel="noopener">https://ultimatecourses.com/blog/understanding-javascript-types-and-reliable-type-checking</a></p></blockquote><h2 id="类型判断工具类"><a href="#类型判断工具类" class="headerlink" title="类型判断工具类"></a>类型判断工具类</h2><p>通过上面的总结分析，可以考虑封装一个类型判断的工具类，下面是感觉最简洁高效的一个实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> type = (<span class="function"><span class="keyword">function</span>(<span class="params">global</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> key;</span><br><span class="line">        <span class="keyword">return</span> obj === <span class="literal">null</span> ? <span class="string">'null'</span> <span class="comment">// null</span></span><br><span class="line">            : obj === global ? <span class="string">'global'</span> <span class="comment">// window in browser or global in nodejs</span></span><br><span class="line">            : (key = <span class="keyword">typeof</span> obj) !== <span class="string">'object'</span> ? key <span class="comment">// basic: string, boolean, number, undefined, function</span></span><br><span class="line">            : obj.nodeType ? <span class="string">'object'</span> <span class="comment">// DOM element</span></span><br><span class="line">            : cache[key = (&#123;&#125;).toString.call(obj)] <span class="comment">// cached. date, regexp, error, object, array, math</span></span><br><span class="line">            || (cache[key] = key.slice(<span class="number">8</span>, <span class="number">-1</span>).toLowerCase()); <span class="comment">// get XXXX from [object XXXX], and cache it</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;(<span class="keyword">this</span>));</span><br></pre></td></tr></table></figure></p><p>这样使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">type(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;); <span class="comment">// -&gt; "function"</span></span><br><span class="line">type([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// -&gt; "array"</span></span><br><span class="line">type(<span class="keyword">new</span> <span class="built_in">Date</span>()); <span class="comment">// -&gt; "date"</span></span><br><span class="line">type(&#123;&#125;); <span class="comment">// -&gt; "object"</span></span><br></pre></td></tr></table></figure></p><blockquote><p>The most accurate way to check JS object’s type? <a href="https://stackoverflow.com/questions/7893776/the-most-accurate-way-to-check-js-objects-type" target="_blank" rel="noopener">https://stackoverflow.com/questions/7893776/the-most-accurate-way-to-check-js-objects-type</a></p></blockquote><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li>NaN<br>注意NaN不是一种数据类型。<br>NaN是一个全局对象的属性，它表示不是一个数字（Not-A-Number）。</li></ul><p>NaN有如下特性：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span> <span class="comment">// number</span></span><br><span class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span> <span class="comment">// false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>) <span class="comment">// true,可以通过此种方式来判断NaN</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="built_in">Number</span>(<span class="string">'num'</span>) <span class="comment">// 此时num为NaN</span></span><br><span class="line">num === num <span class="comment">// flase</span></span><br></pre></td></tr></table></figure></p><blockquote><p>NaN: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN</a><br>Why does typeof NaN return ‘number’? :<a href="https://stackoverflow.com/questions/2801601/why-does-typeof-nan-return-number" target="_blank" rel="noopener">https://stackoverflow.com/questions/2801601/why-does-typeof-nan-return-number</a></p></blockquote><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JS类型与类型判断是JS中的基础，有必要归纳总结整理一下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于这样一篇文章实际上是个人资料库里的一个整理文档，一直在想这么一篇烂大街的文章分享出来是不是有水文的嫌疑？但是，转过头一想，如果大家把文章中的外链都翻过一遍，那就会觉得：&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch索引自动化管理</title>
    <link href="http://muchstudy.com/2020/06/04/Elasticsearch%E7%B4%A2%E5%BC%95%E8%87%AA%E5%8A%A8%E5%8C%96%E7%AE%A1%E7%90%86/"/>
    <id>http://muchstudy.com/2020/06/04/Elasticsearch索引自动化管理/</id>
    <published>2020-06-04T10:19:11.000Z</published>
    <updated>2020-06-04T16:18:50.969Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/06/04/Elasticsearch索引自动化管理/索引.jpg"><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前端性能监控的日志之前为单一索引，随着日志内容的不断增多，索引文件变得越来越多大（官方建议单个索引文件不要超过20G）。</p><p>在此种方案下只能定时通过<code>delete query</code>的方式删除xxx天之前的数据，此种方式删除数据时异常缓慢，而且磁盘空间不会立即释放。</p><p>亟需采取新的索引方案解决该问题，比如按天生成索引，定时删除一个月之前的索引文件,直接删除索引文件的效率会高不少。</p><h2 id="索引创建"><a href="#索引创建" class="headerlink" title="索引创建"></a>索引创建</h2><h3 id="索引模板"><a href="#索引模板" class="headerlink" title="索引模板"></a>索引模板</h3><p>索引模板是为了方便按天去生成相同配置的索引文件，样例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"># 创建索引模板</span><br><span class="line">PUT _template/jz-fe-performance-log-template</span><br><span class="line">&#123;</span><br><span class="line">  &quot;index_patterns&quot; : [&quot;jz-fe-performance-log-*&quot;],</span><br><span class="line">  &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;index&quot; : &#123;</span><br><span class="line">        &quot;lifecycle&quot; : &#123;</span><br><span class="line">          &quot;name&quot; : &quot;jz-fe-log-15days&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;dynamic&quot;: &quot;strict&quot;,</span><br><span class="line">    &quot;properties&quot;:&#123;</span><br><span class="line">      &quot;groupName&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;projectName&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;href&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;clientDate&quot;:&#123;&quot;type&quot;:&quot;date&quot;,&quot;format&quot;:&quot;yyyy-MM-dd HH:mm:ss&quot;&#125;,</span><br><span class="line">      &quot;serverDate&quot;:&#123;&quot;type&quot;:&quot;date&quot;,&quot;format&quot;:&quot;yyyy-MM-dd HH:mm:ss&quot;&#125;,</span><br><span class="line">      &quot;appId&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;hmsr&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;znsr&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;hmpl&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;unloadTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;redirectTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;appCacheTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;dnsTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;tcpTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;requestTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;responseTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;analysisTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;loadEventTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;connectTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;resourceTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;domReadyTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;TTFBTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;TTSRTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;TTDCTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;TTFLTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;FMPTime&quot;:&#123;&quot;type&quot;:&quot;integer&quot;&#125;,</span><br><span class="line">      &quot;uid&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;phone&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;platform&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;os&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;browser&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;version&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;userAgent&quot;:&#123;&quot;type&quot;:&quot;text&quot;&#125;,</span><br><span class="line">      &quot;ip&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;networkType&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;ISP&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;,</span><br><span class="line">      &quot;region&quot;:&#123;&quot;type&quot;:&quot;keyword&quot;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>PUT _template/jz-fe-performance-log-template</code>创建名称为<code>jz-fe-performance-log-template</code>的索引模板</li><li><code>index_patterns</code>中的<code>jz-fe-performance-log-*</code>代表索引名称为<code>jz-fe-performance-log-</code>的索引都按这个模板的配置去生成</li><li><code>settings</code>中的<code>lifecycle</code>项注明以哪一个lifecycle配置来管理该索引，在后续的索引删除部分会使用到</li><li><code>mappings</code>就是所有文档的配置了，<code>strict</code>表面为严格模式，索引数据只能为下面声明的字段名称，否则无法保存</li></ul><h3 id="数据保存"><a href="#数据保存" class="headerlink" title="数据保存"></a>数据保存</h3><p>在数据调用Node服务接口时，做如下处理，即可按天把日志保存到当天的日志文件中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Client &#125; = <span class="built_in">require</span>(<span class="string">'@elastic/elasticsearch'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 性能数据索引</span></span><br><span class="line"><span class="keyword">const</span> PERFORMANCE_PROD_INDEX = <span class="string">'jz-fe-performance-log'</span></span><br><span class="line"><span class="keyword">const</span> PERFORMANCE_TEST_INDEX = <span class="string">'jz-fe-performance-log-test'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ES数据插入操作</span></span><br><span class="line"><span class="comment"> * @param index 索引</span></span><br><span class="line"><span class="comment"> * @param data 数据</span></span><br><span class="line"><span class="comment"> * @returns &#123;Promise&lt;ApiResponse&lt;any&gt;&gt;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">base</span> (<span class="params">&#123; index, data &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> client.index(&#123;</span><br><span class="line">        index: index,</span><br><span class="line">        body: data</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'err'</span>, <span class="built_in">JSON</span>.stringify(err))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 日期格式化</span></span><br><span class="line"><span class="comment">  * 返回 2020-6-5类型数据</span></span><br><span class="line"><span class="comment">  * @param &#123;日期&#125; date</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateFormat</span> (<span class="params">date</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> year = date.getFullYear()</span><br><span class="line">    <span class="keyword">const</span> month = date.getMonth() + <span class="number">1</span></span><br><span class="line">    <span class="keyword">const</span> day = date.getDate()</span><br><span class="line">    <span class="keyword">return</span> year + <span class="string">'-'</span> + month + <span class="string">'-'</span> + day</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 性能数据入库</span></span><br><span class="line"><span class="comment"> * @param body</span></span><br><span class="line"><span class="comment"> * @returns &#123;Promise&lt;ApiResponse&lt;any&gt;|TResult&gt;&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">performanceAdd</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> index = tools.isTestENV() ? PERFORMANCE_TEST_INDEX : <span class="string">`<span class="subst">$&#123;PERFORMANCE_PROD_INDEX&#125;</span>-<span class="subst">$&#123;dateFormat(<span class="keyword">new</span> <span class="built_in">Date</span>())&#125;</span>`</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> base(&#123; <span class="attr">index</span>: index, data &#125;)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说明：</p><ul><li>索引名称以<code>jz-fe-performance-log</code>打头的索引文件没有时都为以上面的模板新创建</li><li>性能数据保存时，指定保存到当天的索引文件中</li></ul><h2 id="索引删除"><a href="#索引删除" class="headerlink" title="索引删除"></a>索引删除</h2><p>实现了索引文件按天拆分之后，下一步就需要考虑如何把索引文件管理起来。</p><p>日志数据一般只保留一个月，这个时候可以考虑可以写一个程序定时去删除一个月之前的索引。</p><p>Elasticsearch 6.6开始提供了一个叫<code>Index Lifecycle Management</code>的功能来管理日志。</p><h3 id="ILM配置"><a href="#ILM配置" class="headerlink" title="ILM配置"></a>ILM配置</h3><p>可以通过kibana可视化的做配置，也可以通过写ES语句的方式创建</p><img src="/2020/06/04/Elasticsearch索引自动化管理/ES-IML-1.jpg"><p>点击<code>Create policy</code>即可创建对应配置</p><img src="/2020/06/04/Elasticsearch索引自动化管理/ES-IML-2.jpg"><p>可通过如下方式查看刚才创建的具体配置信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看Index Lifecycle Manegment配置</span><br><span class="line">GET /_ilm/policy/jz-fe-log-15days</span><br></pre></td></tr></table></figure></p><p>返回结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;jz-fe-log-15days&quot; : &#123;</span><br><span class="line">    &quot;version&quot; : 1,</span><br><span class="line">    &quot;modified_date&quot; : &quot;2020-06-04T10:02:16.233Z&quot;,</span><br><span class="line">    &quot;policy&quot; : &#123;</span><br><span class="line">      &quot;phases&quot; : &#123;</span><br><span class="line">        &quot;hot&quot; : &#123;</span><br><span class="line">          &quot;min_age&quot; : &quot;0ms&quot;,</span><br><span class="line">          &quot;actions&quot; : &#123;</span><br><span class="line">            &quot;set_priority&quot; : &#123;</span><br><span class="line">              &quot;priority&quot; : 100</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;delete&quot; : &#123;</span><br><span class="line">          &quot;min_age&quot; : &quot;15d&quot;,</span><br><span class="line">          &quot;actions&quot; : &#123;</span><br><span class="line">            &quot;delete&quot; : &#123; &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>说明：</p><ul><li>索引要被哪个ILM管理是在索引的<code>settings</code>的<code>lifecycle</code>处指定的</li><li>ES默认10分钟执行一次检查，如果对应索引满足创建时间大于15天，则删除索引</li></ul><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><p>下面是测试验证该功能会用到的相关ES语句<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> =========索引模板相关===========</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建索引模板</span></span><br><span class="line">PUT _template/jz-fe-test-template</span><br><span class="line">&#123;</span><br><span class="line">  "index_patterns" : ["jz-fe-test-*"],</span><br><span class="line">  "settings" : &#123;</span><br><span class="line">      "index" : &#123;</span><br><span class="line">        "lifecycle" : &#123;</span><br><span class="line">          "name" : "jz-fe-log-30s"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "dynamic": "strict",</span><br><span class="line">    "properties":&#123;</span><br><span class="line">      "gitGroup":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "projectName":&#123;"type":"keyword"&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定template信息</span></span><br><span class="line">GET /_template/jz-fe-test-template</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看指定前缀template信息</span></span><br><span class="line">GET /_template/jz-fe-*</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除索引模板</span></span><br><span class="line">DELETE /_template/jz-fe-test-template</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加数据</span></span><br><span class="line">POST /jz-fe-test-2020-06-03/_doc</span><br><span class="line">&#123;</span><br><span class="line">  "gitGroup":"OS X",</span><br><span class="line">  "projectName":"iPhone2"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询数据</span></span><br><span class="line">GET jz-fe-test-2020-06-*/_search</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看索引详情</span></span><br><span class="line">GET /_cat/indices/jz-fe-test*?v&amp;s=index</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除测试索引</span></span><br><span class="line">DELETE /jz-fe-test-2020-06-*</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> =========Index Lifecyce Management===========</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置10秒刷新1次(即定时器间隔)，生产环境10分种刷新一次</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可设置索引的保留时间为30s，每10s判断一次是否满足条件</span></span><br><span class="line">PUT _cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">  "persistent": &#123;</span><br><span class="line">    "indices.lifecycle.poll_interval":"10s"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看设置</span></span><br><span class="line">GET _cluster/settings</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看Index Lifecycle Manegment配置</span></span><br><span class="line">GET /_ilm/policy/jz-fe-log-15days</span><br></pre></td></tr></table></figure></p><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/06/04/Elasticsearch索引自动化管理/索引.jpg&quot;&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;前端性能监控的日志之前为单一索引，随
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>两个“跑路”级别BUG复盘</title>
    <link href="http://muchstudy.com/2020/06/02/%E4%B8%A4%E4%B8%AA%E2%80%9C%E8%B7%91%E8%B7%AF%E2%80%9D%E7%BA%A7%E5%88%ABBUG%E5%A4%8D%E7%9B%98/"/>
    <id>http://muchstudy.com/2020/06/02/两个“跑路”级别BUG复盘/</id>
    <published>2020-06-02T13:08:36.000Z</published>
    <updated>2020-06-02T13:09:38.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="自动登录越权"><a href="#自动登录越权" class="headerlink" title="自动登录越权"></a>自动登录越权</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>小程序原生跳转到webview的H5页面时，需要打通用户登录；此时需要在跳转的URL上带上临时token，通过临时token换取登录cookie。</p><p>实现的方案为通过Node服务的拦截器，自动拦截小程序环境中的H5页面请求，自动设置上cookie。</p><h3 id="问题-amp-原因"><a href="#问题-amp-原因" class="headerlink" title="问题&amp;原因"></a>问题&amp;原因</h3><p>自动登录相关的逻辑封装在AutoLogin类中，如下所示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动登录相关</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoLogin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init (ctx) &#123;</span><br><span class="line">    <span class="keyword">this</span>.ctx = ctx</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 触发条件</span></span><br><span class="line"><span class="comment">   * @returns &#123;boolean&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  trackRule () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 自动登录逻辑</span></span><br><span class="line"><span class="comment">   * @param res</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> autoLogin () &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 自动退出登录逻辑</span></span><br><span class="line"><span class="comment">   * 备注：当实现小程序跳H5自动登录后，此时小程序退出登录，需同时保证H5页面也退出登录</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">async</span> autoLogout () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> AutoLogin()</span><br></pre></td></tr></table></figure></p><p>核心原因在于<code>this.ctx = ctx</code>这一行，这行代码意味着在内存中持有了koa的ctx对象，当并发场景，会造成第一个请求链路还未完结时，ctx被替换为第二个请求的上下文对象了，从而造成header中的cookie信息不对，权限错乱。</p><h2 id="类型异常"><a href="#类型异常" class="headerlink" title="类型异常"></a>类型异常</h2><h3 id="问题-amp-原因-1"><a href="#问题-amp-原因-1" class="headerlink" title="问题&amp;原因"></a>问题&amp;原因</h3><p>问题代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Object.entries(config.proxy).map(([path, target]) =&gt; &#123;</span><br><span class="line">        let &#123; url, login, intercept, extParams &#125; = this.getProxyParams(target)</span><br><span class="line">        this.addRouter(&#123;</span><br><span class="line">          routerPath: `$&#123;routerRoot&#125;$&#123;path&#125;`,</span><br><span class="line">          target: url,</span><br><span class="line">          callback: async ctx =&gt; &#123;</span><br><span class="line">            // 支持extParams为function类型,传入ctx方便从request中获取数据</span><br><span class="line">            extParams = Object.assign(&#123;&#125;, typeof (extParams) === &apos;function&apos; ? extParams(ctx) : extParams)</span><br><span class="line">            // 登录校验</span><br><span class="line">            if (login) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            // 接口透传</span><br><span class="line">            await proxy.launch(&#123; url, reqParams &#125;, ctx)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure></p><p>问题在于这一行代码<code>extParams = Object.assign({}, typeof (extParams) === &#39;function&#39; ? extParams(ctx) : extParams)</code></p><p>第一次请求的时候extParams为function类型，正常运行；第二次进来由于extParams已经变为了Object类型了，所以这段代码当第二个人请求进来时，永远都是运行的false逻辑，也就是第一个人ctx中的内容。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul><li>在Node服务中，切忌保存上下文对象，尽量不要持有跟用户相关的非全局信息</li><li>缺少TS的场景下，注意JS的类型</li></ul><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;自动登录越权&quot;&gt;&lt;a href=&quot;#自动登录越权&quot; class=&quot;headerlink&quot; title=&quot;自动登录越权&quot;&gt;&lt;/a&gt;自动登录越权&lt;/h2&gt;&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记一次Node线上服务迁移</title>
    <link href="http://muchstudy.com/2020/05/24/%E8%AE%B0%E4%B8%80%E6%AC%A1Node%E7%BA%BF%E4%B8%8A%E6%9C%8D%E5%8A%A1%E8%BF%81%E7%A7%BB/"/>
    <id>http://muchstudy.com/2020/05/24/记一次Node线上服务迁移/</id>
    <published>2020-05-24T11:26:16.000Z</published>
    <updated>2020-05-24T11:58:29.755Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/05/24/记一次Node线上服务迁移/服务迁移.jpeg"><p>原有的Node服务，需要迁移到新的主机上，故需要准备一套新的环境，以及对应的迁移方案。</p><h2 id="Node安装"><a href="#Node安装" class="headerlink" title="Node安装"></a>Node安装</h2><h3 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h3><blockquote><p>下载地址： <a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br>选择：Linux Binaries (x64) 右键复制下载链接</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载到机器上，放在/opt目录</span></span><br><span class="line">[work@40-14-22 opt]$ wget https://nodejs.org/dist/v12.16.2/node-v12.16.2-linux-x64.tar.xz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">[work@40-14-22 opt]$ tar -xvf node-v12.16.2-linux-x64.tar.xz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重命名</span></span><br><span class="line">[work@40-14-22 opt]$ mv node-v12.16.2-linux-x64 nodejs</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加软链让node、npm命令能够全局访问(需要 ROOT权限)</span></span><br><span class="line">[root@40-14-22 opt]# ln -s /opt/nodejs/bin/node  /usr/local/bin/</span><br><span class="line">[root@40-14-22 opt]# node -v</span><br><span class="line">v12.16.2</span><br><span class="line"></span><br><span class="line">[root@40-14-22 opt]# ln -s /opt/nodejs/bin/npm /usr/local/bin/</span><br><span class="line">[root@40-14-22 opt]# npm -v</span><br><span class="line">6.14.4</span><br></pre></td></tr></table></figure><h3 id="使用NVM安装"><a href="#使用NVM安装" class="headerlink" title="使用NVM安装"></a>使用NVM安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装NVM：https://github.com/nvm-sh/nvm</span></span><br><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装Node</span></span><br><span class="line">nvm install v12.16.3</span><br></pre></td></tr></table></figure><p>使用NVM的好处在于可以管理Node版本，同一机器上可灵活切换不同Node版本，一键安装较方便</p><h4 id="NVM常用命令"><a href="#NVM常用命令" class="headerlink" title="NVM常用命令"></a>NVM常用命令</h4><ul><li><code>nvm install v12.16.3</code>：安装指定版本的Node</li><li><code>nvm use v12.16.2</code>：使用指定版本的Node</li><li><code>nvm ls</code>: 查看当前使用的Node版本</li><li><code>nvm -h</code>: 查看帮助文档</li></ul><h2 id="运行环境准备"><a href="#运行环境准备" class="headerlink" title="运行环境准备"></a>运行环境准备</h2><h3 id="安装PM2"><a href="#安装PM2" class="headerlink" title="安装PM2"></a>安装PM2</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 全局安装</span></span><br><span class="line">[root@40-14-22 opt]# npm install pm2 -g</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不支持全局使用，需配置软链</span></span><br><span class="line">[root@40-14-22 bin]# ln -s /opt/nodejs/lib/node_modules/pm2/bin/pm2 /usr/local/bin/</span><br></pre></td></tr></table></figure><h3 id="日志分割"><a href="#日志分割" class="headerlink" title="日志分割"></a>日志分割</h3><blockquote><p>官方文档：<a href="https://www.npmjs.com/package/pm2-logrotate" target="_blank" rel="noopener">https://www.npmjs.com/package/pm2-logrotate</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装pm2-logrotate</span></span><br><span class="line">[work@40-14-22 log]$ pm2 install pm2-logrotate</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置超过1G分割</span></span><br><span class="line">pm2 set pm2-logrotate:max_size 1G</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置最多保存200个日志文件</span></span><br><span class="line">pm2 set pm2-logrotate:retain 200</span><br><span class="line"><span class="meta">#</span><span class="bash"> 是否通过gzip压缩日志</span></span><br><span class="line">pm2 set pm2-logrotate:compress false</span><br><span class="line">pm2 set pm2-logrotate:dateFormat YYYY-MM-DD_HH-mm-ss</span><br><span class="line">pm2 set pm2-logrotate:workerInterval 30</span><br><span class="line"><span class="meta">#</span><span class="bash"> 每天晚上23:59:30分割</span></span><br><span class="line">pm2 set pm2-logrotate:rotateInterval '30 59 23 * * *'</span><br><span class="line">pm2 set pm2-logrotate:rotateModule true</span><br></pre></td></tr></table></figure></p></blockquote><p>设置完成后可以通过<code>pm2 conf pm2-logrotate</code>查看设置的是否正确<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[work@40-14-22 .pm2]$ pm2 conf pm2-logrotate</span><br><span class="line">Module: pm2-logrotate</span><br><span class="line">$ pm2 set pm2-logrotate:max_size 1G</span><br><span class="line">$ pm2 set pm2-logrotate:retain 200</span><br><span class="line">$ pm2 set pm2-logrotate:compress false</span><br><span class="line">$ pm2 set pm2-logrotate:dateFormat YYYY-MM-DD_HH-mm-ss</span><br><span class="line">$ pm2 set pm2-logrotate:workerInterval 30</span><br><span class="line">$ pm2 set pm2-logrotate:rotateInterval 0 0 * * *</span><br><span class="line">$ pm2 set pm2-logrotate:rotateModule true</span><br><span class="line">Module: module-db-v2</span><br><span class="line">$ pm2 set module-db-v2:pm2-logrotate [object Object]</span><br></pre></td></tr></table></figure></p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>安装git是为了让pm2部署时能够从仓库中拉取代码，并部署</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@40-14-22 ~]# yum install git</span><br></pre></td></tr></table></figure><h4 id="配置公钥"><a href="#配置公钥" class="headerlink" title="配置公钥"></a>配置公钥</h4><p>拷贝机器的公钥串(当前用户的.ssh目录下的.pub文件内容)，粘贴到公共的gitlab下的授权下即可；目的是允许机器拉取gitlab仓库中的私有代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成公钥-一直回车即可</span><br><span class="line">[work@40-14-22 .ssh]$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><blockquote><p>最好使用公共账号，不要使用个人账号</p></blockquote><p>如不配置ssh，pm2拉代码的时候会提示如下无权限错误<br><img src="/2020/05/24/记一次Node线上服务迁移/git权限报错.png"></p><h3 id="服务器授信"><a href="#服务器授信" class="headerlink" title="服务器授信"></a>服务器授信</h3><img src="/2020/05/24/记一次Node线上服务迁移/服务器授信.png"><h4 id="部署机与服务器"><a href="#部署机与服务器" class="headerlink" title="部署机与服务器"></a>部署机与服务器</h4><blockquote><p>目的: 部署机可免密访问目标机</p></blockquote><p>编辑目标机<code>.ssh</code>目录下的<code>authorized_keys</code>文件，粘贴保存部署机上<code>.ssh</code>目录下<code>.pub</code>文件内容即可</p><blockquote><p>vim快捷键：<a href="https://www.cnblogs.com/junwen5599/p/9996873.html" target="_blank" rel="noopener">https://www.cnblogs.com/junwen5599/p/9996873.html</a></p></blockquote><h4 id="服务器与Gitlab服务器"><a href="#服务器与Gitlab服务器" class="headerlink" title="服务器与Gitlab服务器"></a>服务器与Gitlab服务器</h4><p>向服务器的<code>known_hosts</code>中新增Gitlab服务器的公钥</p><p>缺少配置在部署时会报如下错误</p><img src="/2020/05/24/记一次Node线上服务迁移/首次访问报错.jpg"><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>查看Linux内核版本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[work@37-14-42 log]$ uname -a</span><br><span class="line">Linux 37-14-42 2.6.32-573.22.1.el6.x86_64 #1 SMP Wed Mar 23 03:35:39 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure></p><p>查看centos版本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[work@37-14-42 log]$ cat /etc/redhat-release</span><br><span class="line">CentOS release 6.5 (Final)</span><br></pre></td></tr></table></figure></p><p>在centos6上安装最新的Node12会报如下错误<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[work@40-31-60 ~]$ node -v</span><br><span class="line">node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.14' not found (required by node)</span><br><span class="line">node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.18' not found (required by node)</span><br><span class="line">node: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.5' not found (required by node)</span><br><span class="line">node: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15' not found (required by node)</span><br><span class="line">node: /lib64/libc.so.6: version `GLIBC_2.16' not found (required by node)</span><br><span class="line">node: /lib64/libc.so.6: version `GLIBC_2.17' not found (required by node)</span><br><span class="line">node: /lib64/libc.so.6: version `GLIBC_2.14' not found (required by node)</span><br></pre></td></tr></table></figure></p><p>原因为gcc版本过低，要么升级gcc，要么系统升级到centos7</p><p>建议不要折腾，在centos6上升级gcc版本，耗力费时，可能还会存在版本匹配问题；最好选择一步到位升级系统到centos7</p><h2 id="迁移方案"><a href="#迁移方案" class="headerlink" title="迁移方案"></a>迁移方案</h2><h3 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h3><p>服务器环境准备好后，接下来就是按照线上的部署流程在新服务器上部署Node服务。</p><p>此时，由于没有经过验证，不能够直接让外网流量进来；另外，线上服务环境与公司内网环境一般也是隔离的，那么如何才能请求到新的服务验证新服务是否可用呢？</p><p>这种情况，可以借助部署机，部署机比较特殊，既可以访问内网的gitlab服务拉取代码，又可以把拉取到的代码部署到线上环境，可以部署机为跳板访问线上新的Node服务，在内网环境验证服务是否可用。</p><p>具体可参见这篇文章：<a href="https://mp.weixin.qq.com/s/59x3K2zkfk9ejmZFnrXoWw" target="_blank" rel="noopener">通过Nginx解决网络隔离实践记录</a></p><h3 id="切流量"><a href="#切流量" class="headerlink" title="切流量"></a>切流量</h3><p>当验证完服务正常后，接下来就是切流量操作了，可以采用如下两种方案</p><ul><li>把线上某一台机器的流量切到新服务上</li><li>把线上流量的10%切到新的服务上</li></ul><p>流量进来后，观察服务器的各项参数是否有异常，观察Node服务的日志监控是否有异常上报。</p><p>运行一段时间无异常，再切50%，循序渐进，最终把全部流量切到新主机。</p><p>最后，<strong>服务迁移繁琐复杂，容器化会是一个更好的选择</strong>。</p><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/05/24/记一次Node线上服务迁移/服务迁移.jpeg&quot;&gt;
&lt;p&gt;原有的Node服务，需要迁移到新的主机上，故需要准备一套新的环境，以及对应的迁移方案。&lt;/p&gt;
&lt;h2 id=&quot;Node安装&quot;&gt;&lt;a href=&quot;#Node安装&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Centos安装Mysql记录</title>
    <link href="http://muchstudy.com/2020/05/24/Centos%E5%AE%89%E8%A3%85Mysql%E8%AE%B0%E5%BD%95/"/>
    <id>http://muchstudy.com/2020/05/24/Centos安装Mysql记录/</id>
    <published>2020-05-24T09:42:49.000Z</published>
    <updated>2020-05-26T07:02:53.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 下载yum源</span><br><span class="line">wget &apos;https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm&apos;</span><br><span class="line"></span><br><span class="line"># 安装yum源</span><br><span class="line">sudo rpm -Uvh mysql57-community-release-el7-11.noarch.rpm</span><br><span class="line"></span><br><span class="line"># 查看有哪些版本可安装</span><br><span class="line">yum repolist all | grep mysql</span><br><span class="line"></span><br><span class="line"># 切换安装版本</span><br><span class="line"># 关闭5.7版本</span><br><span class="line">sudo yum-config-manager --disable mysql57-community</span><br><span class="line"># 打开5.6版本</span><br><span class="line">sudo yum-config-manager --enable mysql56-community</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">sudo yum install mysql-community-server</span><br></pre></td></tr></table></figure><p>在centos6下会报如下错误：（centos7正常）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Error: Package: mysql-community-server-5.6.48-2.el7.x86_64 (mysql56-community)</span><br><span class="line">           Requires: libc.so.6(GLIBC_2.17)(64bit)</span><br><span class="line">Error: Package: mysql-community-server-5.6.48-2.el7.x86_64 (mysql56-community)</span><br><span class="line">           Requires: systemd</span><br><span class="line">Error: Package: mysql-community-libs-5.6.48-2.el7.x86_64 (mysql56-community)</span><br><span class="line">           Requires: libc.so.6(GLIBC_2.17)(64bit)</span><br><span class="line">Error: Package: mysql-community-server-5.6.48-2.el7.x86_64 (mysql56-community)</span><br><span class="line">           Requires: libstdc++.so.6(GLIBCXX_3.4.15)(64bit)</span><br><span class="line">Error: Package: mysql-community-client-5.6.48-2.el7.x86_64 (mysql56-community)</span><br><span class="line">           Requires: libc.so.6(GLIBC_2.17)(64bit)</span><br></pre></td></tr></table></figure></p><p>原因分析如下：<br><a href="https://unix.stackexchange.com/questions/280385/can-not-install-mysql-server-on-centos-6-7-32bit-error-need-rpm" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/280385/can-not-install-mysql-server-on-centos-6-7-32bit-error-need-rpm</a></p><p>在网上找了一圈，按照下面一顿操作，发现能够正常安装成功<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># cd /etc/yum.repos.d/  找到mysql-56-community,将enable置为0 enable=0</span><br><span class="line">sudo vi mysql-community.repo</span><br><span class="line"></span><br><span class="line"># 重新安装mysql   </span><br><span class="line">sudo yum install mysql-server</span><br></pre></td></tr></table></figure></p><p>在centos6上安装完后，发现由于网络安全原因，机器无法开3306端口；索性换了一台centos7的机器，直接一气呵成安装MySQL8.0</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看mysql运行状态</span><br><span class="line">sudo service mysqld status</span><br><span class="line"># 查看端口情况</span><br><span class="line">sudo lsof -i tcp:3306</span><br><span class="line"># 启动mysql，需要加sudo，否则会报FAILED错误</span><br><span class="line">sudo service mysqld start</span><br><span class="line"># 结束服务</span><br><span class="line">sudo service mysqld stop</span><br></pre></td></tr></table></figure><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><p>首次安装后查看默认密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[work@40-31-60 soft]$ sudo grep &apos;temporary password&apos; /var/log/mysqld.log</span><br><span class="line">2020-05-21T09:56:30.576083Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: UlCbRjdoE4?a</span><br></pre></td></tr></table></figure></p><p>默认情况下Mysql是不运行远程连接的，故需要新增远程连接账户<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 连接数据库（输入上面查询出来的密码）</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></p><p>修改密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 8.0下报错</span><br><span class="line">mysql&gt; set password for root@localhost = password(&apos;root&apos;);</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &apos;password(&apos;root&apos;)&apos; at line 1</span><br><span class="line"></span><br><span class="line"># 修改密码(数字、大小写、特殊字符)</span><br><span class="line">alter user &apos;root&apos;@&apos;localhost&apos; identified by &apos;58daojiaDJ!!&apos;;</span><br><span class="line"># 密码复杂度过低会报如下错误</span><br><span class="line">ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</span><br><span class="line"></span><br><span class="line"># 查看密码强度规则</span><br><span class="line"> mysql&gt;  SHOW VARIABLES LIKE &apos;validate_password%&apos;;</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| Variable_name                        | Value  |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">| validate_password.check_user_name    | ON     |</span><br><span class="line">| validate_password.dictionary_file    |        |</span><br><span class="line">| validate_password.length             | 8      |</span><br><span class="line">| validate_password.mixed_case_count   | 1      |</span><br><span class="line">| validate_password.number_count       | 1      |</span><br><span class="line">| validate_password.policy             | MEDIUM |</span><br><span class="line">| validate_password.special_char_count | 1      |</span><br><span class="line">+--------------------------------------+--------+</span><br><span class="line">7 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure></p><h3 id="添加账户"><a href="#添加账户" class="headerlink" title="添加账户"></a>添加账户</h3><p>查看现有用户<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 选择数据库</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use mysql;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户查询</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> select host,user from user;</span></span><br><span class="line">+-----------+------------------+</span><br><span class="line">| host      | user             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">| localhost | mysql.infoschema |</span><br><span class="line">| localhost | mysql.session    |</span><br><span class="line">| localhost | mysql.sys        |</span><br><span class="line">| localhost | root             |</span><br><span class="line">+-----------+------------------+</span><br><span class="line">4 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p>新增允许远程连接的账户<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 新增用户；[admin<span class="string">'@'</span>%]中的%号代表允许任意远程客户端连接</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> CREATE USER <span class="string">'admin'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'58admin!!AAA'</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加权限</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL PRIVILEGES ON *.* TO <span class="string">'admin'</span>@<span class="string">'%'</span>;</span></span><br></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="为work账户添加sudo权限"><a href="#为work账户添加sudo权限" class="headerlink" title="为work账户添加sudo权限"></a>为work账户添加sudo权限</h3><p>root 账户键入<code>visudo</code>即可进入sudo配置<br>找到<code>root    ALL=(ALL)   ALL</code><br>在这一行下面增加<code>work ALL=(ALL)  NOPASSWD:ALL</code>即可</p><h3 id="Node连接异常处理"><a href="#Node连接异常处理" class="headerlink" title="Node连接异常处理"></a>Node连接异常处理</h3><p>使用mysql包（ <a href="https://www.npmjs.com/package/mysql" target="_blank" rel="noopener">https://www.npmjs.com/package/mysql</a> ）连接服务时报如下错误<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server; consider upgrading MySQL client</span><br></pre></td></tr></table></figure></p><p>解决方案如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 选择mysql数据库</span></span><br><span class="line">use mysql;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改admin的密码，关键在于mysql_native_password关键字指定密码类型</span></span><br><span class="line">ALTER user 'admin'@'%' IDENTIFIED WITH mysql_native_password by '58admin!!AAA';</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p><p>执行完，node端就可以连接上mysql8.0了。</p><p>可以到mysql数据库中的user表中查看密码，其它的都为<code>caching_sha2_password</code>类型，修改完的这个为<code>mysql_native_password</code></p><blockquote><p>资料：<a href="https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server" target="_blank" rel="noopener">https://stackoverflow.com/questions/50093144/mysql-8-0-client-does-not-support-authentication-protocol-requested-by-server</a></p></blockquote><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VR：虚拟与现实</title>
    <link href="http://muchstudy.com/2020/05/18/VR%EF%BC%9A%E8%99%9A%E6%8B%9F%E4%B8%8E%E7%8E%B0%E5%AE%9E/"/>
    <id>http://muchstudy.com/2020/05/18/VR：虚拟与现实/</id>
    <published>2020-05-17T16:26:56.000Z</published>
    <updated>2020-05-17T16:37:05.981Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/05/18/VR：虚拟与现实/VR：虚拟与现实.png"><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><p>周末体验了一把VR眼镜带来的不同乐趣。</p><p>给我的直观感受可以用两个字来形容：”<strong>颠覆</strong>“。</p><p>其中的游戏体验可以用2D到3D上升一个维度，3D再到VR再次上升一个维度来形容，完全的沉浸体验，给人身临其境的感觉。</p><p>戴上VR眼镜，犹如进入了另外的一个世界，而且还是一个分外逼真的世界，你的一举一动都得在这个世界有所反馈，由此引出一个问题：”<strong>现实世界中，我们看到的一切都是真实的吗？</strong>“</p><p>我相信，通过目前的VR技术，完全有能力把现实里的部分场景原封不动的搬进VR眼镜里，<strong>在这种情况下，我们该如何区分虚拟与现实？</strong></p><p>会不会出现所谓的精分（精神分裂）？会不会出现《盗梦空间》里的场景，通过一个虚拟现实中的场景，来影响到我们对现实世界的认知？</p><p>从我第一次接触体验的感受来讲，我觉得不久的将来极有可能变为现实。</p><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><p>除了这些引人深思的问题，还让让我想到了另外一个词：”<strong>降维打击</strong>“。</p><p>通过模拟出一个电影院的场景，戴上VR眼镜，你看到的周围环境，犹如真正置身于电影院里（此时你唯一缺少的就是让你能够舒舒服服坐下的沙发），通过软件设置，你还可以切换你喜欢的私人影院风格。</p><p>此时，你不再需要去电影院，在家里就能获得去电影院里观看电影的体验，甚至体验还更好。</p><p>因为，我们的感官完全来自于我们眼睛看到的内容，通过VR技术，完全有条件让眼睛信以为真。</p><p>前年新房装修，专门考虑把电视墙做平，方便后续买投影放幕布，提升观影体验，在VR里体验了一把看电影的体验后，现在想想有点可笑。</p><p><strong>当时的思维认知，决定了当时的思考与行动。</strong></p><p>就像网上的段子说：”农民的认知里皇帝是用金锄头锄地的，实际上皇帝根本就用不着锄地!“</p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><p>前几天在知乎看到这样一个问题：”<strong>前端会有未来吗？</strong>“</p><p>当时的回答是这样的：</p><blockquote><p>如果你把前端定位为写html、css、js那么可以预见的是没有未来的</p><p>如果把前端定位为用户接受信息的一种渠道，那么前端必定还有更为广阔的未来</p><p>随着技术的进步，人和信息的交互与互动会更加的多元化与场景化，这就对前端提出了更高的要求</p><p>所以，各位不要再抱怨学不动了，后面还有得学…</p><p>也正是因为这样，前端的未来才充满无数的挑战和机会，作为一个技术人，值得为此一搏！</p></blockquote><p>随着VR的不断普及，我相信跟用户相关的”前端“还会更进一步的爆炸，还会有更多的机会与挑战。</p><p>目前VR的普及主要受制于硬件的制约，想想功能机到现在人手一台的智能机，短短十年间就完成了更新换代与颠覆。</p><p>相信VR的春天一定不会太遥远。</p><p>作为一个技术人，想想都激动呀!~~~</p><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/05/18/VR：虚拟与现实/VR：虚拟与现实.png&quot;&gt;
&lt;h3 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h3&gt;&lt;p&gt;周末体验了一把VR眼镜带来的不同乐趣。&lt;/p&gt;
&lt;p&gt;给
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一文弄清传统软件开发与互联网软件开发的异同</title>
    <link href="http://muchstudy.com/2020/05/08/%E4%B8%80%E6%96%87%E5%BC%84%E6%B8%85%E4%BC%A0%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%8E%E4%BA%92%E8%81%94%E7%BD%91%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9A%84%E5%BC%82%E5%90%8C/"/>
    <id>http://muchstudy.com/2020/05/08/一文弄清传统软件开发与互联网软件开发的异同/</id>
    <published>2020-05-08T09:53:24.000Z</published>
    <updated>2020-05-08T10:00:02.317Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/05/08/一文弄清传统软件开发与互联网软件开发的异同/传统与互联网区别1.png"><blockquote><p> 在传统软件开发领域8年，从一线开发，到项目技术经理，再到产品研发技术负责人，一路走来，感受着互联网行业的软件越来越贴近日常生活，一直有一个疑问，那就是互联网行业中的软件开发是怎么样的？两年前，决定转行到互联网行业实际体验看一看，通过两年的观察总结以及实际亲身感受，我觉得我已经找到了答案，解除了心中的疑问，此文写给那些跟我有相同疑问的朋友。</p></blockquote><p>相信很多在传统软件开发领域的朋友或多或少对互联网公司的软件开发有如下疑问：<strong>开发流程是怎么样的？人员组成是怎么样的？系统架构是怎么样的？成长路线是怎么样的？是不是加班厉害？薪资福利是不是传言的那么有诱惑力？</strong></p><p>而在互联网行业高压力的同学，也会问：<strong>传统软件开发公司工作会不会轻松点？会不会稳定一点？是不是在传统软件开发领域年龄没那么敏感？</strong></p><p>这篇文章会一一解答上述疑问</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>首先，先来介绍一下何谓传统软件行业，何谓互联网软件行业，有如下几个明显差异点。</p><h3 id="传统行业"><a href="#传统行业" class="headerlink" title="传统行业"></a>传统行业</h3><p>传统软件开发行业，也可以叫做企业软件开发行业，他的明显特征如下</p><ul><li><strong><em>软件：</em></strong> 比如财务系统、OA系统、CRM、ERP等业务系统，医疗、电力、智慧城市、税务等行业软件，目的为帮助公司或政府与事业单位更高效运转的业务支撑系统</li><li><strong><em>目标群体：</em></strong>  <strong>客户</strong> - 软件的使用群体一般为公司内部员工、政府、事业单位职员</li><li><strong><em>公司：</em></strong> 金蝶、用友、中软、东软等</li></ul><h3 id="互联网行业"><a href="#互联网行业" class="headerlink" title="互联网行业"></a>互联网行业</h3><ul><li><strong><em>软件：</em></strong> 比如微信、QQ、baidu.com、今日头条、抖音、优酷等</li><li><strong><em>目标群体：</em></strong> <strong>用户</strong> - 广大互联网用户</li><li><strong><em>公司：</em></strong> 阿里、腾讯、百度、头条等  </li></ul><h2 id="项目流程"><a href="#项目流程" class="headerlink" title="项目流程"></a>项目流程</h2><p>作为码农，不论在传统行业还是互联网行业，都是做软件开发，软件开发一般都是以项目为单位。首先，就先以项目流程的角度聊一下传统软件行业与互联网软件行业的区别。</p><img src="/2020/05/08/一文弄清传统软件开发与互联网软件开发的异同/传统与互联网区别2.png"><h3 id="传统行业-1"><a href="#传统行业-1" class="headerlink" title="传统行业"></a>传统行业</h3><p>结合上图，从如下几点说说传统软件项目的项目流程</p><h4 id="需求来源"><a href="#需求来源" class="headerlink" title="需求来源"></a>需求来源</h4><blockquote><p>需求来源一般为甲方客户，当一家公司慢慢成长起来时，往往需要软件来提升公司的管理与运行效率。比如所有公司无一例外都需要人事管理系统、财务管理系统、OA系统、考勤系统；一些制造行业还需要生产管理的ERP系统，医院需要病例管理系统、学校需要学生管理系统、政府需要公文管理系统等等。这些甲方客户一般都没有专门的软件开发团队，大部分只有一个叫技术中心的部门负责网络与各种系统的管理。所以，要落地这些软件，就需要专业的软件公司来实施。</p></blockquote><h4 id="需求收集"><a href="#需求收集" class="headerlink" title="需求收集"></a>需求收集</h4><blockquote><p>有了实际的需求，要么客户主动找到软件公司，要么软件公司挖掘客户；首先入场的一般都是销售入场（主管商务事项，比如报价、签约，客户关系维护，需求挖掘，以便签约项目二期、三期…）。<br>有时还会有售前顾问支持（主管技术，比如给客户给出技术方案、初步分析出项目实施范围，方便合理报价）；需要说明的是售前顾问通常都是技术出身，项目经验丰富，不仅是技术专家，还是业务专家，对某一行业有深刻理解，能够告诉客户，怎么做才是行业最好的方案，利用行业经验帮助客户提升效率，而不是简单把客户的下线流程搬到线上。</p></blockquote><h4 id="需求实施"><a href="#需求实施" class="headerlink" title="需求实施"></a>需求实施</h4><blockquote><p>项目签约下来后，紧接着就是项目实施团队入场。<br>项目团队包含这些人：项目经理、需求分析师、技术经理、技术开发、UI、QA<br>项目实施有时为驻场开发，有时是在公司开发好后到甲方公司去部署上线</p></blockquote><h4 id="需求交付"><a href="#需求交付" class="headerlink" title="需求交付"></a>需求交付</h4><blockquote><p>需求通过QA测试部署后，通常会有试运行阶段，在试运行阶段，客户可提出问题点与优化点。所有功能没问题后，即完成交付，技术团队撤出，投入到下一个项目，销售收尾款。<br>偶尔客户还会购买系统运维服务，即支持系统运行期间的问题处理以及小需求迭代。</p></blockquote><h3 id="互联网行业-1"><a href="#互联网行业-1" class="headerlink" title="互联网行业"></a>互联网行业</h3><p>结合上图，从如下几点说说互联网软件项目的项目流程</p><h4 id="需求来源-1"><a href="#需求来源-1" class="headerlink" title="需求来源"></a>需求来源</h4><p>需求来源主要在于这三个方面</p><blockquote><ol><li>产品需求：PM发起的需求，比如要做个视频面试的新产品、要优化下单流程之类的</li><li>营销需求：此类需求一般为公司运营和营销人员发起的需求，PM把需求梳理为产品文档后，交由技术团队落地</li><li>内部需求：此类需求可理解为内部系统建设需求；前面两种一般称之为To C，这种叫To B  </li></ol><p>最后，还有一种活儿的来源，那就是技术自己发起的需求，比如系统重构，技术基础设施的建设，比如系统性能、异常监控系统、持续集成系统等</p></blockquote><h4 id="需求收集-1"><a href="#需求收集-1" class="headerlink" title="需求收集"></a>需求收集</h4><p>在互联网公司，所有的需求都会收集到产品经理（PM）处，技术团队原则上只从产品经理处承接需求</p><blockquote><p>PM会把各种需求整理成需求文档，还会附带上需求原型。通常会先期找技术初评，确认哪些功能无法实现然后调整需求文档。</p></blockquote><h4 id="需求实施-1"><a href="#需求实施-1" class="headerlink" title="需求实施"></a>需求实施</h4><blockquote><p>需求没问题后，C端需求最先入场的是UE、UI，即交互设计与视觉设计，完事后前端FE拿到设计稿后进行开发，这期间后端开发可并行，最后接口联调、测试</p></blockquote><h4 id="需求交付-1"><a href="#需求交付-1" class="headerlink" title="需求交付"></a>需求交付</h4><ul><li>测试完毕后，预发布、预发布没问题由QA上线</li></ul><p>贴一个以前端视角的大致项目流程：<br><img src="/2020/05/08/一文弄清传统软件开发与互联网软件开发的异同/传统与互联网区别3.png"></p><blockquote><p><strong>最明显的感受就是，传统行业的软件开发是给甲方干，在互联网行业的软件开发是给自己干！</strong></p></blockquote><h2 id="项目相关人员"><a href="#项目相关人员" class="headerlink" title="项目相关人员"></a>项目相关人员</h2><p>上面介绍了项目的整体流程，接着针对于项目团队的组成，即实际参与项目落地的人员以及人员分工聊一聊</p><h3 id="传统软件项目"><a href="#传统软件项目" class="headerlink" title="传统软件项目"></a>传统软件项目</h3><img src="/2020/05/08/一文弄清传统软件开发与互联网软件开发的异同/传统与互联网区别4.png"><ul><li><p>项目经理</p><blockquote><p>项目的总负责人，负责与客户对接，大部分情况参与需求的调研，把客户的线下需求转变为需求文档，给到技术人员去落地</p></blockquote></li><li><p>技术经理</p><blockquote><p>项目的技术负责人，负责整个项目的关键技术把控，业务抽象、系统架构、模块划分，以及对开发工程师的工作分配与管理</p></blockquote></li><li><p>需求分析师</p><blockquote><p>协助项目经理梳理需求，比较大的项目一般是项目经理整体把控，带领多个需求分析师，没人负责一块业务需求，把需求文档化。目的在于与客户对齐需求，保证开发出来的东西是客户想要的。还有一个比较重要的目的是，开发之前都需要客户确认需求，方便控制需求变更以及需求范围，避免无限制的增加需求。</p></blockquote></li><li><p>UI设计师</p><blockquote><p>一般PC端系统首页，以及移动端的一些页面需要UI单独设计，后台系统一般不需要。UI属于公共资源，需项目组申请，一般不常驻项目。</p></blockquote></li><li><p>开发工程师</p><blockquote><p>在传统软件开发中，很少会有专职的前端人员，大部分情况都是项目经理划分好功能模块，开发人员从数据库设计、后端业务逻辑编写，再到前端UI实现，都是同一个人。好处很明显，就是效率高；坏处就是相对于互联网行业的分工细化，质量会相对差一些。</p></blockquote></li><li><p>测试工程师</p><blockquote><p>公共资源，到测试阶段入场。一般负责压力测试、性能测试、功能逻辑测试。</p></blockquote></li><li><p>系统安全</p><blockquote><p>关于系统安全这块，政府或者国家级项目，甲方一般会找第三方安全厂商来做渗透测试，或者直接找国家网络安全中心来做系统的安全评估，最终给出系统的安全报告，有哪些系统漏洞会一一列出来。在经历过的项目中，私企这一块基本没有，政府与事业单位软件项目居多。</p></blockquote></li></ul><h3 id="互联网软件项目"><a href="#互联网软件项目" class="headerlink" title="互联网软件项目"></a>互联网软件项目</h3><p>下面贴一张曾经以项目经理角色负责过的项目，因为该项目较大，牵涉到的人较多，可以很清晰的看到一个项目的完整人员分工与构成。<br><img src="/2020/05/08/一文弄清传统软件开发与互联网软件开发的异同/传统与互联网区别5.png"></p><ul><li><p><strong>PM</strong></p><blockquote><p>产品经理，负责需求文档编写，以及需求上线后产品效果的跟踪</p></blockquote></li><li><p><strong>UE</strong></p><blockquote><p>交互设计，跟进PM的需求，制定页面的交互逻辑</p></blockquote></li><li><p><strong>UI</strong></p><blockquote><p>根据需求与交互稿设计UI图，然后注明UI图的标注，直接给到前端或者上传到蓝湖</p></blockquote></li><li><p><strong>视觉</strong></p><blockquote><p>视觉与UI实际上都属于设计部门，视觉设计的主要分工为活动海报、运营活动页面，插画等的设计</p></blockquote></li><li><p><strong>RD</strong></p><blockquote><p>后端开发，提供数据接口给到端上（FE、APP）</p></blockquote></li><li><p><strong>FE</strong></p><blockquote><p>前端开发，负责所有H5页面、各种小程序、NodeJS层的开发。</p></blockquote></li><li><p><strong>APP</strong></p><blockquote><p>一般分为两块，IOS与Android</p></blockquote></li><li><p><strong>QA</strong></p><blockquote><p>测试人员，FE与RD并行开发，都开发完毕后进行接口联调，联调完成后QA介入测试</p></blockquote></li><li><p><strong>BI</strong></p><blockquote><p>数据分析人员，数据一般来源于前端的埋点以及业务数据，负责根据相关数据给出数据分析报表</p></blockquote></li><li><p><strong>安全</strong></p><blockquote><p>安全团队负责把控系统上线前是否有安全漏洞</p></blockquote></li><li><p><strong>法务</strong></p><blockquote><p>保障新上线的项目需求无法律风险。比如一些文案的提示，活动的规则、用户协议等。</p></blockquote></li><li><p><strong>运营</strong></p><blockquote><p>提出需求，营销活动规则的指定</p></blockquote></li><li><p><strong>财务</strong></p><blockquote><p>营销活动类需求活动资金的控制</p></blockquote></li></ul><p>传统软件项目开发一般都会基于公司产品来做二次开发，提升开发效率。互联网软件大部分情况都是对现有线上业务的迭代，为了提升开发效率后端也有中台组、架构组支撑，前端与UI也会抽取业务组件方便开发。</p><p>传统软件开发项目，由项目经理负责制，从项目最开始跟到系统上线验收；互联网公司中的项目组织相对零散，需求详设评审进入开发后基本上就没PM的事情了，这个时候一般会在FE、RD、QA中推举一位项目负责人推进项目的落地，把控项目进度。敏捷项目一般由Master来负责。</p><h2 id="项目技术架构"><a href="#项目技术架构" class="headerlink" title="项目技术架构"></a>项目技术架构</h2><h3 id="传统行业-2"><a href="#传统行业-2" class="headerlink" title="传统行业"></a>传统行业</h3><blockquote><p><strong>核心诉求：</strong> 在满足功能需求的情况下，<strong>怎么好维护，怎么开发成本低怎么来</strong>。机器都是甲方出，<strong>所以能通过堆机器解决的问题都不是问题</strong> （不过也需要为客户考虑项目整体成本）</p></blockquote><p>常见的架构是这样的：<br><img src="/2020/05/08/一文弄清传统软件开发与互联网软件开发的异同/传统与互联网区别6.png"></p><p>传统行业的企业内部系统技术架构80%都是只做到读写分离、按应用拆分、分布式缓存、单独的查询服务就不再往下走了，因为再往下走，开发成本会成指数级上升。少数会做到大表拆分、负载会上LVS或F5。</p><p>对于这样的技术架构，只要机器足够，性能够强，足以支撑一家上万人的公司日常正常运转了。</p><p>对于那种项目金额上千万的项目，更多的也是采取多地分开部署，数据集中上报汇总的方式，避免架构复杂化带来的开发成本提升。</p><h3 id="互联网行业-2"><a href="#互联网行业-2" class="headerlink" title="互联网行业"></a>互联网行业</h3><blockquote><p><strong>核心诉求：</strong> 支持快速迭代、稳定、高并发。另外，机器都是自己出，多一台都是成本….</p></blockquote><p>为了达成上述诉求，基础配置大部分都是这样的，上不封顶<br><img src="/2020/05/08/一文弄清传统软件开发与互联网软件开发的异同/传统与互联网区别7.png"></p><p>可以看到，对于传统行业软件技术架构，相对于互联网软件架构，<strong>最明显的区别标志就是微服务</strong></p><blockquote><p>这里是一篇很不错的讲述架构演进的文章：<a href="https://mp.weixin.qq.com/s/yZlQUZQS0Rkn_7vY7hjvHQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/yZlQUZQS0Rkn_7vY7hjvHQ</a></p></blockquote><h2 id="成长路线"><a href="#成长路线" class="headerlink" title="成长路线"></a>成长路线</h2><p>大部分上了规模的互联网公司都有清晰明确的职级体系；传统行业软件公司大部分职级体系较模糊。</p><h3 id="传统行业-3"><a href="#传统行业-3" class="headerlink" title="传统行业"></a>传统行业</h3><p>一般分为技术路线与业务路线两种</p><h4 id="技术路线"><a href="#技术路线" class="headerlink" title="技术路线"></a>技术路线</h4><p>职级从初级开发、中级开发、高级开发、资深开发、一路到系统架构师；</p><p>实际工作中，做到在项目中负责整个项目的技术负责人，或者公司的产品研发负责人，技术路线基本就到头了</p><p>项目技术负责人更多的要求综合能力；产品研发负责人给更多要求技术深度与从项目业务中提炼成产品的能力</p><h4 id="业务路线"><a href="#业务路线" class="headerlink" title="业务路线"></a>业务路线</h4><p>大多数都会先做一两年技术，然后做项目的需求分析人员，再然后到项目经理，成为业务方面的专家；例如财务领域专家、生产制造领域业务专家、金融领域业务专家等。</p><p>这条线是业务经验越丰富越值钱，需要靠一个个实际项目历练出来，无捷径可走。</p><h3 id="互联网行业-3"><a href="#互联网行业-3" class="headerlink" title="互联网行业"></a>互联网行业</h3><p>上规模的互联网公司，大部分都有成体系的晋升路线图</p><p>下面从网络上找到几张图，比较清晰<br><img src="/2020/05/08/一文弄清传统软件开发与互联网软件开发的异同/职级汇总.jpeg"></p><p>以阿里为例，分为技术线和管理线<br><img src="/2020/05/08/一文弄清传统软件开发与互联网软件开发的异同/阿里职级.jpeg"></p><p>技术线职级对应的要求如下所示<br><img src="/2020/05/08/一文弄清传统软件开发与互联网软件开发的异同/阿里职级要求.jpeg"></p><h2 id="能力要求"><a href="#能力要求" class="headerlink" title="能力要求"></a>能力要求</h2><ul><li><p><strong>传统软件开发</strong></p><blockquote><p>在传统软件开发中，<strong>更多的是要求技术的广度，以及综合能力，希望技术人员是多面手</strong>，要求以最快的速度，最低的成本搞定需求。开发时，更多的也是按功能模块拆分，希望开发人员能够从前到后一条龙搞定。<strong>对时间、代码质量不敏感，对项目的资源投入与收益敏感。</strong></p></blockquote></li><li><p><strong>互联网软件开发</strong></p><blockquote><p>在互联网公司中，岗位拆分的很细，会<strong>更多的要求单一方向的技术深度</strong>，专门的岗位干专业的事。之所以会把岗位拆这么细，是因为这样方便模块拆分，<strong>实现更多的并行开发，尽力做到增加人员，就能加快项目开发进度，实现快速抢占市场的目的。</strong></p></blockquote></li></ul><h2 id="行业关注点"><a href="#行业关注点" class="headerlink" title="行业关注点"></a>行业关注点</h2><ul><li><p><strong>传统行业</strong></p><blockquote><p>更多的关心一个项目的投入与产出比，所以会在产品上多下功夫，尽量的把通用功能产品化，以更多的复用来减少开发成本。同时，更注重业务解决方案的抽取，提升核心竞争力。</p></blockquote></li><li><p><strong>互联网行业</strong></p><blockquote><p>更多的关心需求的上线速度，更快的速度占领市场就会有更多的优势；所以会更多的关注模块化，实现通过不断的增加开发人员，就能明显提升开发速度，所以岗位、系统才会拆得比较细粒度。为了解决复用问题，衍生出中台概念。</p></blockquote></li></ul><h2 id="关于加班"><a href="#关于加班" class="headerlink" title="关于加班"></a>关于加班</h2><h3 id="传统软件行业"><a href="#传统软件行业" class="headerlink" title="传统软件行业"></a>传统软件行业</h3><p>大部分情况是早九晚六，中午可午休，基本不加班。</p><p>由于传统软件每个项目的开发周期较长,大部分都是按月计，所以紧急情况下，有足够的消化空间，很少有加班特别狠的情况。</p><p>特殊情况，从业8年，甲方为日企，唯一一次连续996一个月。</p><p><strong>其他：</strong> 有出差需求，因为有时需要到客户所在地驻场开发。</p><h3 id="互联网软件行业"><a href="#互联网软件行业" class="headerlink" title="互联网软件行业"></a>互联网软件行业</h3><p>公认的加班狠，什么996（早9点，晚9点，一周6天）、大小周（隔周双休）的开创者全部来源于这个行业；</p><p>也有极少数公司能做到早10晚7，不过碰到上线，基本都得加班（有时上线还挺频繁的，一周至少有一半时间有需求上线）</p><p><strong>其他：</strong> 基本无出差需求</p><blockquote><p>总的来说，传统软件行业加班时间是少数，有更多的非工作时间；互联网软件开发行业，加班是常态，不加班或少加班的公司简直是一股清流存在。</p></blockquote><h2 id="关于薪资福利"><a href="#关于薪资福利" class="headerlink" title="关于薪资福利"></a>关于薪资福利</h2><h3 id="传统软件行业-1"><a href="#传统软件行业-1" class="headerlink" title="传统软件行业"></a>传统软件行业</h3><p>从实际待过的两家A股上市公司，以及所了解的其他头部传统行业软件公司来看，涨薪基本上靠你的直属主管觉得你应该加薪才会获得薪资的提升</p><p>虽然从系统里能够查出来你的职位是助理开发还是资深架构师，但是公司没有一个相对明确的每个职位层级的薪资范围，也没有正式的述职与职位晋升一说，我的感受就是你的薪资越高，代表着你的职级越高。整体来看，同职级岗位薪资低于互联网行业一个层级，月薪30k是一个比较难达到的坎。</p><p>股票、期权激励较难见到。</p><h3 id="互联网软件行业-1"><a href="#互联网软件行业-1" class="headerlink" title="互联网软件行业"></a>互联网软件行业</h3><p>互联网公司的涨薪基本上靠如下几个方面</p><ul><li>年度普调（发展好的公司）</li><li>每年绩效不错，核心骨干（针对性涨薪）</li><li>职位晋升</li></ul><p>薪资基本与职级挂钩，每个职级对应一个薪资范围，达到薪资范围的上限，就只有靠职位晋升来提升了。薪资范围可参见<strong>成长路线</strong>部分的贴图。</p><p>股票、期权激励较常见。</p><h2 id="关于稳定性"><a href="#关于稳定性" class="headerlink" title="关于稳定性"></a>关于稳定性</h2><h3 id="传统软件行业-2"><a href="#传统软件行业-2" class="headerlink" title="传统软件行业"></a>传统软件行业</h3><p>传统行业相对稳定，原因有如下几点</p><ul><li>以项目为单位，每个项目都是独立的业务逻辑，要想摸清摸透一个方向的业务逻辑，需要花费大量的时间；即使一个业务方向熟悉了，还有下一个业务方向等着你。有效避免过早进入舒适区，导致人员的不稳定因素增加。即使不想做项目往业务方向扎根，希望多做技术，还可以转产品研发，摸透整个产品架构与细节至少又是两年过去了。</li><li>行业内的公司就那么些家，可选择面不大</li><li>行业内跳槽薪资涨幅有限</li></ul><blockquote><p> 传统软件领域，很多软件系统属于用户的核心业务系统，比如ERP、财务系统等，属于刚需。所以，这一块只要有稳定的客户来源，即使是运维需求也会有一口饭吃。因为稳定性，收入也很难像互联网行业公司那样快速增长。</p></blockquote><h3 id="互联网软件行业-2"><a href="#互联网软件行业-2" class="headerlink" title="互联网软件行业"></a>互联网软件行业</h3><p>业务不赚钱，即使你再努力、个人能力再强也只能走人</p><p>见过上一天还在努力上班，第二天就被n+1裁掉的场景</p><p>在互联网行业能够真切的感受到个人的渺小，选择大于努力。</p><p>还有那句，只要在风口上，即使是猪也能飞起来的生动诠释。</p><p>在互联网软件开发领域里，两三年一跳槽是常态，人员流动性较大。</p><h2 id="关于年龄"><a href="#关于年龄" class="headerlink" title="关于年龄"></a>关于年龄</h2><h3 id="传统软件行业-3"><a href="#传统软件行业-3" class="headerlink" title="传统软件行业"></a>传统软件行业</h3><p>由于加班没那么狠，很少有拼体力的情况，所以在传统行业软件开发领域年龄没那么敏感。</p><p>曾经的同事，好多都是在这个行业干了20+year的老码农，照样干得风生水起。</p><p>因为传统软件开发领域的特殊性，需要更多的与甲方客户沟通交流，外加对行业业务需求的深刻理解。年龄大，代表着更丰富的与客户打交道经验，以及更丰富的业务行业经验，更具竞争力。</p><p>之前还碰到有客户指明项目实施团队必须要有10+year的带队，或者不能低于多少比例，直接写进合同那种。</p><h3 id="互联网软件行业-3"><a href="#互联网软件行业-3" class="headerlink" title="互联网软件行业"></a>互联网软件行业</h3><p>对于这个行业，崇尚一个字“<strong>快</strong>”</p><p><strong>要求业务发展快、个人成长快</strong></p><p>经常可以在网络或工作中听到说XXX多年轻就晋升xxx职级了</p><p>网络上甚至还流传xxx大厂到了35岁还没晋升到xxx职级，就极有可能被优化掉的说法</p><p>这样的氛围，对于那些想把更多时间放到生活上的人极不友好</p><p>难道就不能保持低职级，拿该拿的薪资，保持work balance？</p><p>no，no，no；随着年龄的增大，这种安于工作现状的人会显得跟整个团队格格不入，极易绩效背锅</p><p>xxx公司对于这类员工，还发明了一个叫做“老白兔”的标签</p><p>由此可见，互联网行业对于年龄的友好程度！</p><blockquote><p>所以，建议想再奋斗一下，再挑战一下自己的到互联网行业去，那里有更大的机遇与空间。<br>建议对技术追求没那么高，希望工作生活相对平衡，可以考虑一下传统软件行业，那里只要你做事靠谱，年龄不是问题。</p></blockquote><h2 id="关于转行"><a href="#关于转行" class="headerlink" title="关于转行"></a>关于转行</h2><p>首先要注意的是，得看在什么团队，什么岗位，做什么事情。</p><h3 id="传统软件转互联网"><a href="#传统软件转互联网" class="headerlink" title="传统软件转互联网"></a>传统软件转互联网</h3><p>可能在传统行业公司，做的事情偏互联网公司的玩法。例如：做针对于互联网用户的系统。</p><p>互联网公司做事、沟通相对open，竞争激烈，优胜劣汰；业务发展不好，能力再强努力再多也得面对裁员；所以<strong>跳槽到互联网公司一定要选对行业、选对部门；去冷门行业、边缘部门要多考虑</strong></p><p><strong>优势：</strong> 技术宽度、软实力、综合能力</p><h3 id="互联网转传统软件"><a href="#互联网转传统软件" class="headerlink" title="互联网转传统软件"></a>互联网转传统软件</h3><p>也可能在互联网公司，实际上做的事情跟在传统行业的软件公司差不多。例如：做公司内部的各种系统。</p><p>传统软件公司相对比较稳定，企业业务系统是刚需，旱涝保收；正因如此，公司业务也很难有指数级的增长，薪资也同理；可考虑走业务专家路线。</p><p><strong>优势：</strong> 技术深度、良好的自驱力、技术创新能力</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>如果用一句话来总结传统软件开发与互联网软件开发，我觉得可以用一个更“<strong>稳</strong>”，一个更“<strong>快</strong>”来概括。</p><p>行业的业务形态决定了诉求点不同，由此带来工作方式、能力要求等方方面面的不同。</p><p>如果要问到底从事传统软件开发好还是互联网软件开发好？</p><p>我要说的是：“<strong>这个问题对于不同的人有不同的答案，没有好与不好，只有适合与不适合</strong>”。</p><p><strong>如有其它相关问题，在公众号回复问题或加微信咨询，尽量知无不言言无不尽。</strong></p><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/05/08/一文弄清传统软件开发与互联网软件开发的异同/传统与互联网区别1.png&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt; 在传统软件开发领域8年，从一线开发，到项目技术经理，再到产品研发技术负责人，一路走来，感受着互联网行业的软件越来越贴近日常生活
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>通过Nginx解决网络隔离实践记录</title>
    <link href="http://muchstudy.com/2020/05/02/%E9%80%9A%E8%BF%87Nginx%E8%A7%A3%E5%86%B3%E7%BD%91%E7%BB%9C%E9%9A%94%E7%A6%BB%E5%AE%9E%E8%B7%B5%E8%AE%B0%E5%BD%95/"/>
    <id>http://muchstudy.com/2020/05/02/通过Nginx解决网络隔离实践记录/</id>
    <published>2020-05-01T16:39:05.000Z</published>
    <updated>2020-05-01T16:45:11.664Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/05/02/通过Nginx解决网络隔离实践记录/通过Nginx解决网络隔离实践记录.png"><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>最近需要迁移Node线上服务，于是新申请了两台线上服务器；</p><p>部署服务器后，需要验证服务是否正常，办公环境与线上环境网络是隔离的，无法直接访问；但是，线上服务器可通过部署服务器访问，而办公网络是可以访问部署机的；</p><p>所以，可通过在部署机上配置代理的方式，办公环境请求部署机，然后把请求代理到线上服务的方式验证服务是否正常。</p><p>整个网络结构如下图所示：</p><img src="/2020/05/02/通过Nginx解决网络隔离实践记录/通过Nginx解决网络隔离实践记录1.png"><h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><blockquote><p>下载页面: <a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a> 选择版本鼠标右键拷贝链接地址</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载</span></span><br><span class="line">[work@40-10-14 opt]$ wget http://nginx.org/download/nginx-1.18.0.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压文件</span></span><br><span class="line">[work@40-10-14 opt]$ tar -xvf nginx-1.18.0.tar.gz</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 默认安装：root权限进入解压后的目录，执行如下命令安装</span></span><br><span class="line">[root@40-10-14 nginx-1.18.0]# ./configure &amp;&amp; make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.指定目录：安装到指定的/opt/nginx目录</span></span><br><span class="line">[work@40-10-14 opt]$ mkdir /opt/nginx</span><br><span class="line">[work@40-10-14 nginx-1.18.0]$ ./configure --prefix=/opt/nginx &amp;&amp; make &amp;&amp; mae install</span><br></pre></td></tr></table></figure><p>默认安装，非root权限会报如下错误<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir: cannot create directory `/usr/local/nginx': Permission denied</span><br><span class="line">make[1]: *** [install] Error 1</span><br><span class="line">make[1]: Leaving directory `/opt/nginx-1.18.0'</span><br><span class="line">make: *** [install] Error 2</span><br></pre></td></tr></table></figure></p><p>默认安装后，查看nginx的安装目录，可以看到安装在<code>/usr/local/nginx</code>目录下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@40-10-14 opt]# whereis nginx</span><br><span class="line">nginx: /usr/local/nginx</span><br></pre></td></tr></table></figure></p><blockquote><p>1.建议使用指定目录方式安装。如果切换为root权限去安装，后续修改config文件也需要root权限<br>2.或者root安装后，修改权限为普通用户可操作也行</p></blockquote><h3 id="添加软链"><a href="#添加软链" class="headerlink" title="添加软链"></a>添加软链</h3><p>添加软链，使得nginx命令全局能访问，每次运行就不用切换到安装目录中了<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 添加软链</span></span><br><span class="line">[root@40-10-14 sbin]# ln -s /opt/nginx/sbin/nginx /usr/local/bin/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line">[root@40-10-14 sbin]# nginx -v</span><br><span class="line">nginx version: nginx/1.18.0</span><br></pre></td></tr></table></figure></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul><li>启动：<code>nginx</code></li><li>停止：<code>nginx -s stop</code></li><li>重启：<code>nginx -s reload</code></li><li>帮助命令: <code>nginx -h</code></li></ul><p><strong>强制停止：</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看linux进程id</span></span><br><span class="line">[root@40-10-14 ~]# ps -ef | grep nginx</span><br><span class="line">nobody   45198     1  0 16:12 ?        00:00:00 nginx: worker process</span><br><span class="line">root     51261 50692  0 17:00 pts/0    00:00:00 grep nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭进程</span></span><br><span class="line">[root@40-10-14 ~]# kill 45198</span><br><span class="line"><span class="meta">#</span><span class="bash"> 之前的进程已被关闭</span></span><br><span class="line">[root@40-10-14 ~]# ps -ef | grep nginx</span><br><span class="line">root     51277 50692  0 17:00 pts/0    00:00:00 grep nginx</span><br></pre></td></tr></table></figure></p><h2 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h2><p>配置两台机器的请求转发,编辑nginx安装目录下的<code>nginx/conf/nginx.conf</code>文件即可<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">error_log  logs/error.log;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">    #                  '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">    #                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    # 请求需要转发到如下两台机器上，流量平分;指定IP和端口</span><br><span class="line">    upstream  zpserver   &#123;</span><br><span class="line">              server   xx.xx.xx.22:10001;</span><br><span class="line">              server   xx.xx.xx.23:10001;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        # nginx服务端口为80</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        # /user根路径的请求才转发</span><br><span class="line">        location /user &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">            proxy_pass        http://zpserver;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache's document root</span><br><span class="line">        # concurs with nginx's one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意：修改完nginx的配置文件后，需要运行<code>nginx -s reload</code>才能生效</p></blockquote><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>由于线上服务很多都是需要登录的，所以访问时需要使用域名访问，而不能使用IP访问，因为cookie都是跟域名绑定的</p><p>解决这个问题很简单，配置本机host即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> IP为Nginx服务器IP</span></span><br><span class="line">xx.xx.xx.14 edu.daojia.com</span><br></pre></td></tr></table></figure><p>通过上述配置，在本机浏览器上请求<code>edu.daojia.com</code>即可间接通过部署机上的Nginx访问到线上服务，以此在内网测试服务是否正确；待服务无异常后，把线上流量切过来即可。</p><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/05/02/通过Nginx解决网络隔离实践记录/通过Nginx解决网络隔离实践记录.png&quot;&gt;
&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;最近需要迁移
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>实际案例聊聊系统建模与面向对象设计</title>
    <link href="http://muchstudy.com/2020/04/19/%E5%AE%9E%E9%99%85%E6%A1%88%E4%BE%8B%E8%81%8A%E8%81%8A%E7%B3%BB%E7%BB%9F%E5%BB%BA%E6%A8%A1%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    <id>http://muchstudy.com/2020/04/19/实际案例聊聊系统建模与面向对象设计/</id>
    <published>2020-04-19T15:16:08.000Z</published>
    <updated>2020-04-19T16:10:28.775Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/04/19/实际案例聊聊系统建模与面向对象设计/以实际案例聊聊系统建模与面向对象设计.jpg"><blockquote><p>什么样的设计才是最好的设计？<br>别问，问就是自己去体会……</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>PM同学组织了一场关于下单流程业务系统拆分的需求评审，整体功能为可线上售卖视频课，用户买完课之后可在线学习、不同的课程还包含线下实地培训等、学习完之后在线考试，颁发合格证书。</p><p>实际上，该需求可分为两个部分来看</p><ul><li>售卖：通过各种渠道把各种各样的商品卖出去</li><li>履约：完成不同商品与之对应的履约流程</li></ul><h2 id="已有的实现"><a href="#已有的实现" class="headerlink" title="已有的实现"></a>已有的实现</h2><img src="/2020/04/19/实际案例聊聊系统建模与面向对象设计/下单原始流程.png"><p>从上图可以清晰的看到，左侧为售卖的各种商品，右侧为商品与之对应的履约流程。</p><p>同时，每个商品对应一条独立的履约流程，商品之间可能存在相同的履约环节。</p><h2 id="有什么问题？"><a href="#有什么问题？" class="headerlink" title="有什么问题？"></a>有什么问题？</h2><p>有什么问题得看从什么角度看</p><p>如果从业务的角度看当然没啥问题，因为它能满足业务需求。</p><p>但是，从系统设计角度看，存在如下几个问题</p><ul><li>要上架售卖新品类的商品，需要定制实现对应的履约流程</li><li>已有商品履约流程调整，系统也需要做对应调整</li><li>履约流程中的<strong>履约环节</strong>缺少复用性</li></ul><h2 id="业务抽象建模"><a href="#业务抽象建模" class="headerlink" title="业务抽象建模"></a>业务抽象建模</h2><img src="/2020/04/19/实际案例聊聊系统建模与面向对象设计/下单抽象流程.png"><p>从上图中，可以看出如下几个改动点</p><ul><li>抽象了一个履约规则层，不同的商品对应不同的履约规则</li><li>由<strong>履约规则</strong>串联起<strong>商品下单</strong>与<strong>订单履约</strong>，实现下单与履约的解耦</li><li>订单履约模块可随意组合，以此完成履约流程</li></ul><p>相对与之前的设计，核心变更如下所示：<br><img src="/2020/04/19/实际案例聊聊系统建模与面向对象设计/对比.png"></p><h2 id="有哪些好处？"><a href="#有哪些好处？" class="headerlink" title="有哪些好处？"></a>有哪些好处？</h2><p>通过这样的调整，好处很明显，完美的解决掉之前的问题</p><ul><li>上架新品类商品，无需对应开发与之的履约流程，新增履约配置即可</li><li>已有商品履约流程调整，系统无需对应调整，只需修改履约配置即可</li><li>因为实现了解耦，下单与履约相对独立，互不影响，履约部分可提供各种各样的履约单元组合实现履约流程</li></ul><h2 id="聊聊面向对象设计"><a href="#聊聊面向对象设计" class="headerlink" title="聊聊面向对象设计"></a>聊聊面向对象设计</h2><h3 id="面向对象的四大特性"><a href="#面向对象的四大特性" class="headerlink" title="面向对象的四大特性"></a>面向对象的四大特性</h3><ul><li><strong>封装：</strong>独立模块只暴露对外接口，封装内部实现</li><li><strong>抽象：</strong>例如上面抽象出来业务需求表象之下的履约规则层</li><li><strong>继承：</strong>实现通用逻辑抽取，所有子类具有父类已实现的功能</li><li><strong>多态：</strong>代码易扩展的利器，基于接口而不基于实现编程</li></ul><h3 id="面向对象的六大设计原则"><a href="#面向对象的六大设计原则" class="headerlink" title="面向对象的六大设计原则"></a>面向对象的六大设计原则</h3><ul><li><strong>SRP 单一职责原则</strong>：每一个类、模块尽量做到职责单一</li><li><strong>OCP 开闭原则</strong>：对扩展开放，对修改关闭</li><li><strong>LSP 里式替换原则</strong>：即子类能够替换父类对象出现的任何地方，并且保证原来程序的逻辑行为不变或者说正确性不被破坏</li><li><strong>DIP 依赖倒置原则</strong>：高层模块不依赖低层模块，它们共同依赖同一个抽象。抽象不要依赖具体实现细节，具体实现细节依赖抽象</li><li><strong>ISP 接口隔离原则</strong>：意思即一个类不应该被强迫依赖它不需要的接口，即接口设计的时候不应该大而全，可做好分类，多使用接口组合</li><li><strong>LOD 迪米特法则</strong>：核心在于降低类的耦合；不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。迪米特法则是希望减少类之间的耦合，让类越独立越好。每个类都应该少了解系统的其他部分。一旦发生变化，需要了解这一变化的类就会比较少。</li></ul><p>其他还有</p><ul><li><strong>DRY原则</strong>（Don’t Repeat Yourself）</li><li><strong>KISS原则</strong>（Keep It Simple and Stupid）</li><li><strong>YAGNI原则</strong>（You Ain’t Gonna Need It）</li></ul><p>最后一个，我个人喜欢叫做<strong>不要加戏</strong>原则。</p><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>设计模式更多的在于解决具体问题，我的体会是不要去套模式，多去思考怎么样去实现代码才会是最优解，当你这么做了之后，设计模式自然而然就会从你的代码里涌现出来。</p><p>几年前翻了一遍《Head first 设计模式》一书，翻完的第一感受就是原来很多设计模式在实际代码中都用过，原来每个套路还有对应的名字…</p><p>曾经整理了一个设计模式的系列文章，分别用Java与Javascript实现，在这里：</p><p><a href="http://muchstudy.com/2016/12/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/">设计模式系列文章：</a><br><a href="http://muchstudy.com/2016/12/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/">http://muchstudy.com/2016/12/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</a></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>工作得越久，越会不自觉的思考，十年一线老码农相对与工作四五年的正走上轨道且精力旺盛的生力军的核，心竞争力在哪里?</p><p>可能就在于系统建模能力与面向对象设计能力上？</p><p>在于哪些东西技术上能行，而实际上坑很深，敢于有所为有所不为上？</p><p>不在于实现一个功能的快慢，而在于后续的持续迭代与维护成本上？</p><p>软件开发说简单也简单，说复杂也复杂，复杂到无法量化精确评估它的好坏！</p><p>什么样的设计才是最好的设计？</p><p>别问，问就是自己去体会……</p><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/04/19/实际案例聊聊系统建模与面向对象设计/以实际案例聊聊系统建模与面向对象设计.jpg&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;什么样的设计才是最好的设计？&lt;br&gt;别问，问就是自己去体会……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;背
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>剩者为王？</title>
    <link href="http://muchstudy.com/2020/04/16/%E5%89%A9%E8%80%85%E4%B8%BA%E7%8E%8B%EF%BC%9F/"/>
    <id>http://muchstudy.com/2020/04/16/剩者为王？/</id>
    <published>2020-04-16T10:06:47.000Z</published>
    <updated>2020-04-19T16:10:17.303Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/04/16/剩者为王？/裁员.png"><p>在疫情寒冬下，公司开启新的一拨裁员，蓦然发现，在某一个钉钉群里由群众变为了群主！~~</p><p>看着同事的离开，要说心理上没有波动，那是不可能的。</p><p>但是，那又能怎么样呢，这就是社会。作为一个上了年纪的人，不论内心多波动也必须表现得无比的镇静，不然就会被认为幼稚愚蠢，这也是社会的一部分……</p><p>不缩减成本，可能整个公司都会死掉，到时就是所有人被裁，没有资金，拿不出N+1，就别提好聚好散了。站在公司的角度，表示理解。</p><p>但是，站在个人的角度呢？</p><p>始终感觉被裁员是一件特别被动的事情，作为还没轮到的，也会想着，万一哪天裁到自己了，该怎么办？</p><p>答案只有一个：早做准备！</p><p>我的理解，裁员一般分为两种，一种为末尾淘汰；一种为不管你表现得有多好，业务线亏损严重看不到希望，导致整个业务线被砍掉。</p><p>对于末位淘汰的情况，我觉得首先需要从自身上面找原因，多去想想为什么淘汰的是自己而不是别人？是产出低？贡献少？技术弱？不顶事？挖坑多？甚至是跟领导关系不好？跟其他人沟通不顺畅？如果不想清楚这个问题，然后做针对性的改善，相信换一个工作环境还是会遇到相同的问题。</p><p>对于整个业务线砍掉这种，相信在这之前的很长一段时间就早有迹象，这种情况就需要提早准备，多做打算，考虑到最坏的情况，不要被裁得措手不及！从个人方面，时刻保持自己的竞争力，不要被温水煮青蛙，避免长期处于舒适区。</p><p>最后，真心的希望离开的同学都能开启更好的下一段征程。</p><p>剩者为王？凛冽的寒冬，幸存者也需要拼尽全力！</p><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/04/16/剩者为王？/裁员.png&quot;&gt;
&lt;p&gt;在疫情寒冬下，公司开启新的一拨裁员，蓦然发现，在某一个钉钉群里由群众变为了群主！~~&lt;/p&gt;
&lt;p&gt;看着同事的离开，要说心理上没有波动，那是不可能的。&lt;/p&gt;
&lt;p&gt;但是，那又能怎么样呢，这就是社会。
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>聊聊一线开发的基本素养</title>
    <link href="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/"/>
    <id>http://muchstudy.com/2020/04/04/聊聊一线开发的基本素养/</id>
    <published>2020-04-03T17:01:01.000Z</published>
    <updated>2020-04-19T16:10:06.694Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/04/04/聊聊一线开发的基本素养/追求.jpg"><p>早上闹铃一响，摸到手机，关掉闹铃，打开微信，刷下朋友圈，刷到昨晚半夜的这样一条消息</p><div style="width:100%;margin:auto"><br><img src="/2020/04/04/聊聊一线开发的基本素养/朋友圈.jpg"><br></div><p>寥寥数语，形象跃然纸上！</p><p>顿时人也精神了，想要立刻爬起来。</p><p>原因无他，也被深深伤害过，感同身受！</p><p>程序开发说简单也简单，按照程序语法写就行，说复杂也复杂，同一段业务逻辑，实现效果一致，但是实现方式可能千差万别，有些代码短小精干，有的你会很惊奇居然一团糟的情况下程序还能正常的跑起来!</p><p>仔细分析你会发现，每个人都有自己的代码风格，有的人并不是能力不行，但是他的代码就是一个字：“糙”！</p><p>细问原因，往往都会往逻辑复杂、工期紧上面靠。</p><p>更深层次分析，实际上这是一个习惯问题，基本底线问题。</p><p>我觉得一个优质的一线开发应该具备如下这些基本素养：</p><ul><li><p>理清需求所有业务逻辑</p><blockquote><p>面对需求不仅要摸清明面上的业务逻辑，还需要考虑异常兼容情况，最怕有if没有else，有异常捕获而没有捕获到异常的后续处理。只有做到了整个逻辑的完备，才能说理解了需求。</p></blockquote></li><li><p>代码整体结构清晰，可维护</p><blockquote><p>合理抽象封装，明明是面向对象的高级语言，有些人偏偏喜欢面向过程记流水账。同时，请保持克制，别炫技，为了抽象而抽象。有一个KISS原则，叫做keep sample and stupid.</p></blockquote></li><li><p>每行代码、每个变量都是有意义的</p><blockquote><p>杜绝没有意义的代码，特别需要注意重复性的模板代码，每次碰到要在一坨坨的模板代码上迭代新功能都恨不得推翻重写，因为屎山会越堆越大！~</p></blockquote></li><li><p>注释清晰、代码工整</p><blockquote><p>点开文件第一眼就乱糟糟的绝对很打击继续看下去的勇气，能做到如沐春风，任何人都能很流畅的读下去就达标了。对于某些逻辑很绕的，必须写出ugly代码的地方，我的做法是注明原因，常规吐槽一下，打个todo标签</p></blockquote></li><li><p>一点强迫症、一点细节控、一点对美的追求</p><blockquote><p>这一点不多说，懂的人自然懂，不懂的人说再多也没用，因为大家的追求不一样！</p></blockquote></li></ul><div style="width:70%;margin:auto"><br><img src="/2020/04/04/聊聊一线开发的基本素养/公众号二维码.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/04/04/聊聊一线开发的基本素养/追求.jpg&quot;&gt;
&lt;p&gt;早上闹铃一响，摸到手机，关掉闹铃，打开微信，刷下朋友圈，刷到昨晚半夜的这样一条消息&lt;/p&gt;
&lt;div style=&quot;width:100%;margin:auto&quot;&gt;&lt;br&gt;&lt;img src
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一场关于系统架构的讨论</title>
    <link href="http://muchstudy.com/2020/03/14/%E4%B8%80%E5%9C%BA%E5%85%B3%E4%BA%8E%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E7%9A%84%E8%AE%A8%E8%AE%BA/"/>
    <id>http://muchstudy.com/2020/03/14/一场关于系统架构的讨论/</id>
    <published>2020-03-14T05:09:18.000Z</published>
    <updated>2020-04-19T16:09:57.130Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/03/14/一场关于系统架构的讨论/title.jpg"><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司新业务有视频点播与直播需求，经过一番对比分析，最终选择了腾讯云作为视频服务的供应商。  </p><p>对于如何接入有如下争论点：<br>1.由中台统一对接视频服务，封装统一对外接口，如后续要切换视频服务供应商，上层无需更改</p><blockquote><p><strong><em>一致点：</em></strong> 统一封装对外服务<br><strong><em>争议点：</em></strong> 要不要做到可无缝切换视频播放供应商而不影响上层业务</p></blockquote><p>2.APP与WEB侧基于腾讯视频上传&amp;播放SDk封装通用组件</p><blockquote><p><strong><em>一致点：</em></strong> 统一封装SDK<br><strong><em>争议点：</em></strong> 封装粒度是强封装还是弱封装。即隐藏内部实现，只暴露自定义参数；还是组件参数透传腾讯SDk相关参数，只简单封装通用业务逻辑</p></blockquote><p>对于上述争议点，会议最终也没讨论出结论来。个人觉得，这两个争论点实际上是一个业务架构问题与技术架构问题，只有把这两个问题理清楚，才能做出清晰的判断。</p><h2 id="业务架构"><a href="#业务架构" class="headerlink" title="业务架构"></a>业务架构</h2><blockquote><p>业务架构：实际上就是理清各方如何分工，如何交互，如何设计的问题。</p></blockquote><p>对于该场景的有两种架构方式，一种为中控式、一种为并行式。</p><h3 id="中控式"><a href="#中控式" class="headerlink" title="中控式"></a>中控式</h3><p>中控式可理解为由一个中枢统一控制，大致结构图如下所示：</p><div style="width:70%;margin:auto"><br><img src="/2020/03/14/一场关于系统架构的讨论/中控式.jpg"><br></div><p><strong><em>核心思路：</em></strong> 由中台统一对接视频服务，抹平各服务商的差异，做到底层视频服务切换对上层无感知</p><p><strong><em>好处：</em></strong></p><ol><li>视频服务切换，对业务方无影响，无额外开发工作量</li></ol><p><strong><em>难点&amp;弊端：</em></strong></p><ol><li>视频服务灰度切换问题</li><li>中台需抽象化视频服务为共有服务，制定自有功能与交互逻辑；功能取交集，无法使用特有视频服务独有亮点功能</li><li>中台逻辑复杂化，兼容维护成本高，不易迭代</li></ol><h3 id="并行式"><a href="#并行式" class="headerlink" title="并行式"></a>并行式</h3><p>并行式从字面意思可理解为并行设计，两条路线不冲突，大致结构图如下所示：</p><div style="width:70%;margin:auto"><br><img src="/2020/03/14/一场关于系统架构的讨论/并行式.jpg"><br></div><p><strong><em>核心思路：</em></strong> 对接不同的视频服务上采用并行方案，互不影响</p><p><strong><em>好处：</em></strong></p><ol><li>灰度切换方便，影响范围可控制在较小的业务范围</li><li>无需兼容处理，代码逻辑清晰，精简；全部切换后相关代码可整体废弃</li><li>可充分利用视频服务商的全部功能</li></ol><p><strong><em>难点&amp;弊端：</em></strong></p><ol><li>切换视频供应商时需重新设计与开发，带来巨额工作量</li></ol><h2 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h2><blockquote><p>技术架构：技术实现细节如何做到高内聚、低耦合、易扩展、良好的版本迭代与向下兼容等，设计思路依赖业务架构。</p></blockquote><p>对于争论点二，有如下两种技术架构思路，一种为集中兼容处理，一种为特定处理。</p><h3 id="集中处理-强封装"><a href="#集中处理-强封装" class="headerlink" title="集中处理-强封装"></a>集中处理-强封装</h3><p>对于各个视频服务SDK集中处理，统一对外参数，大致结构图如下所示：</p><div style="width:70%;margin:auto"><br><img src="/2020/03/14/一场关于系统架构的讨论/集中处理.jpg"><br></div><p><strong><em>核心思路：</em></strong> 隐藏内部实现逻辑，提供统一的对外出口</p><p><strong><em>好处：</em></strong></p><ol><li>强有力的控制，可做到内部变更对外部无感知</li></ol><p><strong><em>难点&amp;弊端：</em></strong></p><ol><li>事前需要超前规划，强有力的抽象，需保持克制只提供最小功能集，避免兼容问题</li><li>前期即需考虑封装不同视频服务保证后续能无缝切换问题，实现复杂，工作量大</li></ol><h3 id="特定处理-弱封装"><a href="#特定处理-弱封装" class="headerlink" title="特定处理-弱封装"></a>特定处理-弱封装</h3><p>对各个视频服务SDK特定处理，不同视频服务对应封装不同的前端组件，大致结构图如下所示：</p><div style="width:70%;margin:auto"><br><img src="/2020/03/14/一场关于系统架构的讨论/特定处理.jpg"><br></div><p><strong><em>核心思路：</em></strong> 最小开闭原则，不对视频SDK的做二次封装是，透传参数即可；额外扩展自定义通用业务封装。</p><p><strong><em>好处：</em></strong></p><ol><li>可获得特定视频服务商全量的功能服务</li><li>组件文档无需单独编写，开发人员参考官方文档即可，鼓励DIY，遇到问题自己排查，而不是推给组件提供者</li><li>无需考虑兼容其他视频服务，代码简洁、清晰，可维护强</li></ol><p><strong><em>弊端：</em></strong></p><ol><li>切换视频服务需重新设计对应的组件，顶层业务侧也需根据新组件的参数规范做调整</li></ol><h2 id="个人想法"><a href="#个人想法" class="headerlink" title="个人想法"></a>个人想法</h2><p>1.克制、恰到好处</p><blockquote><p>这条实际上是一个平衡与取舍问题，不能一点不往将来考虑，但也不能一下考虑得太遥远，考虑太远的问题在于前期投入巨大工作量后期可能一点用不上。</p></blockquote><p>2.干净、利落、清晰</p><blockquote><p>个人在做业务架构时，会更多的考虑什么样的架构能够让技术架构更简洁、清晰，便于维护。尽量避免架构设计划定的框，造成技术实现细节繁琐复杂。</p></blockquote><p>3.低成本，高收益</p><blockquote><p>对于这个问题，干一件事总成本是相对固定的，对于上面的问题，我更倾向于前期采用低成本，后续真正要切的时候再投入另外的成本。</p></blockquote><p>4.清晰而坚定的开头、清晰而坚定的收尾</p><blockquote><p>选择了一种架构就应该从上到下保持一致，在一条道上做到最好，避免三心二意，这也要一点，那也要一点，最后几不像。</p></blockquote><p>最后，不同的选择对应不同的代价；系统架构的难点很多时候不在于如何架构，而在于如何平衡与取舍；萝卜白菜，各有所爱。</p><p>作者公众号：<br><img src="http://muchstudy.com/2019/11/10/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9AJS%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/YIYING.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/03/14/一场关于系统架构的讨论/title.jpg&quot;&gt;
&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;公司新业务有视频点播与直播需求，经过一番对比分析
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>人生中唯一的2019</title>
    <link href="http://muchstudy.com/2020/01/17/%E4%BA%BA%E7%94%9F%E4%B8%AD%E5%94%AF%E4%B8%80%E7%9A%842019/"/>
    <id>http://muchstudy.com/2020/01/17/人生中唯一的2019/</id>
    <published>2020-01-17T09:53:31.000Z</published>
    <updated>2020-01-21T09:13:12.535Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h3><h4 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h4><ul><li>获得了2019年度优秀员工，公司组织去了一趟巴厘岛，感谢被认可</li><li>这一年以来，把负责的保洁业务线业务梳理清晰，人员结构相对合理</li><li>今年最后一个季度调整到职业培训业务线，面临新的挑战（新团队搭建+爆发式的业务需求）</li><li>从0到1搭建前端监控平台：实现HTTP异常监控、页面性能监控，从收集、存储、分析、可视化全流程自建</li><li>绩效从Q1-Q3保持全A，Q4B+，从入职连续保持6个季度全A记录，如果加上2018年的年度绩效A，则为连续7A，证明从干了接近8年的传统行业转到互联网公司，从传统行业的业务系统架构师转到互联网公司的前端开发还算成功</li><li>职级晋升成功，由T5晋升到T6，离之前在传统行业里的高级系统架构师职级还差一级，希望来年能更上一层楼</li></ul><h4 id="个人"><a href="#个人" class="headerlink" title="个人"></a>个人</h4><ul><li>读书：《大型网站技术架构》《月亮与六便士》《如何阅读一本书》《棋王》</li><li>今年读书变少了，大部分时间投入到了极客时间的专栏上：《数据结构与算法之美》《Elasticsearch核心技术与实战》《重学前端》《从0打造音视频直播系统》，买了还没看的有：《从0开始学为服务》《设计模式之美》《Java核心技术面试精讲》，希望新的一年能够撸一遍</li><li>今年带着家人去了这么几个地方：天津、苏州、曼谷&amp;普吉岛；公司团建去了一趟山西（悬空寺-恒山-应县木塔-云冈石窟）</li><li>在接近年底的时候开通了个人公众号，与维护了3年的博客保持同步</li></ul><h3 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h3><h4 id="工作-1"><a href="#工作-1" class="headerlink" title="工作"></a>工作</h4><ul><li>完成职业培训业务线团队的搭建，打造有战斗力、有影响力的团队</li><li>支撑职培业务走上正轨</li><li>前端监控体系完善</li><li>希望能做到一半时间团队管理、一半时间coding，理想状态为团队强大稳定，有大把的时间可投入到想做的技术坑里不起来。。。</li></ul><h4 id="个人-1"><a href="#个人-1" class="headerlink" title="个人"></a>个人</h4><ul><li>英语学习得捡起来了,定个小目标，每天新记3个单词，一年1000</li><li>每个季度至少阅读一本书</li><li>刷完极客时间里已购买的专栏</li><li>今年博客写得也相对较少了，今年得加油，多沉淀总结,尽量保持每月一篇</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2019&quot;&gt;&lt;a href=&quot;#2019&quot; class=&quot;headerlink&quot; title=&quot;2019&quot;&gt;&lt;/a&gt;2019&lt;/h3&gt;&lt;h4 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>年终总结攻略，再也不愁如何下笔了！</title>
    <link href="http://muchstudy.com/2020/01/03/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%E6%94%BB%E7%95%A5%EF%BC%8C%E5%86%8D%E4%B9%9F%E4%B8%8D%E6%84%81%E5%A6%82%E4%BD%95%E4%B8%8B%E7%AC%94%E4%BA%86%EF%BC%81/"/>
    <id>http://muchstudy.com/2020/01/03/年终总结攻略，再也不愁如何下笔了！/</id>
    <published>2020-01-02T16:01:01.000Z</published>
    <updated>2020-01-02T16:04:06.601Z</updated>
    
    <content type="html"><![CDATA[<div style="width:70%;margin:auto"><br><img src="/2020/01/03/年终总结攻略，再也不愁如何下笔了！/总结.jpeg"><br></div><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><blockquote><p>如果不明白一件事的目的与价值，那么就不会有做下去的动力。</p></blockquote><ul><li>生活部分：时光记录机</li><li>工作部分：让你的leader知道你有哪些不满意，新的一年有哪些想法和预期，好做针对性改善与调整</li><li>不会总结与规划，就不知道有哪些不足，就不会有改变与前进的方向</li><li>辞旧迎新打卡！~</li></ul><h2 id="写些什么？"><a href="#写些什么？" class="headerlink" title="写些什么？"></a>写些什么？</h2><blockquote><p>工作之后，大部分人的人生不足100年，你是否每一年都过得有价值？能够对自己负责？</p></blockquote><h3 id="关于上一年"><a href="#关于上一年" class="headerlink" title="关于上一年"></a>关于上一年</h3><h4 id="生活方面"><a href="#生活方面" class="headerlink" title="生活方面"></a>生活方面</h4><blockquote><p>要点：</p><ol><li>只要还能记起来的东西都可以往这里塞，能记起来，证明对自己的影响深刻。</li><li>要避免大杂烩。</li></ol></blockquote><ul><li>今年生活中值得记录下来的重要事件、瞬间？（比如相了几次亲？😁）</li><li>有哪些不如意？如何避免 or 接受？</li><li>今年有哪些收获？</li><li>思想上有哪些转变？</li></ul><h4 id="工作方面"><a href="#工作方面" class="headerlink" title="工作方面"></a>工作方面</h4><ul><li>今年做了哪些有价值的工作事项？</li><li>过去一年做得不满意的地方</li><li>有哪些收获？（技术能力、沟通能力、协调能力、需求把控、项目管理能力，有哪些量变到质变的蜕变？）</li><li>有没有哪些对接不畅、工作不畅；工作方式、方法是否需要改进？</li></ul><h3 id="关于下一年"><a href="#关于下一年" class="headerlink" title="关于下一年"></a>关于下一年</h3><blockquote><p>要点：</p><ol><li>Flag时间，Your show time！</li><li>可落地 or 里程碑计划</li></ol></blockquote><h4 id="生活方面-1"><a href="#生活方面-1" class="headerlink" title="生活方面"></a>生活方面</h4><blockquote><p>要点：一定要敢想，今年不行明年再来！</p></blockquote><ul><li>出行计划。来一场说走就走的旅行？</li><li>脱单？结婚？生娃？</li><li>买车？买房？</li><li>要读哪些书？</li></ul><h4 id="工作方面-1"><a href="#工作方面-1" class="headerlink" title="工作方面"></a>工作方面</h4><blockquote><p>要点：如果你不知道该写些啥，那么大概率在接下来的一年你会无所事事的度过。有这么一句话：”有些人工作了10年，实际上经验只有1年，另外9年在重复第一年。“</p></blockquote><ul><li>想要往哪些方向发力？</li><li>有哪些地方需要改进？</li><li>工作晋升？（flag立在这里，提醒自己要时刻准备）</li><li>哪些技术能力想要提高？</li><li>准备今年刷完哪些技术书籍，哪些课程？</li></ul><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>这个部分为随意发挥环节，可以是吐槽牢骚、也可以是美好幢景。进入了状态、甚至可以赋诗一首！</p><p>每年一篇，在XXX年之后再来一一回顾，看到当年的自己，这么多年的成长与改变，应当会宛然一笑。</p><p>作者公众号：<br><img src="http://muchstudy.com/2019/11/10/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9AJS%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/YIYING.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;width:70%;margin:auto&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2020/01/03/年终总结攻略，再也不愁如何下笔了！/总结.jpeg&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【鸡汤第2期】不要追求完美，要随心所欲地生活</title>
    <link href="http://muchstudy.com/2019/12/22/%E3%80%90%E9%B8%A1%E6%B1%A4%E7%AC%AC2%E6%9C%9F%E3%80%91%E4%B8%8D%E8%A6%81%E8%BF%BD%E6%B1%82%E5%AE%8C%E7%BE%8E%EF%BC%8C%E8%A6%81%E9%9A%8F%E5%BF%83%E6%89%80%E6%AC%B2%E5%9C%B0%E7%94%9F%E6%B4%BB/"/>
    <id>http://muchstudy.com/2019/12/22/【鸡汤第2期】不要追求完美，要随心所欲地生活/</id>
    <published>2019-12-22T14:55:52.000Z</published>
    <updated>2020-05-11T14:57:35.021Z</updated>
    
    <content type="html"><![CDATA[<div style="width:70%;margin:auto"><br><img src="/2019/12/22/【鸡汤第2期】不要追求完美，要随心所欲地生活/随心所欲.jpg"><br></div><h4 id="关于完美主义"><a href="#关于完美主义" class="headerlink" title="关于完美主义"></a>关于完美主义</h4><ul><li>简单说，完美主义就是追求一个较高水平的目标，不接受一个较低水平的、但可用的结果。</li><li>完美主义的最大问题是，它实际上让你追求高成本。</li><li>完美主义带来的高压力，也不利于身心健康。不要追求完美，要随心所欲地生活。</li></ul><p>来源：<a href="https://mp.weixin.qq.com/s/PpqGyGL1Cv2ko5j-p8WyNQ" target="_blank" rel="noopener">科技爱好者周刊：第 86 期</a></p><h4 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h4><ul><li>默克尔写了一段非常有意境有哲理的祝婚词：“<strong>爱情不是两个人的深情对视，而是看向同一个远方。</strong>”<blockquote><p>一个与众不同还很正确的视角与切入点，能够带来意想不到的效果</p></blockquote></li><li>《明朝那些事》最后专门写徐霞客，历史虚无主义分子当年明月总结了一句话“<strong>成功就是用自己的方式度过人生</strong>”。用在这两人身上，很合适。</li></ul><p>来源：<a href="https://www.zhihu.com/question/290565048/answer/473153403" target="_blank" rel="noopener">「侣行」夫妇（张昕宇、梁红）花了一亿人民币环球旅行有意义吗？</a></p><h4 id="关于浪漫"><a href="#关于浪漫" class="headerlink" title="关于浪漫"></a>关于浪漫</h4><h5 id="杜甫"><a href="#杜甫" class="headerlink" title="杜甫"></a>杜甫</h5><p>再说大唐帝国的浪漫。盛唐的浪漫真叫浪漫，它是浪漫到骨子里面的。我们现在的人都不浪漫，要浪漫就毕不了业，再浪漫就找不到工作，你怎么浪漫？</p><p>我告诉大家，杜甫的浪漫，可不是他的现实主义。杜甫20岁的时候，他漫游五岳，到今天的江苏、浙江一带。<strong>你以为他像旅游一样，找个旅游公司糊弄一下，照个相就回来了？</strong></p><p>他漫游多长时间你知道吗？从20岁一直玩到了24岁，又过了两年，他又往今天的齐赵去了，赵就是河北，齐就是山东这一带，玩了多长时间，大家知道吗？<strong>他说“快意八九年”，这叫浪漫精神</strong>。</p><blockquote><p>“快意”两字只可意会不可言传</p></blockquote><h5 id="孟浩然"><a href="#孟浩然" class="headerlink" title="孟浩然"></a>孟浩然</h5><p>孟浩然，你们知道“春眠不觉晓”对吧，那叫浪漫。我举个例子，他40岁跑到这个地方来考进士，他当时是扬名天下的大诗人。用我们今天的话来讲，他的微信群里那些人都是李白、王维这些人，都是一流的精英。</p><p>孟浩然这个人，40多岁还在考进士，他以为他考不上了，人生无常，他没有考取，但他家里比较富有，就回到湖北老家襄阳，活了60多岁，他就没干活了。</p><p>他写的《春晓》，“春眠不觉晓，处处闻啼鸟。夜来风雨声，花落知多少”，我们现在是把它作为小孩子一二年级读的诗。</p><p>我告诉同学们，这首诗根本就是读歪了，小孩子根本就读不懂。他写的是封建士大夫的闲情逸致。什么叫闲情逸致？就是没有事干，才写出这种诗来。</p><p>你看他第一句话，“春眠不觉晓”，渲染出一种什么样的生活情调？懒散，这就是睡觉睡到自然醒。“春眠不觉晓”，就是外面太阳爬得老高老高，露珠在太阳底下晶莹闪亮，我们的孟浩然还在梦中逍遥，第一句是说他没有醒。</p><p>第二句说“处处闻啼鸟”，第一句是他没有醒，第二句是他醒了，他是怎么样醒的？这句就告诉了我们，是鸟叫醒的。</p><p>这就间接告诉我们写诗的心境，春天的鸟儿欢快地叫个不停，扰了我们孟浩然的清梦，却依然心情大好。既交代了怎么醒的，也交代了醒时的心情，轻松惬意。</p><p>第三四句就写“夜来风雨声，花落知多少”，写的是什么东西？写的是醒后的所思所想。这时候他起床了没有？没有。他睡眼惺忪，马上就想到昨天夜晚，刮了一夜的风，下了一夜的雨，外面的花吹掉了几朵呢？</p><p>好在哪个地方？我告诉大家，他这个时候四五十岁，是在他中晚年写的，<strong>一个四五十岁的大男人，早上一醒来，睁开眼睛，就马上关心花掉了几朵。</strong></p><p>我们学校里有个桂子山，山上有花有鸟。我现在都活了60多岁，从来没关心过花掉了几朵，花掉了关我什么事。<strong>那首诗写的什么东西？闲情，什么事都没有。这才叫人的生活，这叫内在的浪漫。</strong></p><blockquote><p>保持“闲情”很重要！</p></blockquote><p>来源：<a href="https://mp.weixin.qq.com/s/fi61w6_trYooEUmlhsGB6w" target="_blank" rel="noopener">如果李白有朋友圈</a></p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><ul><li>如果觉得这碗鸡汤好喝，请点右下角【在看】</li><li>如果还想继续喝，请【关注】</li><li>如果被哪句鸡汤打动，请【评论】+【转发】喂给更多的人</li></ul><blockquote><p>最后，努力工作，优先解决了生存问题，才有资格解决生活问题，进而随心所欲的生活</p></blockquote><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;width:70%;margin:auto&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2019/12/22/【鸡汤第2期】不要追求完美，要随心所欲地生活/随心所欲.jpg&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h4 id=&quot;关于完美主义&quot;&gt;&lt;a href=&quot;#关于完美主义&quot; 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>【鸡汤第1期】从心所欲而不逾矩</title>
    <link href="http://muchstudy.com/2019/12/15/%E3%80%90%E9%B8%A1%E6%B1%A4%E7%AC%AC1%E6%9C%9F%E3%80%91%E4%BB%8E%E5%BF%83%E6%89%80%E6%AC%B2%E8%80%8C%E4%B8%8D%E9%80%BE%E7%9F%A9/"/>
    <id>http://muchstudy.com/2019/12/15/【鸡汤第1期】从心所欲而不逾矩/</id>
    <published>2019-12-14T16:50:39.000Z</published>
    <updated>2020-05-11T14:57:41.737Z</updated>
    
    <content type="html"><![CDATA[<div style="width:70%;margin:auto"><br><img src="/2019/12/15/【鸡汤第1期】从心所欲而不逾矩/title.jpg"><br></div><h4 id="从心所欲而不逾矩"><a href="#从心所欲而不逾矩" class="headerlink" title="从心所欲而不逾矩"></a>从心所欲而不逾矩</h4><ul><li><p>凭借一己之力，用100多个短视频，就获得了CNN积40年之功力才能在海外社交媒体上收割到的流量（订阅量700万+）</p><blockquote><p>再次印证精品依然是营销的利器。曾经被问到技术基础建设怎么向其他团队推广，答案就是把他做成<strong>精品</strong>！</p></blockquote></li><li><p>她的世界，是雨落屋檐，灶台炉火；是挥锄刨姜，石磙碾玉；是肩抗枯柴，黄瓜入怀，既满足了人们对山水田间生活的想象，也在喧嚣闹腾的人心中营造出一片桃花源。</p><blockquote><p>好的文字真的能打动人心！</p></blockquote></li><li><p>穿得朴实，气质干净，话不多，手脚勤快……李子柒能打通中西审美，靠的就是她传递出的一份对生活的热爱、一种恬静的感觉。<br>有点说不清？对，文化软实力，怎么能说清？</p><blockquote><p>什么是”文化“？我也说不清，《失控》一书里有这样两句话：【自然不仅仅是一个储量丰富的生物基因库，还是一个“文化基因库”】，【文化基因（meme）：也称弥母，文化传播的最小单位，通过模仿等非遗传途径而得以代代相传。】</p></blockquote></li><li><p>嫌人家技能太多？那是少见多怪，是没干过农活的井蛙之谈。岛叔从来没有质疑过在农村生活的大姨：你怎么又会做床单，又会纳鞋底？又会养羊，又会养猪？又会种花生，又会种麦子？<strong>那是她的日常，那是她的人生。</strong></p><blockquote><p>在分工越来越细致化的今天，没有在农村生活过的人估计真的很难理解</p></blockquote></li><li><p>我们虽然不喜欢给人、给事贴标签，但是传播规律证明，“标签化传播”确实有效。</p><blockquote><p>记住最后一句【’标签化传播‘确实有效】；最近看到周一围的一个新闻，说是不反对被贴上”油腻“的标签，因为他的职业是演员，不同的标签是对他演技的肯定；也不喜欢把真实的自己暴露给大家，避免刻板印象。</p></blockquote></li><li><p>围绕李子柒被热议不断的“文化输出”这词容易被外媒曲解，理解成国家行为、“组织预谋”云云。其实不是的，不妨用“文化影响”这个稍微中性一点的词。</p><blockquote><p>从”文化输出“到”文化影响“，赞！</p></blockquote></li><li><p>如何产生影响？归根结底是要有好的东西、好的作品。正如金庸、动作片、武侠片、流行歌构建起了香港流行文化形象一样，前提是这些文化作品质量不错，人民群众喜闻乐见、易于接受。如果说没有作品又大谈特谈“输出”，那就是空中楼阁。</p><blockquote><p>没有质量的输出，激不起半点水花。我相信，一个好的作者如果想要他的输出打动读者，首先得要打动他自己！</p></blockquote></li></ul><p>来源：<a href="https://mp.weixin.qq.com/s/G2_iW84oDnzAEkbYDFLI1Q" target="_blank" rel="noopener">【岛叔说】何必争论李子柒</a></p><h4 id="首期说明"><a href="#首期说明" class="headerlink" title="首期说明"></a>首期说明</h4><ul><li>一直有边阅读边划线的习惯，故而不经意间就会积累不少鸡汤</li><li>鸡汤太多缺少整理</li><li>灵光一闪的思考缺乏记录，遗失掉很遗憾</li><li>信息爆发的时代，有价值的信息往往需要人肉大浪淘沙</li><li>整理记录&amp;顺带分享</li><li>熬鸡汤费时，不定期发布</li></ul><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><ul><li>如果觉得这碗鸡汤好喝，请点右下角【在看】</li><li>如果还想继续喝，请【关注】</li><li>如果被哪句鸡汤打动，请【评论】+【转发】喂给更多的人！</li></ul><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;width:70%;margin:auto&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2019/12/15/【鸡汤第1期】从心所欲而不逾矩/title.jpg&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h4 id=&quot;从心所欲而不逾矩&quot;&gt;&lt;a href=&quot;#从心所欲而不逾矩&quot; cl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>手写JS函数的call、apply、bind实现</title>
    <link href="http://muchstudy.com/2019/12/01/%E6%89%8B%E5%86%99JS%E5%87%BD%E6%95%B0%E7%9A%84call%E3%80%81apply%E3%80%81bind%E5%AE%9E%E7%8E%B0/"/>
    <id>http://muchstudy.com/2019/12/01/手写JS函数的call、apply、bind实现/</id>
    <published>2019-11-30T16:00:02.000Z</published>
    <updated>2020-05-11T14:57:49.310Z</updated>
    
    <content type="html"><![CDATA[<div style="width:70%;margin:auto"><br><img src="/2019/12/01/手写JS函数的call、apply、bind实现/title.jpg"><br></div><p>&emsp;&emsp;之所以要写这篇，是因为曾经面试被要求在白纸上手写bind实现</p><p>&emsp;&emsp;结果跟代码一样清晰明确，一阵懵逼，<strong>没写出来！</strong></p><p>&emsp;&emsp;下面，撸起袖子就是干！~</p><p>&emsp;&emsp;把call、apply、bind一条龙都整一遍！~~</p><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><h4 id="定义与使用"><a href="#定义与使用" class="headerlink" title="定义与使用"></a>定义与使用</h4><blockquote><p>Function.prototype.call(): <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function.prototype.call()样例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  <span class="built_in">console</span>.log(arg1 + arg2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> _this = &#123; <span class="attr">name</span>: <span class="string">'YIYING'</span> &#125;</span><br><span class="line"><span class="comment">// 接受的是一个参数列表;方法立即执行</span></span><br><span class="line">fun.call(_this, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 输出：</span><br><span class="line">YIYING</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="手写实现"><a href="#手写实现" class="headerlink" title="手写实现"></a>手写实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义call实现</span></span><br><span class="line"><span class="comment"> * @param context   上下文this对象</span></span><br><span class="line"><span class="comment"> * @param args      动态参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.ownCall = <span class="function"><span class="keyword">function</span>(<span class="params">context, ...args</span>) </span>&#123;</span><br><span class="line">  context = (<span class="keyword">typeof</span> context === <span class="string">'object'</span> ? context : <span class="built_in">window</span>)</span><br><span class="line">  <span class="comment">// 防止覆盖掉原有属性</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Symbol</span>()</span><br><span class="line">  <span class="comment">// 这里的this为需要执行的方法</span></span><br><span class="line">  context[key] = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">// 方法执行</span></span><br><span class="line">  <span class="keyword">const</span> result = context[key](...args)</span><br><span class="line">  <span class="keyword">delete</span> context[key]</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证样例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  <span class="built_in">console</span>.log(arg1 + arg2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> _this = &#123; <span class="attr">name</span>: <span class="string">'YIYING'</span> &#125;</span><br><span class="line"><span class="comment">// 接受的是一个参数列表;方法立即执行</span></span><br><span class="line">fun.ownCall(_this, <span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 输出：</span><br><span class="line">YIYING</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><h4 id="定义与使用-1"><a href="#定义与使用-1" class="headerlink" title="定义与使用"></a>定义与使用</h4><blockquote><p>Function.prototype.apply(): <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function.prototype.apply()样例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  <span class="built_in">console</span>.log(arg1 + arg2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> _this = &#123; <span class="attr">name</span>: <span class="string">'YIYING'</span> &#125;</span><br><span class="line"><span class="comment">// 参数为数组;方法立即执行</span></span><br><span class="line">fun.apply(_this, [<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 输出：</span><br><span class="line">YIYING</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="手写实现-1"><a href="#手写实现-1" class="headerlink" title="手写实现"></a>手写实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Apply实现</span></span><br><span class="line"><span class="comment"> * @param context   上下文this对象</span></span><br><span class="line"><span class="comment"> * @param args      参数数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.ownApply = <span class="function"><span class="keyword">function</span>(<span class="params">context, args</span>) </span>&#123;</span><br><span class="line">  context = (<span class="keyword">typeof</span> context === <span class="string">'object'</span> ? context : <span class="built_in">window</span>)</span><br><span class="line">  <span class="comment">// 防止覆盖掉原有属性</span></span><br><span class="line">  <span class="keyword">const</span> key = <span class="built_in">Symbol</span>()</span><br><span class="line">  <span class="comment">// 这里的this为需要执行的方法</span></span><br><span class="line">  context[key] = <span class="keyword">this</span></span><br><span class="line">  <span class="comment">// 方法执行</span></span><br><span class="line">  <span class="keyword">const</span> result = context[key](...args)</span><br><span class="line">  <span class="keyword">delete</span> context[key]</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证样例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  <span class="built_in">console</span>.log(arg1 + arg2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> _this = &#123; <span class="attr">name</span>: <span class="string">'YIYING'</span> &#125;</span><br><span class="line"><span class="comment">// 参数为数组;方法立即执行</span></span><br><span class="line">fun.ownApply(_this, [<span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 输出：</span><br><span class="line">YIYING</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><h4 id="定义与使用-2"><a href="#定义与使用-2" class="headerlink" title="定义与使用"></a>定义与使用</h4><blockquote><p>Function.prototype.bind()<br>: <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function.prototype.bind()样例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  <span class="built_in">console</span>.log(arg1 + arg2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> _this = &#123; <span class="attr">name</span>: <span class="string">'YIYING'</span> &#125;</span><br><span class="line"><span class="comment">// 只变更fun中的this指向，返回新function对象</span></span><br><span class="line"><span class="keyword">const</span> newFun = fun.bind(_this)</span><br><span class="line">newFun(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 输出：</span><br><span class="line">YIYING</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="手写实现-2"><a href="#手写实现-2" class="headerlink" title="手写实现"></a>手写实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义bind实现</span></span><br><span class="line"><span class="comment"> * @param context     上下文</span></span><br><span class="line"><span class="comment"> * @returns &#123;Function&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.ownBind = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">  context = (<span class="keyword">typeof</span> context === <span class="string">'object'</span> ? context : <span class="built_in">window</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">...args</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.call(context, ...args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证样例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">arg1, arg2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">  <span class="built_in">console</span>.log(arg1 + arg2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> _this = &#123; <span class="attr">name</span>: <span class="string">'YIYING'</span> &#125;</span><br><span class="line"><span class="comment">// 只变更fun中的this指向，返回新function对象</span></span><br><span class="line"><span class="keyword">const</span> newFun = fun.ownBind(_this)</span><br><span class="line">newFun(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 输出：</span><br><span class="line">YIYING</span><br><span class="line">3</span><br></pre></td></tr></table></figure><blockquote><p>最后，麻烦以后面试不要再考这道题了！~~~</p></blockquote><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;width:70%;margin:auto&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2019/12/01/手写JS函数的call、apply、bind实现/title.jpg&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;之所以要写这篇，是因为曾经面试被
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>你是否也默默吐槽过XXX的代码写得真烂？</title>
    <link href="http://muchstudy.com/2019/11/26/%E4%BD%A0%E6%98%AF%E5%90%A6%E4%B9%9F%E9%BB%98%E9%BB%98%E5%90%90%E6%A7%BD%E8%BF%87XXX%E7%9A%84%E4%BB%A3%E7%A0%81%E5%86%99%E5%BE%97%E7%9C%9F%E7%83%82/"/>
    <id>http://muchstudy.com/2019/11/26/你是否也默默吐槽过XXX的代码写得真烂/</id>
    <published>2019-11-26T15:57:10.000Z</published>
    <updated>2020-05-11T14:57:55.360Z</updated>
    
    <content type="html"><![CDATA[<div style="width:70%;margin:auto"><br><img src="/2019/11/26/你是否也默默吐槽过XXX的代码写得真烂/title.jpg"><br></div><p>&emsp;&emsp;前段时间在做前端监控代码的交接，交接之前对代码质量有点忧虑（实际上也没有想象的那么差… - _ - ）</p><p>&emsp;&emsp;忧虑的原因是什么呢，曾经做一线开发时，用到公司基础框架组提供的框架时，当大家觉得不好用或者翻看源代码发现代码质量不高时，都会整齐一致的默默的一顿吐槽!~</p><p>&emsp;&emsp;后来，当自己也成为了基础框架研发组的一员时，就特别小心，深知吐槽的威力…</p><p>&emsp;&emsp;这里是背景，再回到本次代码交接。</p><p>&emsp;&emsp;忧虑的根本原因还是在于<strong><em>对现有代码不满意，感觉还有优化的空间</em></strong>。</p><p>&emsp;&emsp;那么，问题就来了，既然都对现有代码不满意，那为啥还会写出这样的代码呢？</p><p>&emsp;&emsp;这个人是不是有毛病？是不是做事比较糙？不靠谱？</p><p>&emsp;&emsp;其实，并不是！</p><p>&emsp;&emsp;在我看来，<strong><em>每一个阶段都有每一个阶段的代码与之完美契合</em></strong>，项目到了下一阶段，如果代码还在停留在上一阶级，那么看起来就会相当丑陋。</p><p>&emsp;&emsp;这也与我自己一直践行的<strong><em>简单直接</em></strong>，反对滥用设计模式、反对过度设计相匹配。</p><p>&emsp;&emsp;那么，怎么才能避免被人吐槽呢？</p><p>&emsp;&emsp;很简单，<strong><em>不断的重构！~</em></strong></p><p>&emsp;&emsp;在我看来，好的代码or产品都并不是一蹴而就的，都是<strong><em>不断打磨</em></strong>出来的。</p><blockquote><p>&emsp;&emsp;本来前几天就想把这篇文章写下来的，标题都起好了，叫做《关于代码重构的一点思考》，迟迟无法下笔，因为按我之前写文章的套路，都会先把整个文章的结构先想出来，针对于这个标题，始终想不好文章的整体结构、有哪几个标题段落</p><p>&emsp;&emsp;早上，看到了公众号【顾问之路】的一篇<a href="https://mp.weixin.qq.com/s/7Xz6v0hJCU9oirYT4rn6qQ" target="_blank" rel="noopener">《用心生活还是用脑生活？思考了一年之后，我决定选择前者》</a>, 因为下面的几句话，有了启发</p><ul><li>我好像一直在用头脑生活，用各种范式武装自己</li><li>朋友是这么说的：我们都这么熟了，你没有必要用你对待工作的态度来对我</li><li>在过去的那么多年里，我好像一直都在顽固的坚持用<strong><em>工作脑</em></strong>去同时对待工作和生活</li></ul><p>&emsp;&emsp;最后，感谢<strong><em>猎头麦</em></strong>，从此我的文章风格进入了新时代！哈哈哈！~</p><p>&emsp;&emsp;回想起16年在Blog中写过一篇叫《关于代码质量的一点思考》，顺便搬运到公众号上来了，<a href="https://mp.weixin.qq.com/s/EQflyMXsDXnIg-6R8jnKSA" target="_blank" rel="noopener">点击这里</a></p></blockquote><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;width:70%;margin:auto&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2019/11/26/你是否也默默吐槽过XXX的代码写得真烂/title.jpg&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;前段时间在做前端监控代码的交接，交接之前对
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一文搞定JS异常捕获</title>
    <link href="http://muchstudy.com/2019/11/10/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9AJS%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/"/>
    <id>http://muchstudy.com/2019/11/10/一文搞定JS异常捕获/</id>
    <published>2019-11-10T02:48:35.000Z</published>
    <updated>2019-12-01T04:43:03.542Z</updated>
    
    <content type="html"><![CDATA[<div style="width:70%;margin:auto"><br><img src="/2019/11/10/一文搞定JS异常捕获/catch.jpg"><br></div><p>&emsp;&emsp;关于JS的异常捕获，主要分为两种，一种为同步情况下的异常捕获，一种为一步执行下的异常捕获；异常捕获的【坑】主要集中在异步场景。</p><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><p>&emsp;&emsp;在同步场景下，简单粗暴，直接使用try/catch解决问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// catch: ReferenceError: obj is not defined</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj.error)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'catch:'</span>, e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span>: <span class="built_in">ReferenceError</span>: obj is not defined</span><br><span class="line">    at &lt;anonymous&gt;:<span class="number">4</span>:<span class="number">17</span></span><br><span class="line">    at &lt;anonymous&gt;:<span class="number">8</span>:<span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><h4 id="setTimeout异常"><a href="#setTimeout异常" class="headerlink" title="setTimeout异常"></a>setTimeout异常</h4><p>在异步场景下，按照上面的异常捕获方式是无法捕获到异常的，如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无法捕获到异常</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(obj.error)</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'catch:'</span>, e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">Uncaught <span class="built_in">ReferenceError</span>: obj is not defined</span><br><span class="line">    at &lt;anonymous&gt;:<span class="number">4</span>:<span class="number">19</span></span><br><span class="line">    at i (init.js:<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>之所以无法捕获到异常，原因在于异步方法执行时，主流程已执行完毕，try/catch已经退出函数调用栈；正确的异常捕获如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(obj.error)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="comment">// 此处捕获到异常</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'catch1:'</span>, e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// 此处无法捕获到异常</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'catch2:'</span>, e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">catch1: <span class="built_in">ReferenceError</span>: obj is not defined</span><br><span class="line">    at &lt;anonymous&gt;:<span class="number">5</span>:<span class="number">21</span></span><br><span class="line">    at i (init.js:<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>从这里可以看出，最外层的try/catch是不生效的，可以去掉。</p><h4 id="promise异常"><a href="#promise异常" class="headerlink" title="promise异常"></a>promise异常</h4><p>首先通过两端代码来看promise的异常捕获情况<br>代码一：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 此处的异常无法被捕获</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'1'</span>, obj.error)</span><br><span class="line">        resolve(<span class="number">100</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    promise.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'result:'</span>, result)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 此处无法捕获到异常</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'catch1:'</span>, error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// 此处无法捕获到异常</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'catch2:'</span>, e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">Uncaught <span class="built_in">ReferenceError</span>: obj is not defined</span><br><span class="line">    at &lt;anonymous&gt;:<span class="number">6</span>:<span class="number">26</span></span><br><span class="line">    at i (init.js:<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>代码二：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(obj.error)</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        resolve(<span class="number">100</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    promise.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'result:'</span>, result)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 此处捕获到异常</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'catch1:'</span>, error)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// 此处无法捕获到异常</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'catch2:'</span>, e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">catch1: <span class="built_in">ReferenceError</span>: obj is not defined</span><br><span class="line">    at &lt;anonymous&gt;:<span class="number">4</span>:<span class="number">19</span></span><br><span class="line">    at <span class="keyword">new</span> <span class="built_in">Promise</span> (<span class="xml"><span class="tag">&lt;<span class="name">anonymous</span>&gt;</span>)</span></span><br><span class="line">    at &lt;anonymous&gt;:3:21</span><br><span class="line">    at &lt;anonymous&gt;:19:3</span><br></pre></td></tr></table></figure></p><blockquote><p>总结：</p><ol><li>最外层的try/catch对于promise中的异常捕获完全无效</li><li>new Promise()中的异步异常(setTimeout)只能在内部捕获</li><li>new Promise()中的同步异常只能通过catch捕获</li></ol></blockquote><p><strong><em>核心：熟悉EventLoop就知道，每个任务使用独立的函数调用栈；所以，每一个task都需要单独捕获异常；使用promise.catch能够捕获到promise任务的异常。</em></strong></p><h4 id="async-await异常"><a href="#async-await异常" class="headerlink" title="async/await异常"></a>async/await异常</h4><p>追寻<code>talk is cheap,show me the code</code>的原则，这里直接上验证代码，让实际结果来说明一切。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.error)</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 1.这里的异常只能在setTimeout内部使用try/catch捕获</span></span><br><span class="line">      <span class="comment">// console.log(obj.error)</span></span><br><span class="line">      resolve(<span class="number">100</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> f().catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 2.优先捕获到异常</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'catch1:'</span>, e)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="comment">// 3.如果没有catch1，这里也能捕获到异常</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'catch2:'</span>, e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br></pre></td></tr></table></figure></p><blockquote><p>总结：</p><ol><li>new Promise()中的异步异常(setTimeout)只能在内部捕获</li><li>可以使用<code>.catch</code>也可使用<code>try/catch</code>来捕获异常，其中<code>.catch</code>优先级较高</li></ol></blockquote><p>本文首发于公众号<br><img src="/2019/11/10/一文搞定JS异常捕获/YIYING.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;width:70%;margin:auto&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2019/11/10/一文搞定JS异常捕获/catch.jpg&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;关于JS的异常捕获，主要分为两种，一种为同步情况下的异常捕获
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端防抖与节流</title>
    <link href="http://muchstudy.com/2019/10/21/%E5%89%8D%E7%AB%AF%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/"/>
    <id>http://muchstudy.com/2019/10/21/前端防抖与节流/</id>
    <published>2019-10-21T02:19:16.000Z</published>
    <updated>2020-05-11T14:58:07.467Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;函数防抖与节流印象中都是为了控制函数执行频率，比如避快速点击提交按钮多次提交、避免模糊搜索框keyup事件监听时快速打字每次都去调用一次查询接口、避免页面滚动监听事件快速执行影响性能等；之前对防抖和节流的具体概念缺乏了解，比如他们有啥区别？具体是怎么样的？如何方便的理解这两个概念？翻了翻资料，结合自己的理解与思考整理如下</p><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><h4 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h4><p>触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间</p><blockquote><p>example1: 模糊搜索框keyup事件监听，始终要等到用户输入告一段落后才会执行数据查询<br>example2: 游戏释放技能有一个准备时间，当准备阶段被打断时，需要重新走技能准备，准备完成才能够释放技能</p></blockquote><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖</span></span><br><span class="line"><span class="comment"> * @param fn      需要做防抖处理的函数</span></span><br><span class="line"><span class="comment"> * @param delay   技能准备（延迟）执行时间</span></span><br><span class="line"><span class="comment"> * @returns &#123;Function&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay = <span class="number">500</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> time = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    clearTimeout(time)</span><br><span class="line">    time = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只会打印debounce2</span></span><br><span class="line"><span class="keyword">const</span> debounceTest = debounce(<span class="function">(<span class="params">param</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(param) &#125;)</span><br><span class="line">debounceTest(<span class="string">'debounce1'</span>)</span><br><span class="line">debounceTest(<span class="string">'debounce2'</span>)</span><br></pre></td></tr></table></figure><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><h4 id="名词解释-1"><a href="#名词解释-1" class="headerlink" title="名词解释"></a>名词解释</h4><p>高频事件触发，但在n秒内只会执行一次</p><blockquote><p>example1：查询按钮，第一次可以立即点击，防止快速点击控制3s之内只能点一次<br>example2：游戏技能冷却，可用时随时可立即执行，当执行后有一个冷却时间</p></blockquote><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流</span></span><br><span class="line"><span class="comment"> * @param fn      需要做节流处理的函数</span></span><br><span class="line"><span class="comment"> * @param limit   技能的冷却（限制）时间</span></span><br><span class="line"><span class="comment"> * @returns &#123;Function&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, limit = <span class="number">500</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">      fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">      flag = <span class="literal">false</span></span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; flag = <span class="literal">true</span> &#125;, limit)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只会打印throttle1</span></span><br><span class="line"><span class="keyword">const</span> throttleTest = throttle(<span class="function">(<span class="params">param</span>) =&gt;</span> &#123; <span class="built_in">console</span>.log(param) &#125;)</span><br><span class="line">throttleTest(<span class="string">'throttle1'</span>)</span><br><span class="line">throttleTest(<span class="string">'throttle2'</span>)</span><br></pre></td></tr></table></figure><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;函数防抖与节流印象中都是为了控制函数执行频率，比如避快速点击提交按钮多次提交、避免模糊搜索框keyup事件监听时快速打字每次都去调用一次查询接口、避免页面滚动监听事件快速执行影响性能等；之前对防抖和节流的具体概念缺乏了解，比如他们有啥区别？具体是怎么
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch常用增删改查记录</title>
    <link href="http://muchstudy.com/2019/09/28/Elasticsearch%E5%B8%B8%E7%94%A8%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E8%AE%B0%E5%BD%95/"/>
    <id>http://muchstudy.com/2019/09/28/Elasticsearch常用增删改查记录/</id>
    <published>2019-09-28T15:25:38.000Z</published>
    <updated>2020-02-06T09:40:55.159Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用Elasticsearch来做异常监控的存储，写了不少ES的索引操作，以及对数据的增删改查操作，记录一下，以备不时之需。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有索引</span></span><br><span class="line">GET _cat/indices</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看indices</span></span><br><span class="line">GET /_cat/indices/jz-fe*?v&amp;s=index</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看索引的文档总数</span></span><br><span class="line">GET jz-fe-http-log/_count</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除索引</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> DELETE /jz-fe-http-log</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看索引相关信息</span></span><br><span class="line">GET nginx-log-bjdaojiacom-2019.07.20</span><br><span class="line">GET jz-fe-http-log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建索引，禁止自动添加类型字段</span></span><br><span class="line">PUT /jz-fe-http-log</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "dynamic": "strict",</span><br><span class="line">    "properties":&#123;</span><br><span class="line">      "gitGroup":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "projectName":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "level":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "code":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "href":&#123;"type":"text"&#125;,</span><br><span class="line">      "url":&#123;</span><br><span class="line">        "type" : "text",</span><br><span class="line">        "fields" : &#123;</span><br><span class="line">          "keyword" : &#123;</span><br><span class="line">            "type" : "keyword"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      "method":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "param":&#123;"type":"text"&#125;,</span><br><span class="line">      "response":&#123;"type":"text"&#125;,</span><br><span class="line">      "message":&#123;</span><br><span class="line">        "type":"text",</span><br><span class="line">        "fields" : &#123;</span><br><span class="line">          "keyword" : &#123;</span><br><span class="line">            "type" : "keyword"</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;&#125;,</span><br><span class="line">      "stack":&#123;"type":"text"&#125;,</span><br><span class="line">      "clientDate":&#123;"type":"date","format":"yyyy-MM-dd HH:mm:ss"&#125;,</span><br><span class="line">      "serverDate":&#123;"type":"date","format":"yyyy-MM-dd HH:mm:ss"&#125;,</span><br><span class="line">      "uid": &#123;"type":"keyword"&#125;,</span><br><span class="line">      "phone": &#123;"type":"keyword"&#125;,</span><br><span class="line">      "os":&#123;"type":"text"&#125;,</span><br><span class="line">      "platform":&#123;"type":"text"&#125;,</span><br><span class="line">      "browser":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "version":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "userAgent":&#123;"type":"text"&#125;,</span><br><span class="line">      "status":&#123;"type":"integer"&#125;,</span><br><span class="line">      "closeDate":&#123;"type":"date","format":"yyyy-MM-dd HH:mm:ss"&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新索引-增加字段</span></span><br><span class="line">PUT jz-fe-http-log/_mapping</span><br><span class="line">&#123;</span><br><span class="line">    "dynamic": "strict",</span><br><span class="line">    "properties": &#123;</span><br><span class="line">      "status":&#123;"type":"integer"&#125;,</span><br><span class="line">      "closeDate":&#123;"type":"date","format":"yyyy-MM-dd HH:mm:ss"&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新索引-修改字段</span></span><br><span class="line">PUT jz-fe-http-log/_mapping</span><br><span class="line">&#123;</span><br><span class="line">    "properties": &#123;</span><br><span class="line">      "url":&#123;</span><br><span class="line">        "type":"text",</span><br><span class="line">        "fields" : &#123;</span><br><span class="line">          "keyword" : &#123;</span><br><span class="line">            "type" : "keyword"</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加数据</span></span><br><span class="line">POST /jz-fe-http-log/_doc</span><br><span class="line">&#123;</span><br><span class="line">  "os":"OS X",</span><br><span class="line">  "platform":"iPhone",</span><br><span class="line">  "browser":"Safari",</span><br><span class="line">  "version":"11.0",</span><br><span class="line">  "clientDate":"2019-08-23 18:54:03"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定key查询</span></span><br><span class="line">GET /jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "_id": "BYG_SG0BW-qMNGXgwzPg"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按文档ID更新指定字段数据</span></span><br><span class="line">POST /jz-fe-http-log/_doc/R9Wm_mwBAl5tA0U3Hq4l/_update</span><br><span class="line">&#123;</span><br><span class="line">   "doc" : &#123;</span><br><span class="line">      "status": 1</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按id删除数据</span></span><br><span class="line">DELETE /jz-fe-http-log/_doc/l0_772wBAl5tA0U3dpBH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除指定查询数据 - 前缀匹配</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> POST /jz-fe-http-log/_delete_by_query</span></span><br><span class="line">POST /jz-fe-http-log/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">  "size":5,</span><br><span class="line">   "query": &#123;</span><br><span class="line">        "regexp": &#123; "projectName": "daily-clean-v2.+" &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST /jz-fe-http-log/_delete_by_query</span><br><span class="line">&#123;</span><br><span class="line">  "size":5,</span><br><span class="line">   "query": &#123;</span><br><span class="line">        "match": &#123; "projectName": "&lt;%- 909275197+844400363 %&gt;" &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 异常总数</span></span><br><span class="line">GET /jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match_all": &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 已处理异常总数</span></span><br><span class="line">GET /jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "status": 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当天异常总数</span></span><br><span class="line">GET /jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "serverDate": "now/1d"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 今日异常数</span></span><br><span class="line">POST /jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">   "query": &#123;</span><br><span class="line">        "bool": &#123;</span><br><span class="line">            "must": [</span><br><span class="line">                &#123; "match": &#123; "serverDate": "now/1d" &#125;&#125;,</span><br><span class="line">                &#123; "match": &#123; "status":  "1" &#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照项目名称分组</span></span><br><span class="line">GET jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "query": &#123;</span><br><span class="line">      "bool": &#123;</span><br><span class="line">          "must": [</span><br><span class="line">              &#123;</span><br><span class="line">                "range": &#123;</span><br><span class="line">                  "serverDate": &#123;</span><br><span class="line">                    "gte": "2019-10-30 14:57:00",</span><br><span class="line">                    "lte": "2019-10-31 14:57:00"</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "group_by_projectName": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "size": 50,</span><br><span class="line">        "field": "projectName"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照git group+项目名称分组</span></span><br><span class="line">GET jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "group_by_gitGroup": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "size": 50,</span><br><span class="line">        "field": "gitGroup"</span><br><span class="line">      &#125;,</span><br><span class="line">      "aggs": &#123;</span><br><span class="line">        "group_by_projectName": &#123;</span><br><span class="line">        "terms": &#123;</span><br><span class="line">          "size": 50,</span><br><span class="line">          "field": "projectName"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定项目下，错误等级分组</span></span><br><span class="line">GET jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match": &#123;</span><br><span class="line">      "projectName": "daily-clean"</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "group_by_projectName": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "field": "level"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按天分组、计数</span></span><br><span class="line">GET jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "grouy_by_day": &#123;</span><br><span class="line">      "date_histogram": &#123;</span><br><span class="line">        "field": "serverDate",</span><br><span class="line">        "interval": "day",</span><br><span class="line">         "format" : "yyyy-MM-dd"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 最近一周所有问题增长趋势</span></span><br><span class="line">GET jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "track_total_hits": 100000,</span><br><span class="line">  "query": &#123;</span><br><span class="line">        "bool": &#123;</span><br><span class="line">            "must": [</span><br><span class="line">                &#123;</span><br><span class="line">                  "range": &#123;</span><br><span class="line">                    "serverDate": &#123;</span><br><span class="line">                      "gte": "2019-10-30 14:57:00",</span><br><span class="line">                      "lte": "2019-10-31 14:57:00"</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "grouy_by_hour": &#123;</span><br><span class="line">      "date_histogram": &#123;</span><br><span class="line">        "field": "serverDate",</span><br><span class="line">        "interval": "hour",</span><br><span class="line">         "format" : "yyyy-MM-dd HH:mm:ss"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 上一周指定项目的问题增长趋势</span></span><br><span class="line">GET jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":1,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123; "match": &#123; "projectName": "daily-clean" &#125;&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          "range": &#123;</span><br><span class="line">            "serverDate": &#123;</span><br><span class="line">              "gte": "2019-10-30 14:57:00",</span><br><span class="line">              "lte": "2019-10-31 14:57:00"</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "grouy_by_hour": &#123;</span><br><span class="line">      "date_histogram": &#123;</span><br><span class="line">        "field": "serverDate",</span><br><span class="line">        "min_doc_count": 0,</span><br><span class="line">        "interval": "hour",</span><br><span class="line">         "format" : "yyyy-MM-dd HH:mm:ss"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定项目，按message分组</span></span><br><span class="line">GET jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "query": &#123;</span><br><span class="line">        "bool": &#123;</span><br><span class="line">            "must": [</span><br><span class="line">                &#123; "match": &#123; "projectName": "csworker" &#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "grouy_by_message": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "size": 25,</span><br><span class="line">        "field": "message.keyword"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按指定项目中的message分页查询</span></span><br><span class="line">POST /jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":2,</span><br><span class="line">  "from": 0,</span><br><span class="line">   "query": &#123;</span><br><span class="line">        "bool": &#123;</span><br><span class="line">            "must": [</span><br><span class="line">                &#123; "match": &#123; "projectName": "daily-clean" &#125;&#125;,</span><br><span class="line">                &#123; "match": &#123; "message.keyword":  "无可用商家" &#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定项目+message，按url分组，查询出指定错误的url排行</span></span><br><span class="line">POST /jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "from": 0,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">        "must": [</span><br><span class="line">            &#123; "match": &#123; "projectName": "daily-clean" &#125;&#125;,</span><br><span class="line">            &#123; "match": &#123; "message.keyword": "timeout of 5000ms exceeded" &#125;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "group_by_url": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "field": "url.keyword"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按时间降序</span></span><br><span class="line">POST /jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":1,</span><br><span class="line">   "query": &#123;</span><br><span class="line">        "bool": &#123;</span><br><span class="line">            "must": [</span><br><span class="line">                &#123; "match": &#123; "projectName": "daily-clean" &#125;&#125;,</span><br><span class="line">                &#123; "match": &#123; "message.keyword":  "无可用商家" &#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "sort": [</span><br><span class="line">        &#123;"serverDate": "desc"&#125; ,</span><br><span class="line">        &#123;"_id": "asc"&#125;    </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按时间降序-searchAfter</span></span><br><span class="line">POST /jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":1,</span><br><span class="line">   "query": &#123;</span><br><span class="line">        "bool": &#123;</span><br><span class="line">            "must": [</span><br><span class="line">                &#123; "match": &#123; "projectName": "daily-clean" &#125;&#125;,</span><br><span class="line">                &#123; "match": &#123; "message.keyword":  "无可用商家" &#125;&#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "search_after":[</span><br><span class="line">          1569489763000,</span><br><span class="line">          "NP4pa20BFerq1YvUydLx"</span><br><span class="line">        ],</span><br><span class="line">    "sort": [</span><br><span class="line">        &#123;"serverDate": "desc"&#125; ,</span><br><span class="line">        &#123;"_id": "asc"&#125;    </span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定时间段，按项目分组</span></span><br><span class="line">GET jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "query": &#123;</span><br><span class="line">        "range": &#123;</span><br><span class="line">            "serverDate": &#123;</span><br><span class="line">              "gt": "2019-09-24 09:00:00",</span><br><span class="line">              "lt": "2019-09-24 10:00:00",</span><br><span class="line">              "format": "yyyy-MM-dd HH:mm:ss"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "grouy_by_project": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "field": "projectName"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询最近一小时的数据，按项目分组</span></span><br><span class="line">GET jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123;</span><br><span class="line">          "range": &#123;</span><br><span class="line">            "serverDate": &#123;</span><br><span class="line">              "gte": "2019-10-31 12:57:00",</span><br><span class="line">              "lte": "2019-10-31 13:57:00"</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "grouy_by_project": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "size": 100,</span><br><span class="line">        "field": "projectName"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 异常查询</span></span><br><span class="line">GET jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":30,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">          "range": &#123;</span><br><span class="line">            "serverDate": &#123;</span><br><span class="line">              "gte": "2020-01-18 17:00:00",</span><br><span class="line">              "lte": "2020-01-18 17:30:00"</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "grouy_by_project": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "size": 100,</span><br><span class="line">        "field": "projectName"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123; "match": &#123; "projectName": "daily-clean-v2" &#125;&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          "range": &#123;</span><br><span class="line">            "serverDate": &#123;</span><br><span class="line">              "gte": "2020-01-18 07:00:00",</span><br><span class="line">              "lte": "2020-01-18 13:00:00"</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "grouy_by_message": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "size": 25,</span><br><span class="line">        "field": "message.keyword"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET jz-fe-http-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123; "match": &#123; "projectName": "daily-clean-v2" &#125;&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          "range": &#123;</span><br><span class="line">            "serverDate": &#123;</span><br><span class="line">              "gte": "2020-01-18 07:00:00",</span><br><span class="line">              "lte": "2020-01-18 13:00:00"</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "aggs": &#123;</span><br><span class="line">    "group_by_url": &#123;</span><br><span class="line">      "terms": &#123;</span><br><span class="line">        "field": "url.keyword"</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash">                                 性能监控相关</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ----------------------------------------------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看索引相关信息</span></span><br><span class="line">GET jz-fe-performance-log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看索引的文档总数</span></span><br><span class="line">GET jz-fe-performance-log/_count</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除索引</span></span><br><span class="line">DELETE /jz-fe-performance-log</span><br><span class="line"><span class="meta">#</span><span class="bash"> 性能监控-创建索引，禁止自动添加类型字段</span></span><br><span class="line">PUT /jz-fe-performance-log</span><br><span class="line">&#123;</span><br><span class="line">  "mappings": &#123;</span><br><span class="line">    "dynamic": "strict",</span><br><span class="line">    "properties":&#123;</span><br><span class="line">      "groupName":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "projectName":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "href":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "clientDate":&#123;"type":"date","format":"yyyy-MM-dd HH:mm:ss"&#125;,</span><br><span class="line">      "serverDate":&#123;"type":"date","format":"yyyy-MM-dd HH:mm:ss"&#125;,</span><br><span class="line">      "appId":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "hmsr":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "znsr":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "hmpl":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "unloadTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "redirectTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "appCacheTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "dnsTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "tcpTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "requestTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "responseTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "analysisTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "loadEventTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "connectTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "resourceTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "domReadyTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "TTFBTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "TTSRTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "TTDCTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "TTFLTime":&#123;"type":"integer"&#125;,</span><br><span class="line">      "uid":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "phone":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "platform":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "os":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "browser":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "version":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "userAgent":&#123;"type":"text"&#125;,</span><br><span class="line">      "ip":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "networkType":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "ISP":&#123;"type":"keyword"&#125;,</span><br><span class="line">      "region":&#123;"type":"keyword"&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询索引下的所有数据</span></span><br><span class="line">GET /jz-fe-performance-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "match_all": &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看索引详情</span></span><br><span class="line">GET /_cat/indices/jz-fe*?v&amp;s=index</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除后释放空间</span></span><br><span class="line">POST jz-fe-performance-log/_forcemerge</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除指定时间段的数据</span></span><br><span class="line">POST jz-fe-performance-log/_delete_by_query?scroll_size=10000&amp;slices=10</span><br><span class="line">&#123;</span><br><span class="line">   "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123;</span><br><span class="line">          "range": &#123;</span><br><span class="line">            "serverDate": &#123;</span><br><span class="line">              "lte": "2020-01-01 00:00:00"</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询出指定时间段项目的平均打开时间</span></span><br><span class="line">GET jz-fe-performance-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "track_total_hits": 10000000,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123;</span><br><span class="line">          "range": &#123;</span><br><span class="line">            "serverDate": &#123;</span><br><span class="line">              "gte": "2020-01-10 12:00:00",</span><br><span class="line">              "lte": "2020-01-18 13:00:00"</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "aggs":&#123;</span><br><span class="line">"projectAvgTime":&#123;</span><br><span class="line">"terms":&#123;</span><br><span class="line">  "size": 50,</span><br><span class="line">"script": "'【'+doc['groupName'].value+'】'+doc['projectName'].value",</span><br><span class="line">"order": &#123;</span><br><span class="line">  "avgTime": "desc"</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">"aggs":&#123;</span><br><span class="line">"avgTime":&#123;</span><br><span class="line">"avg":&#123;</span><br><span class="line">"field":"TTFLTime"</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">"minTime":&#123;</span><br><span class="line">"min":&#123;</span><br><span class="line">"field":"TTFLTime"</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">"maxTime":&#123;</span><br><span class="line">"max":&#123;</span><br><span class="line">"field":"TTFLTime"</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 秒开率计算</span></span><br><span class="line">POST jz-fe-performance-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size": 0,</span><br><span class="line">  "track_total_hits": 10000000,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123; "range": &#123; "TTFLTime": &#123; "lte": 3000 &#125; &#125; &#125;,</span><br><span class="line">        &#123; "match": &#123; "projectName": "daily-clean-v2" &#125;&#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          "range": &#123;</span><br><span class="line">            "serverDate": &#123;</span><br><span class="line">              "gte": "2020-01-10 12:00:00",</span><br><span class="line">              "lte": "2020-01-18 13:00:00"</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 平均首字节时间</span></span><br><span class="line">GET jz-fe-performance-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "track_total_hits": 10000000,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123;</span><br><span class="line">          "range": &#123;</span><br><span class="line">            "serverDate": &#123;</span><br><span class="line">              "gte": "2020-01-10 12:00:00",</span><br><span class="line">              "lte": "2020-01-18 13:00:00"</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "aggs":&#123;</span><br><span class="line">"avgTime":&#123;</span><br><span class="line">"avg":&#123;</span><br><span class="line">"field":"TTFLTime"</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">"minTime":&#123;</span><br><span class="line">"min":&#123;</span><br><span class="line">"field":"TTFLTime"</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">"maxTime":&#123;</span><br><span class="line">"max":&#123;</span><br><span class="line">"field":"TTFLTime"</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 性能柱状图</span></span><br><span class="line">GET jz-fe-performance-log/_search</span><br><span class="line">&#123;</span><br><span class="line">  "size":0,</span><br><span class="line">  "track_total_hits": 10000000,</span><br><span class="line">  "query": &#123;</span><br><span class="line">    "bool": &#123;</span><br><span class="line">      "must": [</span><br><span class="line">        &#123; "range": &#123; "TTFLTime": &#123; "gte": 250, "lte": 349 &#125; &#125; &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          "range": &#123;</span><br><span class="line">            "serverDate": &#123;</span><br><span class="line">              "gte": "2020-02-05 16:19:19",</span><br><span class="line">              "lte": "2020-02-06 16:19:19"</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "aggs":&#123;</span><br><span class="line">"chartData":&#123;</span><br><span class="line">"terms":&#123;</span><br><span class="line">  "size": 1000,</span><br><span class="line">  "field": "TTFLTime",</span><br><span class="line">"script": "Math.round(_value/100)",</span><br><span class="line">"order": &#123;</span><br><span class="line">  "_key": "asc"</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近使用Elasticsearch来做异常监控的存储，写了不少ES的索引操作，以及对数据的增删改查操作，记录一下，以备不时之需。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Elasticsearch7.x安装与配置</title>
    <link href="http://muchstudy.com/2019/08/19/Elasticsearch7-x%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://muchstudy.com/2019/08/19/Elasticsearch7-x安装与配置/</id>
    <published>2019-08-19T15:08:35.000Z</published>
    <updated>2019-12-01T04:46:02.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>1.下载地址：<a href="https://www.elastic.co/cn/start" target="_blank" rel="noopener">https://www.elastic.co/cn/start</a><br>复制下载链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载资源</span></span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.3.0-linux-x86_64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压资源</span></span><br><span class="line">tar -xf elasticsearch-7.3.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd elasticsearch-7.3.0-linux-x86_64</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示启动elk</span></span><br><span class="line">./bin/elasticsearch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 后台启动</span></span><br><span class="line">./bin/elasticsearch -d</span><br></pre></td></tr></table></figure><h2 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h2><h3 id="跨域配置"><a href="#跨域配置" class="headerlink" title="跨域配置"></a>跨域配置</h3><p>当使用elasticsearch-head插件访问elk时，需要设置允许跨域访问<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim config/elasticsearch.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增如下内容</span></span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: "*"</span><br></pre></td></tr></table></figure></p><h3 id="允许外部网络（非本地）访问9200端口"><a href="#允许外部网络（非本地）访问9200端口" class="headerlink" title="允许外部网络（非本地）访问9200端口"></a>允许外部网络（非本地）访问9200端口</h3><p>默认情况下，启动elk服务后，其它服务器是无法访问elk服务的（telnet不通），只允许本地访问。</p><p>需要做如下配置：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim config/elasticsearch.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增如下内容</span></span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br></pre></td></tr></table></figure></p><p>此时，启动会报如下两个错误：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR: [2] bootstrap checks failed</span><br><span class="line">[1]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line">[2]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</span><br></pre></td></tr></table></figure></p><p>对于第一个配置，root用户权限下，增加如下配置：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增如下内容</span></span><br><span class="line">vm.max_map_count=262144</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></p><p>对于第二个错误，增加如下配置：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim config/elasticsearch.yml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增如下内容</span></span><br><span class="line">cluster.initial_master_nodes: [“node-1”]</span><br></pre></td></tr></table></figure></p><p>作者公众号：<br><img src="http://muchstudy.com/2019/11/10/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9AJS%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/YIYING.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;下载&quot;&gt;&lt;a href=&quot;#下载&quot; class=&quot;headerlink&quot; title=&quot;下载&quot;&gt;&lt;/a&gt;下载&lt;/h2&gt;&lt;p&gt;1.下载地址：&lt;a href=&quot;https://www.elastic.co/cn/start&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CodeReview过程中关于JS代码性能的随想整理</title>
    <link href="http://muchstudy.com/2019/03/04/CodeReview%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%85%B3%E4%BA%8EJS%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E7%9A%84%E9%9A%8F%E6%83%B3%E6%95%B4%E7%90%86/"/>
    <id>http://muchstudy.com/2019/03/04/CodeReview过程中关于JS代码性能的随想整理/</id>
    <published>2019-03-04T14:59:48.000Z</published>
    <updated>2020-05-11T14:59:07.527Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>&emsp;&emsp;团队中做code review有一段时间了，最近一直在思考一个问题，抛开业务逻辑，单纯从代码层面如何评价一段代码的好坏？</p><p>&emsp;&emsp;好和坏都是相对的，一段不那么好的代码经过优化之后，如何标准化的给出重构前后的差异呢？</p><p>&emsp;&emsp;我们所有的代码都跑在计算机上，计算机的核心是CPU和内存。从这个角度来看，效率高的代码应当占用更少的CPU时间，更少的内存空间。</p><p>&emsp;&emsp;因此，问题就演变为优化一段代码，到底优化了多少CPU的使用以及内存空间的使用？</p><h2 id="CPU-时间复杂度"><a href="#CPU-时间复杂度" class="headerlink" title="CPU-时间复杂度"></a>CPU-时间复杂度</h2><p>&emsp;&emsp;在数据结构与算法中，常用大O来表示算法的时间复杂度，常见的时间复杂度如下所示：（来源《算法》第四版）</p><img src="/2019/03/04/CodeReview过程中关于JS代码性能的随想整理/时间复杂度.jpg" title="时间复杂度"><p>&emsp;&emsp;时间复杂度这个东西，是描述一个算法在问题规模不断增大时对应的时间增长曲线。所以，这些增长数量级并不是一个准确的性能评价，可以理解为一个近似值，时间的增长近似于logN、NlogN的曲线。如下图所示：</p><img src="/2019/03/04/CodeReview过程中关于JS代码性能的随想整理/增长曲线.jpg" title="增长曲线"><p>&emsp;&emsp;上面是关于时间复杂度的解释，下面通过具体样例来看看代码的时间复杂度</p><p>代码一：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> item = arr[i]</span><br><span class="line">    num = num + item</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这是一段求数组中数字总和的代码，我们粗略估计上述代码在CPU中表达式运算的时间都是一样的，计为avg_time，那么我们来算一下上面的代码需要多少个avg_time.</p><p>&emsp;&emsp;首先从第二行开始，表达式赋值计为1个avg_time；代码的3、4、5行分别要运行10次，其中第三行比较特殊，每次运行需要计算arr.length以及i++,所以这里需要<code>（2+1+1)*10</code> 个avg_time;总共就是<code>（2+1+1)*10+1=41</code>个avg_time</p><p>&emsp;&emsp;接着，我们来对上面的代码优化一番，如下所示：<br>代码二<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> num = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">    num = num + arr[len]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;不难算出，优化后的代码只耗费了<code>1+1+(1+1)*10=22</code>个avg_time,代码二相对于代码一，节约了<code>41-22=19</code>个avg_time,代码性能提升<code>19/41=46.3%</code>!</p><h3 id="如何写出低时间复杂度的代码？"><a href="#如何写出低时间复杂度的代码？" class="headerlink" title="如何写出低时间复杂度的代码？"></a>如何写出低时间复杂度的代码？</h3><p><strong>1.灵活使用break、continue、return</strong></p><p>&emsp;&emsp;这三个关键字一般用在减少循环次数，达到目的，立即退出。如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],target=<span class="number">2</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  <span class="keyword">while</span>(len--)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[len]===target)&#123;</span><br><span class="line">      <span class="comment">// 不再继续后续循环</span></span><br><span class="line">      <span class="keyword">return</span> len</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p><strong>2.空间换时间</strong>  </p><p>   常见的做法是利用缓存，把上次的计算结果存起来，避免重复计算。</p><p><strong>3.更优的数据结构与算法</strong></p><p>  根据不同的情况选择合适的数据结构与算法，例如，如果需要频繁的从一组数据中通过关键key查询出数据，如果要从json对象和数组中选择，那么可以优先考虑使用json对象来避免数组的遍历查询。</p><h2 id="内存-空间复杂度"><a href="#内存-空间复杂度" class="headerlink" title="内存-空间复杂度"></a>内存-空间复杂度</h2><p>&emsp;&emsp;评价一段代码，除了看它执行需要多少时间，还需要看看需要多少空间，谈到代码的空间占用，必须就得知道JS的内存管理</p><p>&emsp;&emsp;JS的内存管理分为三部分：</p><ul><li><p>内存分配。<br>&emsp;&emsp;这里包含包含代码本身以及静态数据与动态数据所需要的内存，其中代码本身与静态数据会分配在stack上，可变的动态数据会分配在heap上</p></li><li><p>使用分配的内存。  </p></li><li>内存回收。  </li></ul><p>这里，放一张JS Runtime的图</p><img src="/2019/03/04/CodeReview过程中关于JS代码性能的随想整理/runtime.png" title="runtime"><h3 id="静态内存分配"><a href="#静态内存分配" class="headerlink" title="静态内存分配"></a>静态内存分配</h3><p>&emsp;&emsp;是指stack中内存的分配，基础数据类型的数据就放在stack中。另外，stack是有固定大小的，超过stack的长度，就会报错，所以必须得节约着用。</p><h4 id="爆栈"><a href="#爆栈" class="headerlink" title="爆栈"></a>爆栈</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 故意来一次爆栈体验</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  foo()</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">VM201:<span class="number">1</span> Uncaught <span class="built_in">RangeError</span>: Maximum call stack size exceeded</span><br><span class="line">    at foo (<span class="xml"><span class="tag">&lt;<span class="name">anonymous</span>&gt;</span>:1:13)</span></span><br><span class="line">    at foo (&lt;anonymous&gt;:2:3)</span><br><span class="line">    at foo (&lt;anonymous&gt;:2:3)</span><br><span class="line">    at foo (&lt;anonymous&gt;:2:3)</span><br><span class="line">    at foo (&lt;anonymous&gt;:2:3)</span><br><span class="line">    at foo (&lt;anonymous&gt;:2:3)</span><br><span class="line">    at foo (&lt;anonymous&gt;:2:3)</span><br><span class="line">    at foo (&lt;anonymous&gt;:2:3)</span><br><span class="line">    at foo (&lt;anonymous&gt;:2:3)</span><br><span class="line">    at foo (&lt;anonymous&gt;:2:3)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们是怎么达到爆栈目的的呢？因为所有的函数调用，在内存中都存在一个函数调用栈，我们不断无结束条件的递归调用，最终撑破了stack。</p><p>如图所示：<br><img src="/2019/03/04/CodeReview过程中关于JS代码性能的随想整理/stackoverflow.png" title="stackoverflow"></p><h4 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h4><p>可能你会问怎么证明函数调用栈的存在呢？请看如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'function call stack'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    second();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    first();</span><br><span class="line">&#125;</span><br><span class="line">start();</span><br><span class="line"><span class="comment">// 结果如下</span></span><br><span class="line">VM266:<span class="number">2</span> Uncaught <span class="built_in">Error</span>: <span class="function"><span class="keyword">function</span> <span class="title">call</span> <span class="title">stack</span></span></span><br><span class="line"><span class="function">    <span class="title">at</span> <span class="title">second</span> (<span class="params">&lt;anonymous&gt;:<span class="number">2</span>:<span class="number">11</span></span>)</span></span><br><span class="line"><span class="function">    <span class="title">at</span> <span class="title">first</span> (<span class="params">&lt;anonymous&gt;:<span class="number">5</span>:<span class="number">5</span></span>)</span></span><br><span class="line"><span class="function">    <span class="title">at</span> <span class="title">start</span> (<span class="params">&lt;anonymous&gt;:<span class="number">8</span>:<span class="number">5</span></span>)</span></span><br><span class="line"><span class="function">    <span class="title">at</span> &lt;<span class="title">anonymous</span>&gt;:10:1</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;从上面的运行结果可以看出函数调用栈的顺序，start先入栈，接着first，最后second；打印顺序为首选打印second，最后打印start；满足栈的先进后出的数据结构特性。</p><h4 id="内存占用"><a href="#内存占用" class="headerlink" title="内存占用"></a>内存占用</h4><p>&emsp;&emsp;了解上面知识点的核心目的还是在于指导我们写出更优的代码，我们知道基本数据类型都放在栈中，对象都放在堆中。另外，通过《JavaScript权威指南》第六版第三章可以知道，js中的数字都是双精度类型，占64位8个字节的空间，字符占16位2个字节的空间。</p><p>&emsp;&emsp;有了这个知识，我们就可以估算出我们的代码大致占用了多少内存空间。</p><p>&emsp;&emsp;这些毕竟都是理论知识，不禁要怀疑一下，的确是这样的吗？下面我们利用爆栈的原理，通过代码实际瞧瞧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    count++</span><br><span class="line">    foo()</span><br><span class="line">  &#125;</span><br><span class="line">  foo()</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(count)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最终的打印结果为：15662</span></span><br></pre></td></tr></table></figure><p>我们知道一个数字占8个字节，栈的大小固定；稍微变更一下代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> local = <span class="number">58</span> <span class="comment">//数字，占8个字节</span></span><br><span class="line">    count++</span><br><span class="line">    foo()</span><br><span class="line">  &#125;</span><br><span class="line">  foo()</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(count)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最终的打印结果为：13922</span></span><br></pre></td></tr></table></figure></p><p>那么我们可以利用如下方法算一下栈的总大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">N = 栈中单个元素的大小</span><br><span class="line">15662 * N = 13922 * (N + 8) // 两次函数调用，栈的总大小相等</span><br><span class="line">(15662 - 13922) * N = 13922 * 8</span><br><span class="line">1740 * N = 111376</span><br><span class="line">N = 111376 / 1740 = 64 bytes</span><br><span class="line">Total stack size = 15662 * 64 = 1002368 = 0.956 MB</span><br></pre></td></tr></table></figure></p><p>注：不通环境可能结果不太一样</p><p>接下来，我们来确定一下数字类型是否占8个字节空间<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//数字，占8个字节,这里就占16个字节</span></span><br><span class="line">    <span class="keyword">let</span> local = <span class="number">58</span></span><br><span class="line">    <span class="keyword">let</span> local2 = <span class="number">85</span></span><br><span class="line">    count++</span><br><span class="line">    foo()</span><br><span class="line">  &#125;</span><br><span class="line">  foo()</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(count)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 最终的打印结果为：12530</span></span><br></pre></td></tr></table></figure></p><p>计算一下Number的内存占用大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 总的栈内存空间/栈中元素数量 = 单个栈元素大小</span><br><span class="line">1002368/12530 = 80</span><br><span class="line">// 对比不带任何额外变量的代码，单个栈元素大小是64，这里新增两个16，加起来正好为80</span><br><span class="line">80 = 64+8+8</span><br></pre></td></tr></table></figure></p><blockquote><p>经实际验证，在Chrome、Safari、Node环境下，不论变量的值是什么类型，在stack中都占8个字节。<strong>对于字符串貌似跟预期不太一样</strong>，不论多长的字符串实践表明在stack中都占8个字节，<strong>怀疑浏览器默认把字符串转换为了对象，最终占用heap空间</strong></p></blockquote><h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><p>&emsp;&emsp;是指heap中内存的分配，所有对象都放在heap中，stack中只放对象的引用。</p><p>这里有一篇数组占用多少内存空间的文章：<a href="http://www.mattzeunert.com/2016/07/24/javascript-array-object-sizes.html" target="_blank" rel="noopener">How much memory do JavaScript arrays take up in Chrome?</a></p><h3 id="如何写出低内存占用的代码？"><a href="#如何写出低内存占用的代码？" class="headerlink" title="如何写出低内存占用的代码？"></a>如何写出低内存占用的代码？</h3><p>&emsp;&emsp;低内存占用，从静态内存分配方面可以考虑，尽量少的使用基础类型变量；从动态内存分配的角度，让代码更简洁、不要毫无节制的<code>new一个对象</code>、少在对象放东西；</p><p>下面是一些小技巧：<br><strong>1.三目运算符</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件赋值</span></span><br><span class="line"><span class="keyword">if</span>(a===<span class="number">1</span>)&#123;</span><br><span class="line">  b = <span class="string">'aa'</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  b = <span class="string">'bb'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可简化为</span></span><br><span class="line">b = a===<span class="number">1</span> ? <span class="string">'aa'</span> : <span class="string">'bb'</span></span><br></pre></td></tr></table></figure></p><p><strong>2.直接返回结果</strong><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(a===<span class="number">1</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可简化为</span></span><br><span class="line"><span class="keyword">return</span> a===<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>一时半会儿想不到好的样例，上面的样例至少节约了代码的空间占用!……欢迎评论补充……</p><h3 id="内存回收"><a href="#内存回收" class="headerlink" title="内存回收"></a>内存回收</h3><p>&emsp;&emsp;我的理解是，当函数调用栈为空时，占用的占内存随之清空；只有堆内存中的数据才需要通过垃圾回收机制来回收。</p><p>常见的垃圾回收算法如下：</p><ul><li><p>引用计数<br>对没有对象的引用计数，如果没有任何外部引用时，则清除该对象；引用计数算法有一个弊端就是<strong>无法清除循坏依赖的对象</strong>。</p></li><li><p>标记清除：<br>每次回收，从根对象开始遍历，能遍历到的对象则记为可用，不能遍历到的对象则为需要垃圾回收的对象。此种算法能够解决对象循环依赖的问题。</p></li><li>综合算法：<br>实际上垃圾回收是一个很复杂的过程，垃圾回收器会根据内存的不通情况采取不同的垃圾回收算法，来实现效率的最大化。</li></ul><p>这里有一篇垃圾回收的文章：<a href="http://www.jayconrod.com/posts/55/a-tour-of-v8-garbage-collection" target="_blank" rel="noopener">A tour of V8: Garbage Collection</a> 已经被翻译为了中文，点进去就知道了。</p><h3 id="如何避免内存溢出？"><a href="#如何避免内存溢出？" class="headerlink" title="如何避免内存溢出？"></a>如何避免内存溢出？</h3><p>&emsp;&emsp;从上面的垃圾回收机制不难看出，当某些情况内存无法被回收且不断增加时，内存溢出就会产生。下面是几种常见的会有内存溢出风险的代码。</p><p><strong>1.控制全局变量</strong><br>从垃圾回收的原理我们可以知道，全局变量肯定是不会被回收的。所以我们应当尽量把数据绑定到全局变量上，更应该避免通过用户操作持续的增加全局变量数据的大小。<br>另外还需要特别注意意外的全局变量产生，例如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    a = <span class="string">"some text"</span>;</span><br><span class="line">    <span class="keyword">this</span>.b = <span class="string">"some text"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 会在window对象上新增a，b属性</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure></p><p><strong>2.setInterval注意内存占用</strong><br>由于setInterval一直处于活动状态，造成它所依赖的数据一直无法回收。特别容易出现数据越积越多情况</p><p><strong>3.注意闭包</strong><br>闭包里依赖了主函数的数据，为了让闭包续继访问到数据，必须避免当主函数退出时，回收闭包依赖主函数的变量所对应的数据，从而带来内存溢出风险。</p><blockquote><p>资料：</p><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management" target="_blank" rel="noopener">JS内存管理</a></li><li><a href="https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf" target="_blank" rel="noopener">How JavaScript works: an overview of the engine, the runtime, and the call stack</a></li><li><a href="https://glebbahmutov.com/blog/javascript-stack-size/" target="_blank" rel="noopener">JavaScript stack size</a></li></ol></blockquote><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;团队中做code review有一段时间了，最近一直在思考一个问题，抛开业务逻辑，单纯从代码层面如何评价一段代码的好
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>人生中唯一的2018</title>
    <link href="http://muchstudy.com/2018/12/30/%E4%BA%BA%E7%94%9F%E4%B8%AD%E5%94%AF%E4%B8%80%E7%9A%842018/"/>
    <id>http://muchstudy.com/2018/12/30/人生中唯一的2018/</id>
    <published>2018-12-30T14:53:55.000Z</published>
    <updated>2019-09-28T14:58:48.235Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;2018年是十分重要的一年，忙碌的一年，有收获的一年。</p><h3 id="重要事件"><a href="#重要事件" class="headerlink" title="重要事件"></a>重要事件</h3><p>&emsp;&emsp;今年的3.15离开奋战了将近四年的中国软件，入职一家互联网公司，开启职业生涯第三段征程。</p><h3 id="收获的"><a href="#收获的" class="headerlink" title="收获的"></a>收获的</h3><ul><li>读书：《潮骚》《金阁寺》《万历十五年》《雪国》《小王子》，技术方面很可惜只读了一本《深入浅出Node》，《现代操作系统》读了前面几个章节未继续完整读完</li><li>从传统行业进入互联网行业，适应了互联网行业的工作与做事方式、思考方式；从连续三个季度的绩效A，看起来转型还算成功</li><li>对前端技术栈有了全面的了解与实践；Vue、React、Node、小程序、Webpack、持续集成、日志监控</li></ul><h3 id="留下的"><a href="#留下的" class="headerlink" title="留下的"></a>留下的</h3><p>&emsp;&emsp;今年都做了些什么？头脑里第一个冒出来的就是今年工作中做的事儿，今年是转行的第一年，不敢有丝毫的怠慢，大部分精力都投入到了工作中。</p><ul><li>参与了团队大部分方向十余个项目的开发</li><li>产出了移动端组件库V1.0版本，提供17个基础与业务组件；完整的在线文档与样例、构建与发布流程</li><li>推动持续集成在团队中的全面落地</li><li>产出了React开发模板、Node开发模板、统一的模板初始化CLI工具</li><li>推动日志监控的落地；Node服务错误日志监控与上报、前端错误日志监控与上报、小程序日志监控</li></ul><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul><li>今年博客产出锐减，希望在2019多思考多总结</li><li>英语学习中断了好长一段时间了，该坚持</li></ul><h3 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h3><ul><li>焦虑，希望在技术方面能有更多的提升。</li><li>多阅读、多思考，看清前路的方向。</li><li>时刻做好被淘汰的准备。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;2018年是十分重要的一年，忙碌的一年，有收获的一年。&lt;/p&gt;
&lt;h3 id=&quot;重要事件&quot;&gt;&lt;a href=&quot;#重要事件&quot; class=&quot;headerlink&quot; title=&quot;重要事件&quot;&gt;&lt;/a&gt;重要事件&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;今年的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>每一条评论都是我继续分享下去的源动力</title>
    <link href="http://muchstudy.com/2018/11/04/%E6%AF%8F%E4%B8%80%E6%9D%A1%E8%AF%84%E8%AE%BA%E9%83%BD%E6%98%AF%E6%88%91%E7%BB%A7%E7%BB%AD%E5%88%86%E4%BA%AB%E4%B8%8B%E5%8E%BB%E7%9A%84%E6%BA%90%E5%8A%A8%E5%8A%9B/"/>
    <id>http://muchstudy.com/2018/11/04/每一条评论都是我继续分享下去的源动力/</id>
    <published>2018-11-03T18:05:24.000Z</published>
    <updated>2019-09-27T18:08:09.277Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/11/04/每一条评论都是我继续分享下去的源动力/pinglun.png" title="pinglun"><p>&emsp;&emsp;近三年的时间里，断断续续的写了100多篇文章,很少有收到对文章的评论。因此，时不时总会感受到一丝丝的失落。这时，只能把它当作个人的总结归纳与成长。</p><p>&emsp;&emsp;看到上面这条评论，很欣慰……</p><p>&emsp;&emsp;平时自己也总读其他作者的文章，悄悄的去，然后悄悄的走。从今天开始，我觉得今后不论文章怎么样，多少都应该给原创者表示表示，留下点什么。一个赞、一个顶、一个评论，以示对作者无私分享的感激，鼓励他继续创作下去。</p><p>&emsp;&emsp;在CSDN上，之前觉得应当尽量只发一些技术类的文章，个人所思所想放在自己独立博客的一亩三分地上。甚至在最近，发现CSDN不断没落下去，广告奇多，准备放弃CSDN了。但是，看到这条评论后，我觉得还是应该留下来，同时，把有价值的所思所想分享出来，以让更多人看到为目的。对于技术分享，影响的范围可能只是一个bug的解决，而思想感悟的分享，影响面则会更大。而且，封闭的思想，注定也会是孤独的……</p><p>&emsp;&emsp;回想起决定写博客的初心，是想“把自己知道的东西分享出来，总会帮助到一些人”。现在看来，总会帮助到一些人这一宏大愿景，值得更坚定不移的执行下去。</p><p>&emsp;&emsp;每一条评论都是我继续分享下去的源动力，Thanks！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/11/04/每一条评论都是我继续分享下去的源动力/pinglun.png&quot; title=&quot;pinglun&quot;&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;近三年的时间里，断断续续的写了100多篇文章,很少有收到对文章的评论。因此，时不时总会感受到一丝丝的失落。这
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>前端getTime时区问题</title>
    <link href="http://muchstudy.com/2018/09/27/%E5%89%8D%E7%AB%AFgetTime%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98/"/>
    <id>http://muchstudy.com/2018/09/27/前端getTime时区问题/</id>
    <published>2018-09-26T18:01:12.000Z</published>
    <updated>2019-09-27T18:02:57.746Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>&emsp;&emsp;发现客户端选择下单时间后，提交订单并查看订单，在订单上显示的之前用户之前选择的时间存在1-N小时不等的差值。<br>&emsp;&emsp;例如：在下单页选择的<code>2018-01-01 10:00</code>,下单完成后，在订单详情页上面显示为<code>2018-01-01 09:00</code>,与实际的相差1小时。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>&emsp;&emsp;结合代码分析，发现当用户选择完时间后，会把选择的时间字符串调用getTime方法转换为毫秒数传给后端，后端再转换回时间字符串，在这个转换过程中，时间出现了差值。<br>&emsp;&emsp;最终，排查出问题原因为时区问题。还是以上面的样例为范本。当客户端的时区为<code>东京</code>，服务器端的时区为<code>北京</code>就能完美复该问题。<br>&emsp;&emsp;使用getTime方法获取时间的毫秒数时，实际上的获取当前的<code>格林威治时间</code>与<code>1970年1月1日</code>之间的毫秒数。东京时间为东9区，比标准时间快9个小时，所以在东京时区下时间转毫秒数就会减去9个小时才会为标准时间。此时北京时间与标准时间为8个小时的时差，客户端用东京时间转换为毫秒数（减9个小时），服务器端再用北京时间把毫秒数转换为时间字符串（加8个小时），此时就出现了时间差。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol><li>避免使用getTime，前后端直接使用时间字符串传输</li><li>前端对时区就行修复，代码如下</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getTruthTime</span> (<span class="params">time</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 服务器端时区，北京东八区（-8*60）</span></span><br><span class="line">  <span class="keyword">let</span> timezone = <span class="number">-480</span></span><br><span class="line">  <span class="comment">// 客户端实际时区(例如东京为东九区：-540)</span></span><br><span class="line">  <span class="keyword">let</span> offsetGMT = <span class="keyword">new</span> <span class="built_in">Date</span>().getTimezoneOffset()</span><br><span class="line">  <span class="comment">// 计算差值（用户在东京时区下下单，需要补回1小时）</span></span><br><span class="line">  <span class="keyword">let</span> adjust = timezone - offsetGMT</span><br><span class="line">  <span class="comment">// 需要修复的时间，支持字符串传参</span></span><br><span class="line">  <span class="keyword">let</span> nowDate = time ? <span class="keyword">new</span> <span class="built_in">Date</span>(time).getTime() : <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">  <span class="keyword">let</span> timeStamp = <span class="keyword">new</span> <span class="built_in">Date</span>(nowDate + adjust * <span class="number">60</span> * <span class="number">1000</span>)</span><br><span class="line">  <span class="keyword">return</span> timeStamp.getTime()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;发现客户端选择下单时间后，提交订单并查看订单，在订单上显示的之前用户之前选择的时间存在1-N小时不等的差值。&lt;br&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTTP协议与前后端联调</title>
    <link href="http://muchstudy.com/2018/08/11/HTTP%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%89%8D%E5%90%8E%E7%AB%AF%E8%81%94%E8%B0%83/"/>
    <id>http://muchstudy.com/2018/08/11/HTTP协议与前后端联调/</id>
    <published>2018-08-11T14:55:17.000Z</published>
    <updated>2020-05-11T14:58:17.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;在前后端分离的开发场景下，不可避免的会有前后端联调。在联调阶段，经常会遇到各式各样的问题，比如乱码问题、前端传的数据（字符串、数组、Json对象）后端无法正常解析等问题。<br>&emsp;&emsp;本文希望从源头着手，理清问题的根本原因，快速定位出现问题的位置，让前后端联调得心应手,让甩锅不再那么容易……</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>&emsp;&emsp;之所以这里会介绍一下HTTP协议，是因为前后端联调离不开HTTP。了解了HTTP协议，有助于更好的理解数据传输的流程，以及更好的分析出到底是在哪个环节出了问题，方便排查。</p><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>&emsp;&emsp;首先，http是一个无状态的协议，即每次客户端和服务端交互都是无状态的，通常使用cookie来保持状态。<br>&emsp;&emsp;下图为http请求与响应的大致结构（本部分配图均来自于《HTTP权威指南》）：</p><img src="/2018/08/11/HTTP协议与前后端联调/http请求与响应结构.png" title="http请求与响应结构"><blockquote><p>说明：<br>&emsp;&emsp;从上图中可以看出，HTTP请求大致分为三个部分：起始行、首部、主体。在请求起始行里，表面了请求方法、请求地址以及http协议的版本。另外，首部即是我们常说的http header。</p></blockquote><h3 id="2-HTTP-method"><a href="#2-HTTP-method" class="headerlink" title="2. HTTP method"></a>2. HTTP method</h3><p>&emsp;&emsp;下面是常用的HTTP请求方法以及介绍：</p><img src="/2018/08/11/HTTP协议与前后端联调/http方法.png" title="http方法"><blockquote><p>说明：</p><ol><li>我们常用的一般为get于post。</li><li>是否包含主体的意思为请求内容是否带主体。例如，在get方式下由于不带主体，只能使用url的方式传参。</li></ol></blockquote><h3 id="3-Content-type"><a href="#3-Content-type" class="headerlink" title="3. Content-type"></a>3. Content-type</h3><p>&emsp;&emsp;HTTP传输的内容类型与编码是由Content-Type来控制的，客户端与服务端通过它来识别与解析传输内容。</p><p>常见的Content-Type：  </p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>text/html</td><td>html类型</td></tr><tr><td>text/css</td><td>css文件</td></tr><tr><td>text/javascript</td><td>js文件</td></tr><tr><td>text/plain</td><td>文本文件</td></tr><tr><td>application/json</td><td>json类型</td></tr><tr><td>application/xml</td><td>xml类型</td></tr><tr><td>application/x-www-form-urlencoded</td><td>表单，表单提交时的默认类型</td></tr><tr><td>multipart/form-data</td><td>附件类型，一般为表单文件上传</td></tr></tbody></table><p>&emsp;&emsp;前面六个为常见的文件类型，后面两个为表单数据提交时类型。我们ajax提交数据时一般为<code>Content-Type:application/x-www-form-urlencoded;charset=utf-8</code>,以此声明了本次请求的数据格式与数据编码方式。需要额外说明的是，application/x-www-form-urlencoded此种类型比较特殊，数据发送时会把表单数据拼接成类似于<code>a=1&amp;b=2&amp;c=3</code>的格式，如果数据中存在空格或特殊字符，会进行转换，标准文档在<br><a href="https://www.w3.org/TR/html4/interact/forms.html#h-17.13.4" target="_blank" rel="noopener">这里</a>，更详细的在 <a href="https://www.ietf.org/rfc/rfc1738.txt" target="_blank" rel="noopener">[RFC1738]</a>可见。</p><blockquote><p>相关资料：</p><ol><li>Content-type对照表：<a href="http://tool.oschina.net/commons" target="_blank" rel="noopener">http://tool.oschina.net/commons</a></li><li>Form content types：<a href="https://www.w3.org/TR/html4/interact/forms.html#h-17.13.4" target="_blank" rel="noopener">https://www.w3.org/TR/html4/interact/forms.html#h-17.13.4</a></li><li>字符解码时加号解码为空格问题探究：<a href="http://muchstudy.com/2017/12/06/字符解码时加号解码为空格问题探究/">http://muchstudy.com/2017/12/06/字符解码时加号解码为空格问题探究/</a></li><li>理解HTTP之Content-Type：<a href="http://homeway.me/2015/07/19/understand-http-about-content-type/" target="_blank" rel="noopener">http://homeway.me/2015/07/19/understand-http-about-content-type/</a></li></ol></blockquote><h3 id="4-字符集与编码"><a href="#4-字符集与编码" class="headerlink" title="4. 字符集与编码"></a>4. 字符集与编码</h3><p>&emsp;&emsp;前后端联调之所以需要了解这部分，是因为在前后端的数据交互中，经常会碰到乱码的问题，了解了这块内容，对于解决乱码问题就手到擒来了。</p><p>一图胜千言：</p><img src="/2018/08/11/HTTP协议与前后端联调/字符编码与解码.png" title="字符编码与解码"><p>&emsp;&emsp;在图中，charset的值为<code>iso-8859-6</code>，详细介绍了一个文字从编码到解码，再到显示的完整过程。</p><blockquote><p>相关资料：</p><ol><li>字符集列表：<a href="https://www.iana.org/assignments/character-sets/character-sets.xhtml" target="_blank" rel="noopener">https://www.iana.org/assignments/character-sets/character-sets.xhtml</a></li><li>字符编码详解:<a href="http://muchstudy.com/2016/08/26/字符编码详解/">http://muchstudy.com/2016/08/26/字符编码详解/</a></li></ol></blockquote><h2 id="前端部分"><a href="#前端部分" class="headerlink" title="前端部分"></a>前端部分</h2><p>&emsp;&emsp;前端部分负责发起HTTP请求，前端常用的HTTP请求工具类有<code>jquery</code>、<code>axios</code>、<code>fetch</code>。实际上jquery与axios的底层都是使用<code>XMLHttpRequest</code>来发起http请求的，fetch属于浏览器内置的发起http请求方法。</p><p>前端ajax请求样例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/qs/6.5.1/qs.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>前端发起HTTP请求样例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用XMLHttpRequest<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"xhrGet()"</span>&gt;</span>XHR Get<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"xhrPost()"</span>&gt;</span>XHR Post<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用axios<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"axiosGet()"</span>&gt;</span>Axios Get<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"axiosPost()"</span>&gt;</span>Axios Post<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用fetch<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"fetchGet()"</span>&gt;</span>Fetch Get<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"fetchPost()"</span>&gt;</span>Fetch Post<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 封装XMLHttpRequest发起ajax请求</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> Axios = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;url, method, data&#125;</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            xhr.open(method, url, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// readyState == 4说明请求已完成</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="comment">// 从服务器获得数据</span></span></span><br><span class="line"><span class="undefined">                    resolve(xhr.responseText)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(data)&#123;</span></span><br><span class="line"><span class="javascript">            xhr.setRequestHeader(<span class="string">'Content-type'</span>, <span class="string">'application/x-www-form-urlencoded;charset=utf-8'</span>);</span></span><br><span class="line"><span class="undefined">            xhr.send(Qs.stringify(data));</span></span><br><span class="line"><span class="javascript">            <span class="comment">//xhr.send("a=1&amp;b=2");</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">//xhr.send(JSON.stringify(data));</span></span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="undefined">            xhr.send();</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 需要post提交的数据</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> postData = &#123;</span></span><br><span class="line"><span class="javascript">    firstName: <span class="string">'Fred'</span>,</span></span><br><span class="line"><span class="javascript">    lastName: <span class="string">'Flintstone'</span>,</span></span><br><span class="line"><span class="javascript">    fullName: <span class="string">'姓 名'</span>,</span></span><br><span class="line"><span class="undefined">    arr:[1,2,3]</span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 请求地址</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> url = <span class="string">'DemoServlet'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">xhrGet</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">Axios(&#123;</span></span><br><span class="line"><span class="javascript">url: url+<span class="string">'?a=1'</span>,</span></span><br><span class="line"><span class="javascript">method: <span class="string">'GET'</span></span></span><br><span class="line"><span class="javascript">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">xhrPost</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">Axios(&#123;</span></span><br><span class="line"><span class="undefined">url: url,</span></span><br><span class="line"><span class="javascript">method: <span class="string">'POST'</span>,</span></span><br><span class="line"><span class="undefined">data: postData</span></span><br><span class="line"><span class="javascript">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">axiosGet</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 默认Content-Type = null</span></span></span><br><span class="line"><span class="undefined">axios.get(url, &#123;</span></span><br><span class="line"><span class="undefined">params: &#123;</span></span><br><span class="line"><span class="javascript">      ID: <span class="string">'12345'</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">  &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">axiosPost</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 默认Content-Type = application/json;charset=UTF-8</span></span></span><br><span class="line"><span class="javascript">axios.post(url, postData).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">  &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 默认Content-Type = application/x-www-form-urlencoded</span></span></span><br><span class="line"><span class="undefined">axios(&#123;</span></span><br><span class="line"><span class="javascript">  method: <span class="string">'post'</span>,</span></span><br><span class="line"><span class="undefined">  url: url,</span></span><br><span class="line"><span class="undefined">  data: Qs.stringify(postData)</span></span><br><span class="line"><span class="javascript">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">fetchGet</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">fetch(url+<span class="string">'?id=1'</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.text()).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="undefined">&#125;)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">fetchPost</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">fetch(url, &#123;</span></span><br><span class="line"><span class="javascript">    method: <span class="string">'post'</span>,</span></span><br><span class="line"><span class="undefined">    body: postData</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  .then(<span class="function"><span class="params">res</span> =&gt;</span> res.text())</span></span><br><span class="line"><span class="javascript">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'Request failed'</span>, error);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>相关资料:  </p><ol><li>XMLHttpRequest Standard：<a href="https://xhr.spec.whatwg.org/" target="_blank" rel="noopener">https://xhr.spec.whatwg.org/</a></li><li>Fetch Standard：<a href="https://fetch.spec.whatwg.org/" target="_blank" rel="noopener">https://fetch.spec.whatwg.org/</a></li><li>XMLHttpRequest介绍：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a></li><li>fetch介绍：<a href="https://developers.google.com/web/updates/2015/03/introduction-to-fetch" target="_blank" rel="noopener">https://developers.google.com/web/updates/2015/03/introduction-to-fetch</a></li><li>fetch 简介: 新一代 Ajax API： <a href="https://juejin.im/entry/574512b7c26a38006c43567c" target="_blank" rel="noopener">https://juejin.im/entry/574512b7c26a38006c43567c</a></li><li>axios源码：<a href="https://github.com/axios/axios" target="_blank" rel="noopener">https://github.com/axios/axios</a></li></ol></blockquote><h2 id="后端部分"><a href="#后端部分" class="headerlink" title="后端部分"></a>后端部分</h2><p>&emsp;&emsp;这里使用Java平台为样例来介绍后端是如何接收HTTP请求的。在J2EE体系下，数据的接收与返回实际上都是通过<code>Servlet</code>来完成的。</p><p>Servlet接收与返回数据样例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DemoServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"-----------------start----------------"</span>);</span><br><span class="line">System.out.println(<span class="string">"Content-Type:"</span> + request.getContentType());</span><br><span class="line"><span class="comment">// 打印请求参数</span></span><br><span class="line">System.out.println(<span class="string">"=========请求参数========"</span>);</span><br><span class="line">Enumeration&lt;String&gt; em = request.getParameterNames();</span><br><span class="line"><span class="keyword">while</span> (em.hasMoreElements()) &#123;</span><br><span class="line">String name = (String) em.nextElement();</span><br><span class="line">String value = request.getParameter(name);</span><br><span class="line">System.out.println(name + <span class="string">" = "</span> + value);</span><br><span class="line">response.getWriter().append(name + <span class="string">" = "</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从inputStream中获取</span></span><br><span class="line">System.out.println(<span class="string">"===========inputStream==========="</span>);</span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">String line = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BufferedReader reader = request.getReader();</span><br><span class="line"><span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>)</span><br><span class="line">sb.append(line);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">/* report an error */</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sb.toString());</span><br><span class="line">System.out.println(<span class="string">"-----------------end----------------"</span>);</span><br><span class="line">response.getWriter().append(sb.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>相关资料：</p><ol><li>servlet的本质是什么，它是如何工作的？：<a href="https://www.zhihu.com/question/21416727" target="_blank" rel="noopener">https://www.zhihu.com/question/21416727</a></li><li>tomcat是如何处理http请求的？：<a href="https://blog.csdn.net/qq_38182963/article/details/78660777" target="_blank" rel="noopener">https://blog.csdn.net/qq_38182963/article/details/78660777</a></li></ol></blockquote><h2 id="结果汇总"><a href="#结果汇总" class="headerlink" title="结果汇总"></a>结果汇总</h2><table><thead><tr><th>请求方式</th><th>method</th><th>请求Content-Type</th><th>数据格式</th><th>后端收到的Content-Type</th><th>能否通过getParameter获取数据</th><th>能否通过inputStream获取数据</th><th>后端接收类型</th></tr></thead><tbody><tr><td>XHR</td><td>Get</td><td>未设置</td><td>url传参</td><td>null</td><td>能</td><td>否</td><td>键值对</td></tr><tr><td>XHR</td><td>Post</td><td>未设置</td><td>json字符串</td><td>text/plain;charset=UTF-8</td><td>否</td><td>能</td><td>字符串</td></tr><tr><td>XHR</td><td>Post</td><td>未设置</td><td>a=1&amp;b=2格式字符串</td><td>text/plain;charset=UTF-8</td><td>否</td><td>能</td><td>字符串</td></tr><tr><td>XHR</td><td>Post</td><td>application/x-www-form-urlencoded</td><td>a=1&amp;b=2格式字符串</td><td>application/x-www-form-urlencoded</td><td>能</td><td>否</td><td>后端收到key为a和b，值为1和2的键值对</td></tr><tr><td>XHR</td><td>Post</td><td>application/x-www-form-urlencoded</td><td>json字符串</td><td>application/x-www-form-urlencoded</td><td>能</td><td>否</td><td>后端收到一个key为json数据，值为空的键值对</td></tr><tr><td>axios</td><td>Get</td><td>未设置</td><td>url传参</td><td>null</td><td>能</td><td>否</td><td>键值对</td></tr><tr><td>axios</td><td>Post</td><td>未设置</td><td>json对象</td><td>application/json;charset=UTF-8</td><td>否</td><td>能</td><td>json字符串</td></tr><tr><td>axios</td><td>Post</td><td>未设置</td><td>数组</td><td>application/json;charset=UTF-8</td><td>否</td><td>能</td><td>数组字符串</td></tr><tr><td>axios</td><td>Post</td><td>未设置</td><td>a=1&amp;b=2格式字符串</td><td>application/x-www-form-urlencoded</td><td>能</td><td>否</td><td>键值对</td></tr><tr><td>fetch</td><td>Get</td><td>未设置</td><td>url传参</td><td>null</td><td>能</td><td>否</td><td>键值对</td></tr><tr><td>fetch</td><td>Post</td><td>未设置</td><td>a=1&amp;b=2格式字符串</td><td>text/plain;charset=UTF-8</td><td>否</td><td>能</td><td>a=1&amp;b=2字符串</td></tr><tr><td>fetch</td><td>Post</td><td>未设置</td><td>json对象</td><td>text/plain;charset=UTF-8</td><td>否</td><td>能</td><td>后端收到[object Object]字符串</td></tr><tr><td>fetch</td><td>Post</td><td>application/x-www-form-urlencoded;charset=UTF-8</td><td>a=1&amp;b=2格式字符串</td><td>application/x-www-form-urlencoded;charset=UTF-8</td><td>能</td><td>否</td><td>键值对</td></tr></tbody></table><p>&emsp;&emsp;通过上面的表格内容可以发现，凡是使用get或者content-type为<code>application/x-www-form-urlencoded</code>发送数据，在后端servlet都会默认把数据转换为键值对。否则，需要从输入流中获取前端发送过来的字符串数据，再使用fastJSON等后端工具类转换为Java实体类或集合对象。</p><h2 id="联调工具Postman"><a href="#联调工具Postman" class="headerlink" title="联调工具Postman"></a>联调工具Postman</h2><p>&emsp;&emsp;可以在chrome的应用商店中下载Postman插件，在浏览器中模拟HTTP请求。Postman的界面如下：</p><img src="/2018/08/11/HTTP协议与前后端联调/postman.png" title="postman"><blockquote><p>说明：</p><ol><li>发送get请求直接在url上带上参数，接着点击send即可</li><li>发送post请求，数据有三种传输方式；<code>form-data</code>、<code>x-www-form-urlencoded</code>、<code>raw</code>（未经加工的）</li></ol><table><thead><tr><th>类型</th><th>Content-Type</th><th>说明</th></tr></thead><tbody><tr><td>form-data</td><td>Content-Type: multipart/form-data</td><td>form表单的附件提交方式</td></tr><tr><td>x-www-form-urlencoded</td><td>Content-Type: application/x-www-form-urlencoded</td><td>form表单的post提交方式</td></tr><tr><td>raw</td><td>Content-Type: text/plain;charset=UTF-8</td><td>文本的提交方式</td></tr></tbody></table></blockquote><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在前后端分离的开发场景下，不可避免的会有前后端联调。在联调阶段，经常会遇到各式各样的问题，比如乱码问题、前端传的数据
      
    
    </summary>
    
      <category term="HTTP" scheme="http://muchstudy.com/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>Gitlab 8.x runner安装与配置</title>
    <link href="http://muchstudy.com/2018/07/13/Gitlab-8-x-runner%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://muchstudy.com/2018/07/13/Gitlab-8-x-runner安装与配置/</id>
    <published>2018-07-13T10:41:31.000Z</published>
    <updated>2018-07-16T02:34:03.802Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;Gitlab 8.x之后默认集成了Gitlab CI，意味着支持了持续集成相关功能。每一次集成操作都需要对应的runner来跑代码构建、测试、发布等操作。Runner实际上就是为Gitlab的持续集成指定一个环境。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>官方文档地址：<a href="https://docs.gitlab.com/runner/install/" target="_blank" rel="noopener">https://docs.gitlab.com/runner/install/</a></p></blockquote><p>&emsp;&emsp;Gitlab Runner的版本需要跟Gitlab对应,<a href="https://docs.gitlab.com/runner/" target="_blank" rel="noopener">这里</a>有一个对照表。最新的版本对照表中并没有Gitlab8.X对应的Runner版本，查了一下Gitlab8.X对应的Runner版本为<code>1.X</code>,所以这里选择<code>runner 1.11.2</code>版本。</p><p>&emsp;&emsp;这里运行Gitlab与Runner的环境均为CentOS，之前尝试在windows上安装runner，对接Linux上的Gitlab，发现在Gitlab runner运行的控制台出现乱码问题。</p><p>0.准备</p><p>在opt下创建gitlab-runner目录并进入该目录，后续执行的操作与所有的资源都放在这个目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">mkdir gitlab-runner</span><br><span class="line"><span class="built_in">cd</span> gitlab-runner/</span><br></pre></td></tr></table></figure><p>1.下载</p><p>下载安装资源到gitlab-runner目录中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget https://gitlab-ci-multi-runner-downloads.s3.amazonaws.com/v1.11.2/binaries/gitlab-ci-multi-runner-linux-386</span><br></pre></td></tr></table></figure><p>2.添加运行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x gitlab-ci-multi-runner-linux-386</span><br></pre></td></tr></table></figure><p>3.创建用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd --comment <span class="string">'GitLab Runner'</span> --create-home gitlab-runner --shell /bin/bash</span><br></pre></td></tr></table></figure><p>4.安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./gitlab-ci-multi-runner-linux-386 install --user=gitlab-runner --working-directory=/opt/gitlab-runner</span><br><span class="line">sudo gitlab-ci-multi-runner-linux-386 start</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>&emsp;&emsp;经过上面的步骤，Runner就已经跑起来了，剩下的还需要Runner与项目对接起来。Runner的类型分为<a href="https://docs.gitlab.com/ee/ci/runners/README.html" target="_blank" rel="noopener">Shared, specific and group Runners</a>。这里选择specific类型，即单独的项目使用。</p><p>&emsp;&emsp;在Gitlab项目的setting-runner中,配置过程中会使用到<code>url</code>和<code>token</code>如下所示：</p><p><div style="text-align:center"><img src="/2018/07/13/Gitlab-8-x-runner安装与配置/setting.png"><div></div></div></p><p>1.运行register命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gitlab-ci-multi-runner-linux-386 register</span><br></pre></td></tr></table></figure><p>之后就按照提示就行了</p><p>2.输入url地址<br>3.输入token<br>4.输入描述，任意即可<br>5.输入标签，这里直接Enter跳过<br>6.选择Runner executor，这里选择shell  </p><p>到这里就已经注册成功了，输入<code>./gitlab-ci-multi-runner-linux-386 list</code>就能看到上面的注册的条目。</p><p>官方文档地址：<a href="https://docs.gitlab.com/runner/register/index.html" target="_blank" rel="noopener">https://docs.gitlab.com/runner/register/index.html</a></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>&emsp;&emsp;上面两个步骤做完后，此时按理说Gitlab就能调用Runner跑持续集成了，实际当中还会碰到其它问题，整理如下。</p><h3 id="权限问题"><a href="#权限问题" class="headerlink" title="权限问题"></a>权限问题</h3><p>&emsp;&emsp;如果在Gitlab的Build控制台上报<code>无法创建文件夹</code>、<code>无法运行bash</code>等,证明创建的<code>GitLab Runner</code>权限不够。<br>此时，我这里是修改GitLab Runner的权限跟root保持一致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/passwd</span><br></pre></td></tr></table></figure><p>通过上面命令可以编辑用户对应的权限，我这里打开默认为<code>gitlab-runner:x:601:601:GitLab Runner:/home/gitlab-runner:/bin/bash</code>,权限组修改为跟root的一致<code>gitlab-runner:x:0:0:GitLab Runner:/home/gitlab-runner:/bin/bash</code>。(root的权限组名为0)</p><blockquote><p>这里在另外一台机器上还碰到这样修改了也不好使的问题，最终gitlab-runner install的时候，直接指定为root，而不新创建用户。</p></blockquote><h3 id="环境问题"><a href="#环境问题" class="headerlink" title="环境问题"></a>环境问题</h3><p>由于Runner运行需要环境支撑，比如git、node、npm等，需要在Runner所在的服务器上准备好所有的依赖。</p><ul><li>Linux Node安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://nodejs.org/dist/v8.11.3/node-v8.11.3-linux-x64.tar.xz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xf  node-v8.11.3-linux-x64.tar.xz</span><br><span class="line"><span class="comment"># 建立软链接，实现全局访问</span></span><br><span class="line">ln -s /opt/gitlab-runner/node-v8.11.3-linux-x64/bin/node /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line">ln -s /opt/gitlab-runner/node-v8.11.3-linux-x64/bin/npm /usr/<span class="built_in">local</span>/bin/npm</span><br></pre></td></tr></table></figure><p>此时，输入<code>node -v</code>就能看到node的版本了。</p><p>使用软连接方式可能对非root用户无效，可以转而使用配置环境变量的方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment">#set for nodejs,新增NODE_HOME并放到PATH上</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/soft/java</span><br><span class="line"><span class="built_in">export</span> NODE_HOME=/opt/gitlab-runner/node-v8.11.3-linux-x64  </span><br><span class="line"><span class="built_in">export</span> CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib:<span class="variable">$JAVA_HOME</span>/jre/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$NODE_HOME</span>/bin</span><br></pre></td></tr></table></figure><blockquote><p>在vim环境下点击i进入插入状态,编辑完成后按Esc键,然后输入 :wq 按回车保存退出。</p></blockquote><p>备注：内外环境还需修改NPM的镜像源，比如修改为<code>npm config set registry https://registry-npm.daojia-inc.com/</code></p><h2 id="附录-部分GitLab-Runner常用命令"><a href="#附录-部分GitLab-Runner常用命令" class="headerlink" title="附录 部分GitLab-Runner常用命令"></a>附录 部分GitLab-Runner常用命令</h2><p>1.gitlab-runner帮助：gitlab-runner –help</p><p>2.gitlab-runner指定命令帮助：gitlab-runner <commond> –help</commond></p><p>3.注册runner：gitlab-runner register</p><p>4.注销runner：gitlab-runner unregister</p><p>5.当前运行的runner：gitlab-runner list</p><p>6.启动runner：gitlab-runner start</p><p>7.停止runner：gitlab-runner stop</p><p>8.重启runner：gitlab-runner restart</p><p>9.查询runner状态：gitlab-runner status</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Gitlab 8.x之后默认集成了Gitlab CI，意味着支持了持续集成相关功能。每一次集成操作都需要对应的run
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一个由line-height引发的血案与思考</title>
    <link href="http://muchstudy.com/2018/05/06/%E4%B8%80%E4%B8%AA%E7%94%B1line-height%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    <id>http://muchstudy.com/2018/05/06/一个由line-height引发的血案与思考/</id>
    <published>2018-05-06T11:32:32.000Z</published>
    <updated>2020-05-11T14:58:24.883Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爆炸"><a href="#爆炸" class="headerlink" title="爆炸"></a>爆炸</h2><p>&emsp;&emsp;最近UI走查，发现页面中所有包含文字区块的高度与设计稿中的高度完全不一致，然后UI妹子就爆炸了!</p><p>&emsp;&emsp;找了一下原因，发现是由于UI设计稿中设计的文字大部分是<code>font-size:24px;line-height:24px</code>,代码实现时为了不至于每处都写一遍字体大小，故直接在根节点上统一设置字体与字体大小为24px，小部分不一致的地方再单独设置字体大小，从而忽略了设置<code>line-height</code>为字体的高度。造成的结果就是文字所在的行的行高高于设计稿中的行高。</p><h2 id="为什么文字行高与字体大小不相等呢？"><a href="#为什么文字行高与字体大小不相等呢？" class="headerlink" title="为什么文字行高与字体大小不相等呢？"></a>为什么文字行高与字体大小不相等呢？</h2><p>&emsp;&emsp;翻了一下line-height的<a href="https://www.w3.org/TR/CSS2/visudet.html#propdef-line-height" target="_blank" rel="noopener">官方说明</a>，如下所示：</p><div style="text-align:center"><img src="/2018/05/06/一个由line-height引发的血案与思考/1.jpg"><div><br><br>&emsp;&emsp;文档里说line-height的默认值为<code>normal</code>,给<code>normal</code>的推荐设置值为<code>1.0到1.2之间</code>。相当于如果设置了字体的大小而不设置line-height,那么行高默认就为字体的1.0-1.2之间的一个倍数。<br><br>&emsp;&emsp;<strong>那么，这个倍数到底具体是多少呢？</strong><br><br>&emsp;&emsp;在chrome的控制台里跟踪了一下，看到项目中引入了<code>normalize.css</code>来初始化浏览器的默认css样式。其中，就设置html的<code>line-height</code>为<code>1.15</code>。<br><br>## 为什么normalize.css设置line-height默认为1.15？<br><br>&emsp;&emsp;翻了一下github中normalize.css的issues,在593号issues里找到了答案，地址在<a href="https://github.com/necolas/normalize.css/issues/593" target="_blank" rel="noopener">这里</a>。<br><br>&emsp;&emsp;大致过程是这样的，有人发现相同字体与大小的文字在不同环境中line-height的值是不一致的，接着，就有人在crossbrowsertesting上做了个测试，得出的结论就是这个问题的的确确存在，而且差异还特别大<br>&gt; When the font size was 100px, the most common line height was 115px. However, results varied from 101px on Mac Firefox to 136px on Android Chrome.<br><br>&emsp;&emsp;最终，由于大部分的行高都为115px,所以，为了解决不同环境中相同字体与字号的文字行高不一致的问题，推荐设置默认<code>line-height</code>为1.15<br><br>&emsp;&emsp;看到这里，想到一个问题，既然显示设置line-height为1.15是为了解决环境兼容的问题。那么，<strong>为什么不设置<code>line-height:1</code>即解决兼容问题，又解决由于行高放大与UI设计稿不符的问题？</strong> 。<br><br><br><br>## 设置overflow:hidden字体显示不全的问题<br><br>&emsp;&emsp;当设置文字<code>line-height:1</code>后，再设置文字所在的容器<code>overflow:hidden</code>很容易复现文字显示不全的问题，比如下面：<br><br><span style="font-size:100px;line-height:1;overflow:hidden;border:1px solid #ddd;display:inline-block">dphyTxg</span><br><br>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">font-size:100px;</span></span></span><br><span class="line"><span class="tag"><span class="string">line-height:1;</span></span></span><br><span class="line"><span class="tag"><span class="string">overflow:hidden;</span></span></span><br><span class="line"><span class="tag"><span class="string">border:1px solid #ddd;</span></span></span><br><span class="line"><span class="tag"><span class="string">display:inline-block"</span>&gt;</span>dphyTxg<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>注：这里可以使用div演示，然后去掉display:inline-block。使用div发现不知道为毛markdown里的样例乱了…<br><br>## 为什么设置行高与字体大小一致文字会显示不全？<br><br>&emsp;&emsp;到这里，才真正进入到深层次的原因探究。<br><br>&emsp;&emsp;对于这个问题，需要先了解字体度量，引用一下其它的文章说明，如下所示：<br><br><div style="text-align:center"><img src="/2018/05/06/一个由line-height引发的血案与思考/2.jpg"><div><br><br>1. <a href="https://zhuanlan.zhihu.com/p/25808995" target="_blank" rel="noopener">原文地址</a><br>1. <a href="http://iamvdo.me/en/blog/css-font-metrics-line-height-and-vertical-align" target="_blank" rel="noopener">Deep dive CSS: font metrics, line-height and vertical-align</a><br>1. <a href="http://designwithfontforge.com/zh-CN/The_EM_Square.html" target="_blank" rel="noopener">EM Square</a><br>1. <a href="https://fontforge.github.io/en-US/" target="_blank" rel="noopener">FontForge</a><br><br><br>简要解释为如下几点：<br>1. 我们设置<code>font-size</code>的高度实际上是对应字体的<code>EM square</code>部分<br>1. 字体在设计时可以超出<code>EM square</code>部分<br>1. 字体实际设计与<code>EM square</code>部分一致时，<code>line-height:normal</code>与<code>line-height:1</code>相等<br>1. 从上图中可以看到，<code>ascender+descender&gt;Em Size</code> 即<code>1100+540&gt;1000</code>,此时<code>line-height:1.64</code>,所以100px的文字默认的行高为164px<br><br>## 样例分析<br><br>&emsp;&emsp;下面就以window环境下的默认字体微软雅黑为例实际看看line-height的计算。<br><br><h1 id="font" style="line-height:normal;font-size: 100px;font-family: 微软雅黑">h1</h1><br><p>line-height: <code id="o1" style="font-size: 50px"></code></p><br><script><br>  document.getElementById(‘o1’).textContent = window.getComputedStyle(document.getElementById(‘font’)).height;<br></script><br><br>代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"font"</span> <span class="attr">style</span>=<span class="string">"line-height:normal;font-size: 100px;font-family: 微软雅黑"</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>line-height: <span class="tag">&lt;<span class="name">code</span> <span class="attr">id</span>=<span class="string">"o1"</span> <span class="attr">style</span>=<span class="string">"font-size: 50px"</span>&gt;</span><span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.getElementById(<span class="string">'o1'</span>).textContent = <span class="built_in">window</span>.getComputedStyle(<span class="built_in">document</span>.getElementById(<span class="string">'font'</span>)).height;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br>&emsp;&emsp;从上面可以看到微软雅黑100px情况在，在windows下行高显示为132px。通过FontForge来核对一下看看是不是这样的。<br><br><div style="text-align:center"><img src="/2018/05/06/一个由line-height引发的血案与思考/3.jpg"><div><br><br>&emsp;&emsp;从上图中可以看到，使用<code>（ascender+descender)/Em Size</code>,即<code>(2167+536)/2048≈1.32</code>，也就是line-height为1.32.<br><br><br>## 结论<br><br>1. <code>line-height:normal</code>的值跟字体有关系，相同字体在不同环境也不一样<br>1. 当line-height设置的值小于默认的值时就会存在显示不全的问题<br>1. normalize.css设置line-height默认为1.15，当字体line-height的normal大于1.15就会存在文字显示不全的问题<br>1. 要解决字体在不同平台line-height不一致的问题，需根据具体字体，选择normal在不同平台上的最大值设置<br><br><br><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div></div></div></div></div></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;爆炸&quot;&gt;&lt;a href=&quot;#爆炸&quot; class=&quot;headerlink&quot; title=&quot;爆炸&quot;&gt;&lt;/a&gt;爆炸&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近UI走查，发现页面中所有包含文字区块的高度与设计稿中的高度完全不一致，然后UI妹子就爆炸了!&lt;/p&gt;
&lt;p&gt;&amp;e
      
    
    </summary>
    
      <category term="前端" scheme="http://muchstudy.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>30</title>
    <link href="http://muchstudy.com/2018/04/21/30/"/>
    <id>http://muchstudy.com/2018/04/21/30/</id>
    <published>2018-04-21T03:15:59.000Z</published>
    <updated>2018-04-21T09:46:28.742Z</updated>
    
    <content type="html"><![CDATA[<p><div style="text-align:center"><img src="/2018/04/21/30/30.jpg"><div></div></div></p><p>&emsp;&emsp;30岁是一道坎。</p><p>&emsp;&emsp;从年龄上来讲，又是一个十年。人生就这样过完了三分之一，不由得心生感慨！感慨时光如梭，感慨事业无成，感概没有了上一个十年时的锐气，就连眼神也没有了那时的干净清澈。从十年前的白面书生变成了中年油腻男，时间真的是一把杀猪刀！</p><p>&emsp;&emsp;从工作与生活上来讲，三十而立。但很多人在这个时候面对着上有老下有有小往往却力不从心。需要咬紧牙关坚持下去，翻过这道坎。</p><p>&emsp;&emsp;就在前几天，我也进入了而立之年。生日当天，那一整天仿佛都充满了仪式感，仿佛过完了那一天就进入到了一个新的人生阶段。当时灵感爆棚（也可能是一时冲动，人很多时候会把冲动当作灵感），希望能记下点什么，但什么都没记下……</p><p>&emsp;&emsp;今年的315入职新公司，在三十岁之前从传统行业转到互联网行业。之所以转，是因为觉得在传统行业中已经到了天花板，进入了舒适区，不想温水煮青蛙，想换一种环境看看。从目前的情况来看，似乎还不错，在新的环境里有很多事情值得做，值得拼一下。似乎又回到了刚入职场的状态，这是一个之前一直期望的状态，很满意。</p><p>&emsp;&emsp;30岁不仅仅是一道坎，跨过这道坎实际上是一趟新的征程。希望在这趟新的旅程中能一直坚挺下去！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/2018/04/21/30/30.jpg&quot;&gt;&lt;div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;30岁是一道坎。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;从年龄上来讲，又
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>工作流产品模块化设计构想</title>
    <link href="http://muchstudy.com/2018/02/22/%E5%B7%A5%E4%BD%9C%E6%B5%81%E4%BA%A7%E5%93%81%E6%A8%A1%E5%9D%97%E5%8C%96%E8%AE%BE%E8%AE%A1%E6%9E%84%E6%83%B3/"/>
    <id>http://muchstudy.com/2018/02/22/工作流产品模块化设计构想/</id>
    <published>2018-02-22T07:07:29.000Z</published>
    <updated>2018-02-22T09:08:42.012Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;之前做过几年工作流产品的产品研发，最近正在的做的知识管理产品，需要新增文章审批功能，实际上就是一个简单的工作流。做完这个事情后，发现市面上单纯的开源工作流引擎居多，还没有一款全功能的开源工作流产品。顿时有了自己抽空余时间折腾一个的想法，权当把之前的工作经验与想法归纳总结一下。</p><p>&emsp;&emsp;在我的构思中，为了最大限度的复用，这款工作流产品应当是模块化可拆分的。你差一个流程引擎那么你用引擎部分即可，差权限控制那么你把权限控制模块拿走即可，就是说能做到各个部分松耦合，可灵活替换。</p><p>&emsp;&emsp;目前，这款工作流产品会包含如下几个部分：</p><ul><li>流程核心引擎</li><li>流程可视化模块</li><li>组织与人员模块</li><li>权限模块</li><li>消息模块</li><li>菜单模块</li><li>基础的表单开发组件</li><li>流程流转统计分析模块</li></ul><p>&emsp;&emsp;默认会把这些模块组装成一个能够RUN起来的系统，用户喜欢那一部分可以单出抽出来用哪一部分，同样的，不喜欢哪一部分可以去掉自己开发。</p><p>&emsp;&emsp;2018年就找这么一件事来丰富业余生活了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;之前做过几年工作流产品的产品研发，最近正在的做的知识管理产品，需要新增文章审批功能，实际上就是一个简单的工作流。做完这个事情后，发现市面上单纯的开源工作流引擎居多，还没有一款全功能的开源工作流产品。顿时有了自己抽空余时间折腾一个的想法，权当把之前的工
      
    
    </summary>
    
      <category term="架构" scheme="http://muchstudy.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>读《恶意》有感</title>
    <link href="http://muchstudy.com/2018/01/13/%E8%AF%BB%E3%80%8A%E6%81%B6%E6%84%8F%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>http://muchstudy.com/2018/01/13/读《恶意》有感/</id>
    <published>2018-01-13T14:58:02.000Z</published>
    <updated>2018-01-13T15:53:42.605Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/01/13/读《恶意》有感/恶意.jpg" title="《恶意》-东野圭吾"><p>&emsp;&emsp;实际上读完这本书已经有一段时间了，有几点感想需要尽快的记录下来，因为深知越往后拖就越没有记录下来的动力。</p><h2 id="关于写作手法"><a href="#关于写作手法" class="headerlink" title="关于写作手法"></a>关于写作手法</h2><p>&emsp;&emsp;文章的写作手法是第一个让我惊奇的地方。全书并不是常见的从头到尾讲故事的叙述文，而是由犯罪嫌疑人和警察的笔记，以及心理活动穿插构成。笔记与心理活动相穿插，让故事与案件逻辑层层递进，不断的推进故事的发展。使得读者更容易的进入到故事当中，把笔记当作案件的记录与线索，把心理活动当作对案件的分析与不断的剥离出事实真相。这是我第一次看到这种写作手法，不由得赞叹：小说居然还能这么写！~</p><h2 id="关于先入为主"><a href="#关于先入为主" class="headerlink" title="关于先入为主"></a>关于先入为主</h2><p>&emsp;&emsp;在故事的一开始，野野口修透露日高邦彦杀猫的情节给人一股深深的寒意，让读者一下子就觉得日高邦彦不会是什么好人。但是，事实却恰恰相反，这是野野口修故意设下的圈套。当得知最终的真相后，由于先入为主的观念，一个微不足道的小情节居然能带来如此巨大的影响，值得深思。</p><h2 id="关于”恶意”"><a href="#关于”恶意”" class="headerlink" title="关于”恶意”"></a>关于”恶意”</h2><p>&emsp;&emsp;<strong>“也没有什么特别的原因，就是看他不爽！”</strong>这就是野野口修杀害日高邦彦的犯罪动机。这么一句毫无逻辑，毫无道理的话，让人毛骨悚然，不寒而栗。<br>&emsp;&emsp;回归到现实世界，在日常的生活与工作中，这样毫无缘由的恶意有时候也会毫无缘由的出现在你面前，当你感受到别人对你的这股恶意时，你会觉得很无力也很可怕。<br>&emsp;&emsp;希望自己永远不要成为这样的人。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/01/13/读《恶意》有感/恶意.jpg&quot; title=&quot;《恶意》-东野圭吾&quot;&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;实际上读完这本书已经有一段时间了，有几点感想需要尽快的记录下来，因为深知越往后拖就越没有记录下来的动力。&lt;/p&gt;
&lt;h2 id=&quot;关于写
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
      <category term="随笔" scheme="http://muchstudy.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>专研精神是技术人员成长的源动力</title>
    <link href="http://muchstudy.com/2018/01/08/%E4%B8%93%E7%A0%94%E7%B2%BE%E7%A5%9E%E6%98%AF%E6%8A%80%E6%9C%AF%E4%BA%BA%E5%91%98%E6%88%90%E9%95%BF%E7%9A%84%E6%BA%90%E5%8A%A8%E5%8A%9B/"/>
    <id>http://muchstudy.com/2018/01/08/专研精神是技术人员成长的源动力/</id>
    <published>2018-01-08T07:10:20.000Z</published>
    <updated>2019-12-01T04:45:25.638Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;前几天，项目中的开发人员向研发组提交了这样一个问题，发现在PC中使用搜狗输入法时，输入完成敲击回车按钮无法触发输入框的查询事件。同样，另外一个组件在IOS系统中，使用IOS原生的输入法也存在该问题。</p><p>&emsp;&emsp;针对该问题我跟踪了一下，发现当使用搜狗输入法时，光标虽然在input框里，但是输入的内容却在输入法提供的浮动窗口中，输入结束，敲击空格或回车，此时才把输入的内容放入input框中。</p><p>&emsp;&emsp;查看了该组件的实现代码，发现该组件是监听的keyup事件，以及监听了input的回车事件来实现输入完成后的自动查询。经过分析，使用搜狗输入法输入时，由于输入法有自己的弹出框，所有事件均在这个弹出框上，输入完成敲击回车或空格时同样也是，所以无法触发组件的input框事件。对于此种情况，考虑给input框绑定onchange事件来解决该问题，但是onchange事件必须要input框失去焦点才会触发。由此看起来，似乎已经没有什么好的解决办法了，于是乎就考虑到能否在input的输入框里加一个小的查询按钮来解决该问题。</p><p>&emsp;&emsp;我把该分析过程以及产品组这边暂定的解决方案告诉了相关技术人员，让他们等候产品组这边的组件更新。本来想着这件事就告一段落，他们只需要等着产品组这边的更新即可了。但是，到了第二天下午，我收到一个amazing的消息，发现该问题的开发人员告诉我说已经自行解决了该问题，并且在产品组提供的组件上修改完成并做了有效性验证！让我这边再去看一下那样修改是否合适！</p><p>&emsp;&emsp;最终是解决方案是使用HTML5的<code>oninput</code>与IE专属的<code>onpropertychange</code>来解决该问题。这篇帖子已经阐述得很详细了，这里就不在详细描述了。<a href="http://www.cnblogs.com/lhb25/archive/2012/11/30/oninput-and-onpropertychange-event-for-input.html" target="_blank">在这里</a>，截图如下：</p><img src="/2018/01/08/专研精神是技术人员成长的源动力/详细说明.jpg"><p>对于这件事有如下几点感想：</p><ul><li>技术人员的技术成长，不仅取决与多看书多看资料与文档，还取决于碰到问题不放弃的专研精神。同时，这股力量还会鞭策你多去了解你不懂的东西，弄懂之后发现更多的不懂，形成良好的正向循环。所以，毫不夸张的说<strong>专研精神是技术人员成长的源动力。</strong></li><li>懈怠、满于现有解决方案而不更深入的去探求更完美的方案，是我这边在这个问题上没有走得更远的根本原因。</li><li>团队中需要更多这样的技术人员，<strong>思想的碰撞才能产生更多的火花</strong>。同时技术人员之间需要更多的技术分享与沟通，<strong>独立的思想注定会是孤独的</strong>。</li></ul><p>作者公众号：<br><img src="http://muchstudy.com/2019/11/10/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9AJS%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/YIYING.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;前几天，项目中的开发人员向研发组提交了这样一个问题，发现在PC中使用搜狗输入法时，输入完成敲击回车按钮无法触发输入框的查询事件。同样，另外一个组件在IOS系统中，使用IOS原生的输入法也存在该问题。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;针对该问题我
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>人生中唯一的2017</title>
    <link href="http://muchstudy.com/2017/12/31/%E4%BA%BA%E7%94%9F%E4%B8%AD%E5%94%AF%E4%B8%80%E7%9A%842017/"/>
    <id>http://muchstudy.com/2017/12/31/人生中唯一的2017/</id>
    <published>2017-12-31T11:32:52.000Z</published>
    <updated>2017-12-31T15:57:00.287Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;今天是2017的最后一天，转眼就将来到2018，很快就会迎来自己的30岁，三十而立。</p><h2 id="重要事件"><a href="#重要事件" class="headerlink" title="重要事件"></a>重要事件</h2><p>&emsp;&emsp;今年是十分特别的一年，在今年升级做了父亲。在那一刻，除了激动还有感激，感激老婆怀胎十月的辛苦，生小孩儿的不容易。当升级做父亲的那一刻，突然间从心理上就感觉不一样了，这种不一样在于很多复杂的因素，能想到的词有：责任、家、顶梁柱、成熟等等。</p><h2 id="收获的"><a href="#收获的" class="headerlink" title="收获的"></a>收获的</h2><ul><li>读完了《禅与摩托车维修指南》《暗时间》《人类简史》《遥远的救世主》《恶意》，技术方面《算法》第四版、《Think in Java》。茅盾文学奖获奖作品《无字》看到第四章，文字絮絮叨叨的实在是没有动力看下去了。</li><li>单词由百词斩换到了Anki，麦克米伦7000还剩下80%，效果很不错，润物细无声。</li><li>学会了如何带娃……</li></ul><h2 id="留下的"><a href="#留下的" class="headerlink" title="留下的"></a>留下的</h2><ul><li>完成用户中心产品的开发。</li><li>今年基础开发框架产品差不多又升级了10来个版本，更加的稳定，同时也更加的陈旧。</li><li>年中的时候，充分利用空挡，实现了知识管理产品的从0到1以及更多。年底公司内部正式上线，算是开始产生价值了。</li><li>今年总共分享了37篇博客。博客的浏览量新增5W+。</li></ul><h2 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h2><ul><li>好好带娃</li><li>见缝插针多读书</li><li>技术这条路坚持走下去</li><li>满30之前搞定房子的装修</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;今天是2017的最后一天，转眼就将来到2018，很快就会迎来自己的30岁，三十而立。&lt;/p&gt;
&lt;h2 id=&quot;重要事件&quot;&gt;&lt;a href=&quot;#重要事件&quot; class=&quot;headerlink&quot; title=&quot;重要事件&quot;&gt;&lt;/a&gt;重要事件&lt;/h2&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat启用HTTPS配置</title>
    <link href="http://muchstudy.com/2017/12/13/Tomcat%E5%90%AF%E7%94%A8HTTPS%E9%85%8D%E7%BD%AE/"/>
    <id>http://muchstudy.com/2017/12/13/Tomcat启用HTTPS配置/</id>
    <published>2017-12-13T09:26:41.000Z</published>
    <updated>2017-12-13T09:45:14.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h2><p>&emsp;&emsp;可使用jdk自带的keytool开生成证书，此种方式与向第三方权威机构购买的证书的区别为，第一次请求时需要选择信任站点并继续访问，在浏览器的地址框里会显示不安全的红色提醒。</p><p>&emsp;&emsp;使用<code>keytool -genkey -alias tomcat -validity 3650 -keyalg RSA -keystore D://.keystore</code>即可在D盘生成<code>.keystore</code>文件，如下所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\YiYing\Desktop&gt; keytool -genkey -alias tomcat -keyalg RSA -keystore D://.keystore</span><br><span class="line">输入密钥库口令:</span><br><span class="line">再次输入新口令:</span><br><span class="line">您的名字与姓氏是什么?</span><br><span class="line">  [Unknown]:  YI</span><br><span class="line">您的组织单位名称是什么?</span><br><span class="line">  [Unknown]:  CSS</span><br><span class="line">您的组织名称是什么?</span><br><span class="line">  [Unknown]:  CSS</span><br><span class="line">您所在的城市或区域名称是什么?</span><br><span class="line">  [Unknown]:  BJ</span><br><span class="line">您所在的省/市/自治区名称是什么?</span><br><span class="line">  [Unknown]:  BJ</span><br><span class="line">该单位的双字母国家/地区代码是什么?</span><br><span class="line">  [Unknown]:  CHINA</span><br><span class="line">CN=YI, OU=CSS, O=CSS, L=BJ, ST=BJ, C=CHINA是否正确?</span><br><span class="line">  [否]:  Y</span><br><span class="line"></span><br><span class="line">输入 &lt;tomcat&gt; 的密钥口令</span><br><span class="line">        (如果和密钥库口令相同, 按回车):</span><br><span class="line">PS C:\Users\YiYing\Desktop&gt;</span><br></pre></td></tr></table></figure></p><p>说明：</p><ul><li>-alias为别名</li><li>-validity 3650有效期为10年</li><li>-keystore为生成的文件路径</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Option Defaults</span><br><span class="line">Below are the defaults for various option values.</span><br><span class="line">-alias "mykey"</span><br><span class="line"></span><br><span class="line">-keyalg</span><br><span class="line">    "DSA" (when using -genkeypair)</span><br><span class="line">    "DES" (when using -genseckey)</span><br><span class="line"></span><br><span class="line">-keysize</span><br><span class="line">    1024 (when using -genkeypair)</span><br><span class="line">    56 (when using -genseckey and -keyalg is "DES")</span><br><span class="line">    168 (when using -genseckey and -keyalg is "DESede")</span><br><span class="line"></span><br><span class="line">-validity 90</span><br><span class="line"></span><br><span class="line">-keystore the file named .keystore in the user's home directory</span><br><span class="line"></span><br><span class="line">-storetype the value of the "keystore.type" property in the security properties file,</span><br><span class="line">           which is returned by the static getDefaultType method in java.security.KeyStore</span><br><span class="line"></span><br><span class="line">-file stdin if reading, stdout if writing</span><br><span class="line"></span><br><span class="line">-protected false</span><br></pre></td></tr></table></figure><blockquote><p>文档地址：<br><a href="https://docs.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/6/docs/technotes/tools/solaris/keytool.html</a></p></blockquote><h2 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat配置</h2><p>&emsp;&emsp;需要修改tomcat的server.xml文件，如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Define a SSL HTTP/1.1 Connector on port 8443</span></span><br><span class="line"><span class="comment">         This connector uses the BIO implementation that requires the JSSE</span></span><br><span class="line"><span class="comment">         style configuration. When using the APR/native implementation, the</span></span><br><span class="line"><span class="comment">         OpenSSL style configuration is required as described in the APR/native</span></span><br><span class="line"><span class="comment">         documentation --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">SSLEnabled</span>=<span class="string">"true"</span> <span class="attr">clientAuth</span>=<span class="string">"false"</span> <span class="attr">keystoreFile</span>=<span class="string">"d://.keystore"</span> <span class="attr">keystorePass</span>=<span class="string">"111111"</span> <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">port</span>=<span class="string">"8443"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11Protocol"</span> <span class="attr">scheme</span>=<span class="string">"https"</span> <span class="attr">secure</span>=<span class="string">"true"</span> <span class="attr">sslProtocol</span>=<span class="string">"TLS"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;本来这一段是注释掉的，去掉注释并增加<code>keystoreFile</code>和<code>keystorePass</code>参数即可。</p><p>&emsp;&emsp;最后，启动服务器，使用<code>https://localhost:8443/</code>即可访问服务器。</p><blockquote><p>文档地址：</p><ol><li>Tomcat7:<a href="https://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html" target="_blank" rel="noopener">https://tomcat.apache.org/tomcat-7.0-doc/ssl-howto.html</a></li><li>Tomcat8:<a href="https://tomcat.apache.org/tomcat-8.0-doc/ssl-howto.html" target="_blank" rel="noopener">https://tomcat.apache.org/tomcat-8.0-doc/ssl-howto.html</a></li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;获取证书&quot;&gt;&lt;a href=&quot;#获取证书&quot; class=&quot;headerlink&quot; title=&quot;获取证书&quot;&gt;&lt;/a&gt;获取证书&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;可使用jdk自带的keytool开生成证书，此种方式与向第三方权威机构购买的证书的区别为，第一次请求
      
    
    </summary>
    
      <category term="HTTP" scheme="http://muchstudy.com/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>字符解码时加号解码为空格问题探究</title>
    <link href="http://muchstudy.com/2017/12/06/%E5%AD%97%E7%AC%A6%E8%A7%A3%E7%A0%81%E6%97%B6%E5%8A%A0%E5%8F%B7%E8%A7%A3%E7%A0%81%E4%B8%BA%E7%A9%BA%E6%A0%BC%E9%97%AE%E9%A2%98%E6%8E%A2%E7%A9%B6/"/>
    <id>http://muchstudy.com/2017/12/06/字符解码时加号解码为空格问题探究/</id>
    <published>2017-12-06T09:22:18.000Z</published>
    <updated>2019-12-01T04:45:17.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>&emsp;&emsp;最近发现一个问题，后台Java代码使用<code>new URL(url)</code>方式发起一个POST请求，模拟表单提交操作，从后台提交数据到服务器端。当客户端的数据中带加号时，服务器端的Servlet使用<code>request.getParameter(&#39;param&#39;)</code>得到的数据加号被变为了空格。比如：客户端发送的数据为<code>aa+aa</code>，服务器接收到的数据变为了<code>aa aa</code>。  </p><p>简单写了几句代码验证一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"aaa+aaa aaa%2B"</span>;</span><br><span class="line">System.out.println(<span class="string">"ENCODE="</span>+URLEncoder.encode(str, <span class="string">"utf-8"</span>));</span><br><span class="line">System.out.println(<span class="string">"DECODE="</span>+URLDecoder.decode(str,<span class="string">"utf-8"</span>));</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENCODE=aaa%<span class="number">2</span>Baaa+aaa%<span class="number">252</span>B</span><br><span class="line">DECODE=aaa aaa aaa+</span><br></pre></td></tr></table></figure></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>&emsp;&emsp;通过上面的代码可以看到，编码时，空格被编码成了+号，+号变成了<code>%2b</code>。当未经过编码的带+号的字符串解码时，+号直接转变为了空格。  </p><p><strong>翻了一下文档是这么说的（<a href="https://docs.oracle.com/javase/6/docs/api/java/net/URLEncoder.html" target="_blank" rel="noopener">地址</a>）：</strong></p><img src="/2017/12/06/字符解码时加号解码为空格问题探究/1.jpg"><p><strong>接着到application/x-www-form-urlencoded MIME format的说明处（<a href="https://www.w3.org/TR/html4/interact/forms.html#h-17.13.4" target="_blank" rel="noopener">地址</a>）：</strong></p><img src="/2017/12/06/字符解码时加号解码为空格问题探究/2.jpg"><p><strong>再翻了一下servlet中<code>request.getParameter(&#39;param&#39;)</code>方法说明，如下：</strong></p><img src="/2017/12/06/字符解码时加号解码为空格问题探究/3.jpg"><p><strong>接着看getParameter到底如何取数据的：</strong></p><img src="/2017/12/06/字符解码时加号解码为空格问题探究/4.jpg"><p>&emsp;&emsp;从上图可以知道，当在servlet中使用<code>getParameter</code>方法来接收POST数据时，默认是会根据请求头的类型来解码的。这就证实了如果通过后端<code>new URL(url)</code>的方式模拟表单的POST，<strong>如果在POST前不对数据进行编码且数据中带有+号，那么服务器端收到的数据必然会是错误的（+号会被自动解码为空格）。</strong></p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>&emsp;&emsp;常规的表单提交content-type有两种：<code>application/x-www-form-urlencoded</code>和<code>multipart/form-data</code>,如果表单提交时不设置任何类型，默认以第一种方式提交数据；第二种属于带附件的表单提交，当表单中有附件时，必须设置表单的<code>enctype</code>为<code>multipart/form-data</code>.</p><p>&emsp;&emsp;很多时候，我们用 Ajax 提交数据时，也是使用这种方式。例如 JQuery的 Ajax，Content-Type 默认值为<code>application/x-www-form-urlencoded;charset=utf-8</code>。</p><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url:getServer()+<span class="string">"/TestServlet"</span>,</span><br><span class="line">  data:&#123;<span class="attr">yiying</span>:<span class="string">"aaa+aa a"</span>&#125;,</span><br><span class="line">  type:<span class="string">'post'</span>,</span><br><span class="line">  success:<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;&#125;)</span><br></pre></td></tr></table></figure><h3 id="HTTP请求情况"><a href="#HTTP请求情况" class="headerlink" title="HTTP请求情况"></a>HTTP请求情况</h3><img src="/2017/12/06/字符解码时加号解码为空格问题探究/5.jpg"><p>&emsp;&emsp;由于在chrome的控制台中所显示的数据被优化显示了，所以在<code>Form Date</code>部分，需要点击后面的<code>view source</code>才能看到浏览器发送数据的真实格式是怎么样的。默认优化后的显示应当为<code>yiying:aaa+aa a</code>,</p><p>&emsp;&emsp;从上图中可以看到，浏览器实际上的使用<code>Content-Type:application/x-www-form-urlencoded; charset=UTF-8</code>的<a href="https://www.w3.org/TR/html4/interact/forms.html#h-17.13.4" target="_blank" rel="noopener">编码规则</a>，实际发送的数据为<code>yiying=aaa%2Baa+a</code>,其中+号变为了%2b,空格被编码为+号。</p><h3 id="后端情况"><a href="#后端情况" class="headerlink" title="后端情况"></a>后端情况</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/TestServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doPost(request,response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"==="</span>+request.getParameter(<span class="string">"yiying"</span>)+<span class="string">"==="</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出值为</span></span><br><span class="line">===aaa+aa a===</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从后端的输出值可以看到，后端的servlet自动解码为原始数据。</p><p><strong>关于后端中文乱码问题的特别说明：</strong></p><blockquote><p>后端服务器(tomcat 的server.xml)如果没有设置编码规则（URIEncoding=”utf-8”），Servlet默认会以<code>ISO-8859-1</code>来解码中文字符(Servlet规范定义)，而前端标识为utg-8,此种情况就会产生乱码，可以用如下3种办法来解决：</p><ol><li>在server.xml设置编码规则为utf-8</li><li>在调用getParameter之前使用代码设置编码规则，<code>request.setCharacterEncoding(&quot;utf-8&quot;);</code></li><li>定点处理，<code>String name = new String(request.getParameter(&quot;name&quot;).getBytes(&quot;iso-8859-1&quot;),&quot;utf-8&quot;);</code></li></ol></blockquote><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>&emsp;&emsp;显而易见，如果需要在后端使用<code>new java.net.URL(url)</code>的方式POST提交数据，需要像浏览器那样先给数据编码处理，再发送数据。</p><p>作者公众号：<br><img src="http://muchstudy.com/2019/11/10/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9AJS%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/YIYING.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;最近发现一个问题，后台Java代码使用&lt;code&gt;new URL(url)&lt;/code&gt;方式发起一个POST请求，模
      
    
    </summary>
    
      <category term="其它" scheme="http://muchstudy.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
  </entry>
  
  <entry>
    <title>JSONP原理探究</title>
    <link href="http://muchstudy.com/2017/11/17/JSONP%E5%8E%9F%E7%90%86%E6%8E%A2%E7%A9%B6/"/>
    <id>http://muchstudy.com/2017/11/17/JSONP原理探究/</id>
    <published>2017-11-17T03:13:30.000Z</published>
    <updated>2017-11-22T09:03:24.887Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;JSONP是一直种解决跨域问题的方案，实现的原理来自于页面中的<code>&lt;script&gt;</code>标签能够跨域请求资源。要通过JSONP实现跨域，需要服务器端做额外支持。</p><h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><p>&emsp;&emsp;前端部分核心在于<code>通过script标签的src告诉服务器端约定好的回调方法名</code>。代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callbackName = <span class="string">'callbackFunc'</span>;</span><br><span class="line"><span class="built_in">window</span>[callbackName] = <span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对返回的数据做后续处理</span></span><br><span class="line">    <span class="built_in">console</span>.log(response)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.src = <span class="string">'http://127.0.0.1:8080/sword-room/JSONPServlet?callback='</span>+callbackName+<span class="string">'&amp;param=JSONP'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script);</span><br></pre></td></tr></table></figure><h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><p>&emsp;&emsp;服务端部分主要为接收前端发送过来的请求参数，核心在于<code>约定好的方法名</code>。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/JSONPServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONPServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">JSONPServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">//请求参数</span></span><br><span class="line">String param = request.getParameter(<span class="string">"param"</span>);</span><br><span class="line"><span class="comment">//跟前端部分约定好的方法名</span></span><br><span class="line">    String callback = request.getParameter(<span class="string">"callback"</span>);</span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    <span class="comment">//返回JSON字符串</span></span><br><span class="line">    response.setContentType(<span class="string">"text/javascript; charset=UTF-8"</span>);</span><br><span class="line">    String jsonData = <span class="string">"&#123;a:1,b:2,param:'"</span>+param+<span class="string">"'&#125;"</span>;</span><br><span class="line">    out.print(callback+<span class="string">"("</span>+jsonData+<span class="string">");"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"> doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>下图为验证结果：<br><img src="/2017/11/17/JSONP原理探究/result.jpg" title="验证结果"></p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>1.前台部分jquery对jsonp的支持，只需设置<code>dataType:&quot;jsonp&quot;</code>,样例如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">"http://127.0.0.1:8080"</span>,</span><br><span class="line">    dataType:<span class="string">"jsonp"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">      userName:<span class="string">'管理员'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>2.后台Java部分可使用fastjson来实现返回数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> com.alibaba.fastjson.JSONPObject;</span><br><span class="line"></span><br><span class="line"> JSONPObject OBJ = <span class="keyword">new</span> JSONPObject();</span><br><span class="line"> <span class="comment">//jquery ajax jsonp默认的方法参数名为callback，可使用jsonpCallback:'newcallback'自定义</span></span><br><span class="line">OBJ.setFunction(request.getParameter(<span class="string">"callback"</span>));</span><br><span class="line"><span class="comment">//设置返回数据</span></span><br><span class="line">OBJ.addParameter(result);</span><br><span class="line"><span class="keyword">this</span>.writeToPage(response, OBJ);</span><br></pre></td></tr></table></figure></p><p>3.跨域情况下一般都牵涉到权限问题，可通过SSO或者服务器端开放匿名访问权限解决，或者token也行<br>4.使用Nginx的代理功能来解决跨域问题也是很好的一种办法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;JSONP是一直种解决跨域问题的方案，实现的原理来自于页面中的&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;
      
    
    </summary>
    
      <category term="前端" scheme="http://muchstudy.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>MySql启动报 write error: No space left on device问题解决</title>
    <link href="http://muchstudy.com/2017/10/23/MySql%E5%90%AF%E5%8A%A8%E6%8A%A5-write-error-No-space-left-on-device%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://muchstudy.com/2017/10/23/MySql启动报-write-error-No-space-left-on-device问题解决/</id>
    <published>2017-10-23T03:20:54.000Z</published>
    <updated>2018-04-21T07:27:37.614Z</updated>
    
    <content type="html"><![CDATA[<p>启动MySQL数据库时报如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost redmine-3.1.1-1]# ./ctlscript.sh start</span><br><span class="line">171023 09:36:32 mysqld_safe Logging to &apos;/opt/redmine-3.1.1-1/mysql/data/mysqld.log&apos;.</span><br><span class="line">171023 09:36:32 mysqld_safe Starting mysqld.bin daemon with databases from /opt/redmine-3.1.1-1/mysql/data</span><br><span class="line">/opt/redmine-3.1.1-1/mysql/bin/mysqld_safe: line 128: echo: write error: No space left on device</span><br><span class="line">/opt/redmine-3.1.1-1/mysql/bin/mysqld_safe: line 165: 16298 Killed</span><br></pre></td></tr></table></figure></p><p>其中，引人注目的就是<code>No space left on device</code>。</p><p>使用<code>df -h</code>命令查看磁盘使用情况如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# df -h</span><br><span class="line">Filesystem            Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/sda2              50G   50G     0 100% /</span><br><span class="line">tmpfs                 3.8G  100K  3.8G   1% /dev/shm</span><br><span class="line">/dev/sda1             485M   54M  407M  12% /boot</span><br><span class="line">/dev/sda5             404G  227M  383G   1% /home</span><br></pre></td></tr></table></figure></p><p>可以看到磁盘空间已经被完全占满。  </p><p>接着，使用<code>du -sh *</code>命令查看<code>/dev/sda2</code>中的磁盘占用具体情况，结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost /]# du -sh *</span><br><span class="line">8.8Mbin</span><br><span class="line">37Mboot</span><br><span class="line">344Kdev</span><br><span class="line">34Metc</span><br><span class="line">29Mhome</span><br><span class="line">122Mlib</span><br><span class="line">27Mlib64</span><br><span class="line">4.0Kmedia</span><br><span class="line">0misc</span><br><span class="line">4.0Kmnt</span><br><span class="line">0net</span><br><span class="line">42Gopt</span><br><span class="line">2.4Groot</span><br><span class="line">19Msbin</span><br><span class="line">4.0Ksrv</span><br><span class="line">164Ktmp</span><br><span class="line"></span><br><span class="line">[root@localhost /]# cd opt</span><br><span class="line">[root@localhost opt]# du -sh *</span><br><span class="line">15Mapache-tomcat-9.0.0.M8</span><br><span class="line">15Mksar</span><br><span class="line">200Mnexus-3.2.0-01</span><br><span class="line">100Mnexus-3.2.0-01-unix.tar.gz</span><br><span class="line">904Mredmine-3.1.1-1</span><br><span class="line">40Gsonatype-work</span><br></pre></td></tr></table></figure></p><p>逐级往下找，发现是nexus的日志文件已经有30多G了，删掉，再次启动mysql问题得到解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;启动MySQL数据库时报如下错误：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="DBMS" scheme="http://muchstudy.com/categories/DBMS/"/>
    
    
  </entry>
  
  <entry>
    <title>HTTP协商缓存实践</title>
    <link href="http://muchstudy.com/2017/09/18/HTTP%E5%8D%8F%E5%95%86%E7%BC%93%E5%AD%98%E5%AE%9E%E8%B7%B5/"/>
    <id>http://muchstudy.com/2017/09/18/HTTP协商缓存实践/</id>
    <published>2017-09-18T03:28:45.000Z</published>
    <updated>2017-09-19T07:38:32.271Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;从浏览器的缓存类型上来讲分为强缓存和协商缓存，之前写过一篇文章<a href="http://muchstudy.com/2016/08/18/HTTP%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3/">《HTTP缓存详解》</a>做了详细的整理。</p><p>&emsp;&emsp;目前做的知识管理产品，为了首页能够更快的加载，需要对首页请求的资源做缓存整理。通过整理分析，决定对css、js做强缓存处理；对个人头像的请求做协商缓存处理；</p><p>&emsp;&emsp;为什么要头像不做强缓存处理呢？原因为目前的头像都是通过人员的ID来获取，而不是通过头像ID来获取。这样做的好处为在后台获取相关数据时，比如排行榜以人员ID作为主键，如果要带出该人员的头像信息，还得去头像表里面联查一下来获取头像ID。因此，由于后端部分的设计造成头像做协商缓存才是最优解。</p><p>&emsp;&emsp;目前的逻辑为，当用户第一次进入知识管理系统，请求个人头像的URL会返回200并从服务器下载个人头像，此时服务器会在response里面设置ETAG值为头像的最后修改日期；当刷新页面时，服务器会判断请求头中的<code>If-None-Match</code>是否与当前的最后更新日期匹配，如果匹配则直接返回304（不返回数据），如果不匹配则从磁盘中取出头像。</p><p><strong>相关代码如下：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 协商缓存控制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> etag</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">cacheControl</span><span class="params">(HttpServletRequest request,HttpServletResponse response,String etag)</span></span>&#123;</span><br><span class="line">String ifNoneMatch = request.getHeader(<span class="string">"If-None-Match"</span>);</span><br><span class="line"><span class="keyword">if</span>(etag.equals(ifNoneMatch))&#123;</span><br><span class="line">response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">response.addHeader(<span class="string">"ETag"</span>, etag);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;从浏览器的缓存类型上来讲分为强缓存和协商缓存，之前写过一篇文章&lt;a href=&quot;http://muchstudy.com/2016/08/18/HTTP%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3/&quot;&gt;《HTTP缓存详解》
      
    
    </summary>
    
      <category term="HTTP" scheme="http://muchstudy.com/categories/HTTP/"/>
    
    
      <category term="缓存" scheme="http://muchstudy.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Nginx代理Redmine和Maven私服Nexus3.0配置</title>
    <link href="http://muchstudy.com/2017/07/18/Nginx%E4%BB%A3%E7%90%86Redmine%E5%92%8CMaven%E7%A7%81%E6%9C%8DNexus3-0%E9%85%8D%E7%BD%AE/"/>
    <id>http://muchstudy.com/2017/07/18/Nginx代理Redmine和Maven私服Nexus3-0配置/</id>
    <published>2017-07-18T08:13:36.000Z</published>
    <updated>2017-07-18T09:03:45.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;&emsp;在这之前部门申请了一个独立IP，这个独立IP对应一台PC机，这台机器上安装了产品问题受理平台Redmine以及Maven私服。由于PC机性能有限，新找了一台双网卡的服务器接到独立IP上，为了不重新迁移环境，让PC机跟服务器组成了内网环境。在服务器上搭建Nginx来把请求转发到内网的PC机上。</p><h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    #nexus支持</span><br><span class="line">    proxy_send_timeout 120;</span><br><span class="line">    proxy_read_timeout 300;</span><br><span class="line">    proxy_buffering    off;</span><br><span class="line">    keepalive_timeout  5 5;</span><br><span class="line">    tcp_nodelay        on;</span><br><span class="line"></span><br><span class="line">    #代理到后台服务器</span><br><span class="line">    upstream ws_redmine &#123;</span><br><span class="line">        server 192.168.100.100:8082;</span><br><span class="line">    &#125;</span><br><span class="line">    upstream ws_nexus &#123;</span><br><span class="line">        server 192.168.100.100:8083;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8082;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass   http://ws_redmine;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8083;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        # nexus支持</span><br><span class="line">        # allow large uploads of files - refer to nginx documentation</span><br><span class="line">        client_max_body_size 1G;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass   http://ws_nexus;</span><br><span class="line">            # nexus支持</span><br><span class="line">            proxy_set_header Host $host:$server_port;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>同时开启两个端口，分别对应redmine和nexus服务器</li><li>配置nexus的转发时如果按照redmine的配置，会报400 bad request错误，之前以为是nginx的配置问题，最后翻nexus的官方文档，发现需要额外的配置。安装官方文档配置好后，发现转发时端口号缺失。查了一圈资料，原来是<a href="https://books.sonatype.com/nexus-book/reference3/install.html#reverse-proxy" target="_blank" rel="noopener">官方文档</a>错误，需要修改<code>proxy_set_header Host $host</code>，变为<code>proxy_set_header Host $host:$server_port</code>.</li></ul><h2 id="其它记录"><a href="#其它记录" class="headerlink" title="其它记录"></a>其它记录</h2><ul><li>查看Linux端口占用情况：<code>lsof -i:80</code>,80为端口号</li><li>关闭占用端口的应用进程：<code>kill -9 11071</code>，11071为上一步中显示出来的端口占用进程号</li><li>Linux中启动Nginx：在nginx安装目录下运行<code>nginx -c nginx.conf</code>，不知道安装在哪儿可以使用<code>whereis nginx</code>查看</li><li>Linux中关闭Nginx:<code>pkill -9 nginx</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在这之前部门申请了一个独立IP，这个独立IP对应一台PC机，这台机器上安装了产品问题受理平台Redmine以及Mav
      
    
    </summary>
    
      <category term="其它" scheme="http://muchstudy.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
  </entry>
  
  <entry>
    <title>基础数据结构04：背包</title>
    <link href="http://muchstudy.com/2017/07/18/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8404%EF%BC%9A%E8%83%8C%E5%8C%85/"/>
    <id>http://muchstudy.com/2017/07/18/基础数据结构04：背包/</id>
    <published>2017-07-18T07:28:23.000Z</published>
    <updated>2017-07-18T09:12:26.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;背包是一种不支持从中删除元素的集合数据类型。它存在的目的就是帮助收集元素并迭代遍历收集到的元素。迭代的顺序不确定且与用例无关。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><img src="/2017/07/18/基础数据结构04：背包/api.jpg"><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><p>&emsp;&emsp;背包可以使用数组，也可以使用链表来实现。如果使用数组，需要考虑数组的动态扩容。这里使用链表来实现，避免数组扩容的问题。另外沿用上一篇stack的实现，只需要把push方法修改为add方法即可。虽然使用链表后，元素遍历是有一定顺序的，不过没用影响，因为当使用Bag数据结构时，默认会认为遍历的数据是无序的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.algs.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkBag</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Node first;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> N;<span class="comment">// 背包中的元素数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 背包中每个元素的类型为Node</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">Item item;</span><br><span class="line">Node next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> N==<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> N;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加元素(跟栈的push一样)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">Node oldFirst = first;</span><br><span class="line">first = <span class="keyword">new</span> Node();</span><br><span class="line">first.item = item;</span><br><span class="line">first.next = oldFirst;</span><br><span class="line">N++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListIterator();  </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//链表遍历实现</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node current = first;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> current != <span class="keyword">null</span>;                     &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span>      </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();  &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Item item = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    LinkBag&lt;String&gt; bag = <span class="keyword">new</span> LinkBag&lt;String&gt;();</span><br><span class="line">    bag.add(<span class="string">"one"</span>);</span><br><span class="line">    bag.add(<span class="string">"two"</span>);</span><br><span class="line">    bag.add(<span class="string">"three"</span>);</span><br><span class="line"><span class="keyword">for</span>(String node:bag)&#123;</span><br><span class="line"><span class="comment">//打印结果为：three-&gt;two-&gt;one-&gt;</span></span><br><span class="line">System.out.print(node+<span class="string">"-&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GitHub：<a href="https://github.com/AlbertKnag/algs-practice" target="_blank" rel="noopener">https://github.com/AlbertKnag/algs-practice</a></p><p>上一篇：<a href="http://muchstudy.com/2017/07/02/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8403%EF%BC%9A%E6%A0%88/">基础数据结构03：栈</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;背包是一种不支持从中删除元素的集合数据类型。它存在的目的就是帮助收集元素并迭代遍历收集到的元素。迭代的顺序不确定且与
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>基础数据结构03：栈</title>
    <link href="http://muchstudy.com/2017/07/02/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8403%EF%BC%9A%E6%A0%88/"/>
    <id>http://muchstudy.com/2017/07/02/基础数据结构03：栈/</id>
    <published>2017-07-02T15:58:27.000Z</published>
    <updated>2017-07-18T09:12:34.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;栈是一种后进先出的数据结构。栈类似于一截一端封口的竹筒，不断像竹筒中放入东西，然后不断从中取出东西，最后放进竹筒中的东西总是最先被取出来，最先放进竹筒里的东西由于在竹筒的最底部，总是最后被取出来。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><img src="/2017/07/02/基础数据结构03：栈/api.jpg"><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><p>&emsp;&emsp;使用链表来实现栈的数据结构。也可以使用数组来实现，需要额外实现数组大小的动态增加和缩小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.algs.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkStack</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Node first;<span class="comment">// 栈顶，即最近添加的元素</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> N;<span class="comment">// 栈中的元素数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈中每个元素的类型为Node</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">Item item;</span><br><span class="line">Node next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> N==<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> N;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">Node oldFirst = first;</span><br><span class="line">first = <span class="keyword">new</span> Node();</span><br><span class="line">first.item = item;</span><br><span class="line">first.next = oldFirst;</span><br><span class="line">N++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">Item item = first.item;</span><br><span class="line">first = first.next;</span><br><span class="line"><span class="keyword">if</span>(first==<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"栈为空"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">N--;</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListIterator();  </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//链表遍历实现</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node current = first;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> current != <span class="keyword">null</span>;                     &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span>      </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();  &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Item item = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    LinkStack&lt;String&gt; stack = <span class="keyword">new</span> LinkStack&lt;String&gt;();</span><br><span class="line">    stack.push(<span class="string">"one"</span>);</span><br><span class="line">    stack.push(<span class="string">"two"</span>);</span><br><span class="line">    stack.push(<span class="string">"three"</span>);</span><br><span class="line"><span class="keyword">for</span>(String node:stack)&#123;</span><br><span class="line"><span class="comment">//打印结果为：three-&gt;two-&gt;one-&gt;</span></span><br><span class="line">System.out.print(node+<span class="string">"-&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除一个元素</span></span><br><span class="line">System.out.println(<span class="string">""</span>);</span><br><span class="line"><span class="comment">//打印结果为：node:three</span></span><br><span class="line">System.out.println(<span class="string">"node:"</span>+stack.pop());</span><br><span class="line"><span class="keyword">for</span>(String node1:stack)&#123;</span><br><span class="line"><span class="comment">//打印结果为：two-&gt;one-&gt;</span></span><br><span class="line">System.out.print(node1+<span class="string">"-&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GitHub：<a href="https://github.com/AlbertKnag/algs-practice" target="_blank" rel="noopener">https://github.com/AlbertKnag/algs-practice</a></p><p>上一篇：<a href="http://muchstudy.com/2017/06/30/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8402%EF%BC%9A%E9%98%9F%E5%88%97/">基础数据结构02：队列</a><br>下一篇：<a href="http://muchstudy.com/2017/07/18/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8404%EF%BC%9A%E8%83%8C%E5%8C%85/">基础数据结构04：背包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;栈是一种后进先出的数据结构。栈类似于一截一端封口的竹筒，不断像竹筒中放入东西，然后不断从中取出东西，最后放进竹筒中的
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>基础数据结构02：队列</title>
    <link href="http://muchstudy.com/2017/06/30/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8402%EF%BC%9A%E9%98%9F%E5%88%97/"/>
    <id>http://muchstudy.com/2017/06/30/基础数据结构02：队列/</id>
    <published>2017-06-30T15:49:13.000Z</published>
    <updated>2017-07-18T09:12:40.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;队列是一种先进先出的数据结构。类似于一截水从一端流向另一端的水管，先进入水管的水最先从另一端出来。</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><img src="/2017/06/30/基础数据结构02：队列/api.jpg"><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><p>&emsp;&emsp;下面使用链表来实现先进先出的数据结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.algs.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkQueue</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node first;<span class="comment">// 指向最早添加的节点的链接</span></span><br><span class="line"><span class="keyword">private</span> Node last;<span class="comment">// 指向最近添加的节点的链接</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> N;<span class="comment">// 队列中的元素总数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列中的一个元素</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">Item item;</span><br><span class="line">Node next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> N==<span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> N;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队列中添加一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line"><span class="comment">// 向链表的尾部添加一个元素</span></span><br><span class="line">Node oldLast = last;</span><br><span class="line">last = <span class="keyword">new</span> Node();</span><br><span class="line">last.item = item;</span><br><span class="line">last.next = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//只有一个节点时，首节点和尾节点相等</span></span><br><span class="line"><span class="keyword">if</span>(isEmpty()) first = last;</span><br><span class="line"><span class="keyword">else</span>oldLast.next = last;</span><br><span class="line">N++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从队列中删除一个元素(先进先出)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">dequeue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(first==<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"队列中没有元素"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从表头删除元素</span></span><br><span class="line">Item item = first.item;</span><br><span class="line">first = first.next;</span><br><span class="line"><span class="keyword">if</span>(isEmpty())last = <span class="keyword">null</span>;</span><br><span class="line">N--;</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListIterator();  </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//链表遍历实现</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node current = first;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> current != <span class="keyword">null</span>;                     &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span>      </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();  &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Item item = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    LinkQueue&lt;String&gt; queue = <span class="keyword">new</span> LinkQueue&lt;String&gt;();</span><br><span class="line">    queue.enqueue(<span class="string">"One"</span>);</span><br><span class="line">    queue.enqueue(<span class="string">"two"</span>);</span><br><span class="line">    queue.enqueue(<span class="string">"three"</span>);</span><br><span class="line"><span class="keyword">for</span>(String node:queue)&#123;</span><br><span class="line"><span class="comment">//打印结果为：One-&gt;two-&gt;three-&gt;</span></span><br><span class="line">System.out.print(node+<span class="string">"-&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除一个元素</span></span><br><span class="line">System.out.println(<span class="string">""</span>);</span><br><span class="line"><span class="comment">//打印结果为：node:One</span></span><br><span class="line">System.out.println(<span class="string">"node:"</span>+queue.dequeue());</span><br><span class="line"><span class="keyword">for</span>(String node1:queue)&#123;</span><br><span class="line"><span class="comment">//打印结果为：two-&gt;three-&gt;</span></span><br><span class="line">System.out.print(node1+<span class="string">"-&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>&emsp;&emsp;对于队列的实现，除了可以使用链表，还可以使用数组来实现。但是在Java中的数组，初始化时必须指定数组的大小，所以当使用数组来实现队列时，需要动态调整队列的大小。<br>&emsp;&emsp;当数组空间不够时，需要扩展空间。当队列中的元素只有空间的四分之一时，此时可以把数组的长度减半。</p><p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以数组来实现队列或栈时需动态调整数组的大小</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line"><span class="comment">//将队列中的元素移动到新数组中</span></span><br><span class="line">Item[] temp = (Item[])<span class="keyword">new</span> Object[max];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">temp[i] = queue[i]; <span class="comment">//queue为存放队列元素的数组</span></span><br><span class="line">&#125;</span><br><span class="line">queue = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>GitHub：<a href="https://github.com/AlbertKnag/algs-practice" target="_blank" rel="noopener">https://github.com/AlbertKnag/algs-practice</a></p><p>上一篇：<a href="http://muchstudy.com/2017/06/26/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8401%EF%BC%9A%E9%93%BE%E8%A1%A8/">基础数据结构01：链表</a><br>下一篇：<a href="http://muchstudy.com/2017/07/02/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8403%EF%BC%9A%E6%A0%88/">基础数据结构03：栈</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;队列是一种先进先出的数据结构。类似于一截水从一端流向另一端的水管，先进入水管的水最先从另一端出来。&lt;/p&gt;
&lt;h2 
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>基础数据结构01：链表</title>
    <link href="http://muchstudy.com/2017/06/26/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8401%EF%BC%9A%E9%93%BE%E8%A1%A8/"/>
    <id>http://muchstudy.com/2017/06/26/基础数据结构01：链表/</id>
    <published>2017-06-26T14:21:13.000Z</published>
    <updated>2017-07-18T09:12:48.931Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&emsp;&emsp;链表的类似于一个连着一个的圆环。在链表中，要想访问某个节点，必须通过他的上一节点来访问。</p><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.algs.base;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.NoSuchElementException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Link</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Node first = <span class="keyword">null</span>;  <span class="comment">// 链表的第一个元素</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> n = <span class="number">0</span>;<span class="comment">// 链表的长度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Item item;<span class="comment">// 链表节点的值</span></span><br><span class="line"><span class="keyword">private</span> Node next;<span class="comment">// 指向下一节点</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (String) <span class="keyword">this</span>.item;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向链表中添加数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">Node oldFirst = first;</span><br><span class="line">first = <span class="keyword">new</span> Node();</span><br><span class="line">first.item = item;</span><br><span class="line">first.next = oldFirst;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 翻转链表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span></span>&#123;</span><br><span class="line">Node next = first.next;</span><br><span class="line">first.next = <span class="keyword">null</span>;<span class="comment">// 避免遍历时死循环</span></span><br><span class="line"><span class="keyword">while</span>(next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">Node temp = next.next;</span><br><span class="line">next.next = first;</span><br><span class="line">first = next;</span><br><span class="line">next = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListIterator();  </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//链表遍历实现</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Node current = first;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> current != <span class="keyword">null</span>;                     &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span>      </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();  &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNext()) <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            Item item = current.item;</span><br><span class="line">            current = current.next;</span><br><span class="line">            <span class="keyword">return</span> item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Link&lt;String&gt; link = <span class="keyword">new</span> Link&lt;String&gt;();</span><br><span class="line">link.add(<span class="string">"one"</span>);</span><br><span class="line">link.add(<span class="string">"two"</span>);</span><br><span class="line">link.add(<span class="string">"three"</span>);</span><br><span class="line"><span class="keyword">for</span>(String node:link)&#123;</span><br><span class="line"><span class="comment">//打印结果为three-&gt;two-&gt;one-&gt;</span></span><br><span class="line">System.out.print(node+<span class="string">"-&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//翻转链表</span></span><br><span class="line">System.out.println(<span class="string">""</span>);</span><br><span class="line">link.reverse();</span><br><span class="line"><span class="keyword">for</span>(String node:link)&#123;</span><br><span class="line"><span class="comment">//打印结果为one-&gt;two-&gt;three-&gt;</span></span><br><span class="line">System.out.print(node+<span class="string">"-&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GitHub：<a href="https://github.com/AlbertKnag/algs-practice" target="_blank" rel="noopener">https://github.com/AlbertKnag/algs-practice</a></p><p>下一篇：<a href="http://muchstudy.com/2017/06/30/%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%8402%EF%BC%9A%E9%98%9F%E5%88%97/">基础数据结构02：队列</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;链表的类似于一个连着一个的圆环。在链表中，要想访问某个节点，必须通过他的上一节点来访问。&lt;/p&gt;
&lt;h2 id=&quot;J
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Eclipse下忽略掉node_modules目录相关配置</title>
    <link href="http://muchstudy.com/2017/06/05/Eclipse%E4%B8%8B%E5%BF%BD%E7%95%A5%E6%8E%89node-modules%E7%9B%AE%E5%BD%95%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/"/>
    <id>http://muchstudy.com/2017/06/05/Eclipse下忽略掉node-modules目录相关配置/</id>
    <published>2017-06-05T14:59:41.000Z</published>
    <updated>2017-06-05T15:19:26.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h2><p>&emsp;&emsp;Eclipse项目中的静态资源采用webpack来打包，在项目中的webapp目录下会生成node_modules目录，里面包含node相关模块。由于资源文件较多，会造成Eclipse编译缓慢，另外这些文件不需要发不到运行服务器上，且不需要做版本控制。</p><h2 id="2-相关配置"><a href="#2-相关配置" class="headerlink" title="2.相关配置"></a>2.相关配置</h2><h3 id="2-1-编译Eclipse项目时忽略掉node-modules目录"><a href="#2-1-编译Eclipse项目时忽略掉node-modules目录" class="headerlink" title="2.1 编译Eclipse项目时忽略掉node_modules目录"></a>2.1 编译Eclipse项目时忽略掉node_modules目录</h3><p>&emsp;&emsp;选中项目右键-properties,如下图所示</p><img src="/2017/06/05/Eclipse下忽略掉node-modules目录相关配置/1.png"><h3 id="2-2-SVN版本管理时忽略掉node-modules目录"><a href="#2-2-SVN版本管理时忽略掉node-modules目录" class="headerlink" title="2.2 SVN版本管理时忽略掉node_modules目录"></a>2.2 SVN版本管理时忽略掉node_modules目录</h3><p>&emsp;&emsp;当使用Eclipse中的SVN来来就行版本控制时，选择node_modules目录后，发现<code>添加至svn:ignore</code>为灰色，不可用，无法忽略相关文件。可以通过如下配置来解决该问题。</p><img src="/2017/06/05/Eclipse下忽略掉node-modules目录相关配置/2.png"><h3 id="2-3-项目打包发布时去掉node-modules目录"><a href="#2-3-项目打包发布时去掉node-modules目录" class="headerlink" title="2.3 项目打包发布时去掉node_modules目录"></a>2.3 项目打包发布时去掉node_modules目录</h3><p>&emsp;&emsp;在项目的maven pom.xml中build下的配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packagingExcludes</span>&gt;</span></span><br><span class="line">node_modules/**</span><br><span class="line"><span class="tag">&lt;/<span class="name">packagingExcludes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1.背景&quot;&gt;&lt;/a&gt;1.背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;Eclipse项目中的静态资源采用webpack来打包，在项目中的webapp目录下会生成node_
      
    
    </summary>
    
      <category term="Java" scheme="http://muchstudy.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL两表关联的连接表该如何创建索引？</title>
    <link href="http://muchstudy.com/2017/05/15/MySQL%E4%B8%A4%E8%A1%A8%E5%85%B3%E8%81%94%E7%9A%84%E8%BF%9E%E6%8E%A5%E8%A1%A8%E8%AF%A5%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%EF%BC%9F/"/>
    <id>http://muchstudy.com/2017/05/15/MySQL两表关联的连接表该如何创建索引？/</id>
    <published>2017-05-15T14:38:22.000Z</published>
    <updated>2020-05-09T15:26:03.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题介绍"><a href="#问题介绍" class="headerlink" title="问题介绍"></a>问题介绍</h2><p>&emsp;&emsp;创建数据库的索引，可以选择单列索引，也可以选择创建组合索引。</p><p>&emsp;&emsp;遇到如下这种情况，用户表（user）与部门表（dept）通过部门用户关联表（deptuser）连接起来，如下图所示：</p><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/reference.jpg" title="表间关系"><p>&emsp;&emsp;问题就是，在这个关联表中该如何建立索引呢？</p><p><strong>针对该表，有如下四种选择:</strong></p><ol><li>针对于user_uuid建立单列索引idx_user</li><li>针对于user_dept建立单列索引idx_dept</li><li>建立组合索引idx_user_dept,即（user_uuid,dept_uuid）</li><li>建立组合索引idx_dept_user,即（dept_uuid,user_uuid）</li></ol><p><strong>对关联表的查询，有如下四种情况：</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 一、人员查所属部门用and方式</span></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> d.dept_name,u.* <span class="keyword">FROM</span> org_dept d,org_user u,org_dept_user duser <span class="keyword">WHERE</span> u.user_uuid=duser.user_uuid <span class="keyword">AND</span> d.dept_uuid=duser.dept_uuid  <span class="keyword">AND</span> u.user_code=<span class="string">"dev1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 二、人员查所属部门用join方式</span></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> d.dept_name,u.* <span class="keyword">FROM</span> org_user u <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> org_dept_user du <span class="keyword">ON</span> u.user_uuid=du.user_uuid <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> org_dept d <span class="keyword">ON</span> du.dept_uuid=d.dept_uuid <span class="keyword">WHERE</span> u.user_code=<span class="string">"dev1"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 三、部门查人员用and方式</span></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> d.dept_name,u.* <span class="keyword">FROM</span> org_dept d,org_user u,org_dept_user du <span class="keyword">WHERE</span> u.user_uuid=du.user_uuid <span class="keyword">AND</span> d.dept_uuid=du.dept_uuid <span class="keyword">AND</span> d.dept_code=<span class="string">"D006"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 四、部门查所属人员用join方式</span></span><br><span class="line"><span class="keyword">EXPLAIN</span> <span class="keyword">SELECT</span> d.dept_name,u.* <span class="keyword">FROM</span> org_dept d <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> org_dept_user du <span class="keyword">ON</span> d.dept_uuid=du.dept_uuid <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> org_user u <span class="keyword">ON</span> u.user_uuid=du.user_uuid <span class="keyword">WHERE</span> d.dept_code=<span class="string">"D006"</span>;</span><br></pre></td></tr></table></figure></p><h2 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h2><h3 id="一-人员查所属部门用and方式"><a href="#一-人员查所属部门用and方式" class="headerlink" title="一.人员查所属部门用and方式"></a>一.人员查所属部门用and方式</h3><h4 id="1-1-关联表无索引"><a href="#1-1-关联表无索引" class="headerlink" title="1.1 关联表无索引"></a>1.1 关联表无索引</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/1-1.png"><h4 id="1-2-单索引-Idx-dept"><a href="#1-2-单索引-Idx-dept" class="headerlink" title="1.2 单索引 Idx_dept"></a>1.2 单索引 Idx_dept</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/1-2.png"><h4 id="1-3-单索引-Idx-user"><a href="#1-3-单索引-Idx-user" class="headerlink" title="1.3 单索引 Idx_user"></a>1.3 单索引 Idx_user</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/1-3.png"><h4 id="1-4-组合索引-Idx-dept-user"><a href="#1-4-组合索引-Idx-dept-user" class="headerlink" title="1.4 组合索引 Idx_dept_user"></a>1.4 组合索引 Idx_dept_user</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/1-4.png"><h4 id="1-5-组合索引-Idx-user-dept"><a href="#1-5-组合索引-Idx-user-dept" class="headerlink" title="1.5 组合索引 Idx_user_dept"></a>1.5 组合索引 Idx_user_dept</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/1-5.png"><h4 id="1-6-所有都建立上"><a href="#1-6-所有都建立上" class="headerlink" title="1.6 所有都建立上"></a>1.6 所有都建立上</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/1-6.png"><h3 id="二-、人员查所属部门用join方式"><a href="#二-、人员查所属部门用join方式" class="headerlink" title="二 、人员查所属部门用join方式"></a>二 、人员查所属部门用join方式</h3><h4 id="2-1-关联表无索引"><a href="#2-1-关联表无索引" class="headerlink" title="2.1 关联表无索引"></a>2.1 关联表无索引</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/2-1.png"><h4 id="2-2-单索引-Idx-dept"><a href="#2-2-单索引-Idx-dept" class="headerlink" title="2.2 单索引 Idx_dept"></a>2.2 单索引 Idx_dept</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/2-2.png"><h4 id="2-3-单索引-Idx-user"><a href="#2-3-单索引-Idx-user" class="headerlink" title="2.3 单索引 Idx_user"></a>2.3 单索引 Idx_user</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/2-3.png"><h4 id="2-4-组合索引-Idx-dept-user"><a href="#2-4-组合索引-Idx-dept-user" class="headerlink" title="2.4 组合索引 Idx_dept_user"></a>2.4 组合索引 Idx_dept_user</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/2-4.png"><h4 id="2-5-组合索引-Idx-user-dept"><a href="#2-5-组合索引-Idx-user-dept" class="headerlink" title="2.5 组合索引 Idx_user_dept"></a>2.5 组合索引 Idx_user_dept</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/2-5.png"><h4 id="2-6-所有都建立上"><a href="#2-6-所有都建立上" class="headerlink" title="2.6 所有都建立上"></a>2.6 所有都建立上</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/2-6.png"><h3 id="三-、部门查人员用and方式"><a href="#三-、部门查人员用and方式" class="headerlink" title="三 、部门查人员用and方式"></a>三 、部门查人员用and方式</h3><h4 id="3-1-关联表无索引"><a href="#3-1-关联表无索引" class="headerlink" title="3.1 关联表无索引"></a>3.1 关联表无索引</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/3-1.png"><h4 id="3-2-单索引-Idx-dept"><a href="#3-2-单索引-Idx-dept" class="headerlink" title="3.2 单索引 Idx_dept"></a>3.2 单索引 Idx_dept</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/3-2.png"><h4 id="3-3-单索引-Idx-user"><a href="#3-3-单索引-Idx-user" class="headerlink" title="3.3 单索引 Idx_user"></a>3.3 单索引 Idx_user</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/3-3.png"><h4 id="3-4-组合索引-Idx-dept-user"><a href="#3-4-组合索引-Idx-dept-user" class="headerlink" title="3.4 组合索引 Idx_dept_user"></a>3.4 组合索引 Idx_dept_user</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/3-4.png"><h4 id="3-5-组合索引-Idx-user-dept"><a href="#3-5-组合索引-Idx-user-dept" class="headerlink" title="3.5 组合索引 Idx_user_dept"></a>3.5 组合索引 Idx_user_dept</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/3-5.png"><h4 id="3-6-所有都建立上"><a href="#3-6-所有都建立上" class="headerlink" title="3.6 所有都建立上"></a>3.6 所有都建立上</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/3-6.png"><h3 id="四-、部门查所属人员用join方式"><a href="#四-、部门查所属人员用join方式" class="headerlink" title="四 、部门查所属人员用join方式"></a>四 、部门查所属人员用join方式</h3><h4 id="4-1-关联表无索引"><a href="#4-1-关联表无索引" class="headerlink" title="4.1 关联表无索引"></a>4.1 关联表无索引</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/4-1.png"><h4 id="4-2-单索引-Idx-dept"><a href="#4-2-单索引-Idx-dept" class="headerlink" title="4.2 单索引 Idx_dept"></a>4.2 单索引 Idx_dept</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/4-2.png"><h4 id="4-3-单索引-Idx-user"><a href="#4-3-单索引-Idx-user" class="headerlink" title="4.3 单索引 Idx_user"></a>4.3 单索引 Idx_user</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/4-3.png"><h4 id="4-4-组合索引-Idx-dept-user"><a href="#4-4-组合索引-Idx-dept-user" class="headerlink" title="4.4 组合索引 Idx_dept_user"></a>4.4 组合索引 Idx_dept_user</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/4-4.png"><h4 id="4-5-组合索引-Idx-user-dept"><a href="#4-5-组合索引-Idx-user-dept" class="headerlink" title="4.5 组合索引 Idx_user_dept"></a>4.5 组合索引 Idx_user_dept</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/4-5.png"><h4 id="4-6-所有都建立上"><a href="#4-6-所有都建立上" class="headerlink" title="4.6 所有都建立上"></a>4.6 所有都建立上</h4><img src="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/4-6.png"><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>&emsp;&emsp;通过上面的实际测试结果可以得出如下结论：<strong>针对于该关联表分别针对于user_uuid与dept_uuid建立单列索引idx_user,idx_dept最优。</strong></p><p>&emsp;&emsp;其中索引idx_user适用与通过人员ID查询出该人员所在的部门；索引idx_dept适用与通过部门查询出该部门下所属的人员。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><a href="/2017/05/15/MySQL两表关联的连接表该如何创建索引？/Test.sql" title="Test.sql">Test.sql</a><h3 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h3><ul><li><a href="https://segmentfault.com/a/1190000003072424" target="_blank" rel="noopener">MYSQL-索引</a></li><li><a href="http://tech.meituan.com/mysql-index.html" target="_blank" rel="noopener">MySQL索引原理及慢查询优化</a></li></ul><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题介绍&quot;&gt;&lt;a href=&quot;#问题介绍&quot; class=&quot;headerlink&quot; title=&quot;问题介绍&quot;&gt;&lt;/a&gt;问题介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;创建数据库的索引，可以选择单列索引，也可以选择创建组合索引。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;
      
    
    </summary>
    
      <category term="DBMS" scheme="http://muchstudy.com/categories/DBMS/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法09：总结</title>
    <link href="http://muchstudy.com/2017/05/04/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9509%EF%BC%9A%E6%80%BB%E7%BB%93/"/>
    <id>http://muchstudy.com/2017/05/04/排序算法09：总结/</id>
    <published>2017-05-04T14:27:40.000Z</published>
    <updated>2017-05-04T15:03:10.427Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在这篇之前，对常见的8中排序算法进行了梳理，《算法》第四版中的这一张图对各种排序算法的性能特点做了总结。</p><img src="/2017/05/04/排序算法09：总结/各种排序算法的性能特点.jpg" title="各种排序算法的性能特点"><p>&emsp;&emsp;补充冒泡排序：稳定、原地排序、时间复杂度为n²，空间复杂度为1。</p><p><strong>其它：</strong></p><ol><li>快速排序是最快的通用排序算法。</li><li>存在大量重复元素情况下，三向快速排序是不错的选择。</li><li>如果稳定性很重要而空间又不是问题，归并排序是最好的选择。</li><li>稳定性：如果一个排序算法能够保留数组中重复元素的相对位置则可以被称为是稳定的。</li><li>关于时间复杂度与空间复杂度中1、N、logN、N、NlogN、N²的含义可参见<a href="http://muchstudy.com/2017/02/26/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/">此文</a>。</li></ol><p>GitHub：<a href="https://github.com/AlbertKnag/algs-practice" target="_blank" rel="noopener">https://github.com/AlbertKnag/algs-practice</a><br>（包含Java版与Javascript版所有排序算法样例代码）</p><p>上一篇：<a href="http://muchstudy.com/2017/05/01/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9508%EF%BC%9A%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/">排序算法08：优先队列与堆排序</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;在这篇之前，对常见的8中排序算法进行了梳理，《算法》第四版中的这一张图对各种排序算法的性能特点做了总结。&lt;/p&gt;
&lt;img src=&quot;/2017/05/04/排序算法09：总结/各种排序算法的性能特点.jpg&quot; title=&quot;各种排序算法的性能特点&quot;
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法08：优先队列与堆排序</title>
    <link href="http://muchstudy.com/2017/05/01/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9508%EF%BC%9A%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>http://muchstudy.com/2017/05/01/排序算法08：优先队列与堆排序/</id>
    <published>2017-05-01T15:20:45.000Z</published>
    <updated>2017-05-04T15:00:55.943Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;堆排序一种是基于二叉堆的排序。本文将从优先队列讲起，循序渐进的实现堆排序。这也是《算法》第四版上讲解堆排序的大致章节结构。另外，本文所有的图都来自于此书。</p><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><p>&emsp;&emsp;<strong>普通队列</strong>是一种先进先出的数据结构，先放进队列的元素取值时优先被取出来。而<strong>优先队列</strong>是一种具有最高优先级元素先出的数据结构，比如每次取值都取最大的元素。</p><p>&emsp;&emsp;优先队列有两个核心方法，一个是<code>insert(val)</code>向队列中添加元素，另外一个是<code>delMax()</code>删除最大元素（优先级最高的）并返回。可以考虑使用数组来存储优先队列的数据。</p><p><strong>优先队列有如下三种实现方式：</strong></p><ol><li>有序数组(调用insert方法时使用类似插入排序把新增元素放到正确位置，调用delMax方法时直接取数组最后一个元素，因为此时元素已经是有序状态)</li><li>无序数组（调用insert方法时直接把元素放到数组中，调用dexMax方法时使用类似选择排序的方法从数组中找出最大元素，删除并返回）</li><li>堆</li></ol><img src="/2017/05/01/排序算法08：优先队列与堆排序/优先队列时间复杂度对比与演示.jpg" title="优先队列时间复杂度对比与演示"><h2 id="堆的算法"><a href="#堆的算法" class="headerlink" title="堆的算法"></a>堆的算法</h2><p>&emsp;&emsp;优先队列可以使用一棵堆有序的二叉树来解决。什么叫做堆有序呢？<strong>当一棵二叉树的每个几点都大于它的两个子节点时，它被称为堆有序。</strong>那么，根节点就是堆有序的二叉树中的最大节点。</p><p>&emsp;&emsp;二叉堆可以使用数组来存储。为了方便起见，根节点放在位置1处（<strong>位置0不使用</strong>），它的两个子节点分别放在位置2和位置3。同理可知，在一个堆中，位置k的节点的父节点的位置为k/2，而它的两个子节点的位置则分别为2k和2k+1.我们就可以这样在树的上下移动：访问a[k]节点的上一层就令k等于k/2，向下一层就令k等于2k或2k+1.</p><p><strong>如下图所示：</strong></p><img src="/2017/05/01/排序算法08：优先队列与堆排序/堆的表示.jpg" title="堆的表示"><p>&emsp;&emsp;使用二叉堆，我们就能实现对数级别的插入元素和删除最大元素。</p><h3 id="由下自上的堆有序化（上浮）"><a href="#由下自上的堆有序化（上浮）" class="headerlink" title="由下自上的堆有序化（上浮）"></a>由下自上的堆有序化（上浮）</h3><p>&emsp;&emsp;当调用优先队列的<code>insert</code>方法时，我们首先把元素放置到数组的结尾，然后再把该元素上浮到正确的节点，最终形成堆有序状态。</p><p><strong>代码如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下标为k的元素上浮到正确位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swim</span>(<span class="params">arr,k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(k&gt;<span class="number">1</span> &amp;&amp; less(arr,<span class="built_in">parseInt</span>(k/<span class="number">2</span>),k))&#123;</span><br><span class="line">        <span class="comment">//父节点索引</span></span><br><span class="line">        <span class="keyword">var</span> parentNode = <span class="built_in">parseInt</span>(k/<span class="number">2</span>);</span><br><span class="line">        exch(arr,parentNode,k);</span><br><span class="line">        k = parentNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="由上至下的堆有序化（下沉）"><a href="#由上至下的堆有序化（下沉）" class="headerlink" title="由上至下的堆有序化（下沉）"></a>由上至下的堆有序化（下沉）</h3><p>&emsp;&emsp;当调用优先队列的<code>delMax</code>方法时，我们下标为1的元素（最大元素）和数组最后一个元素交换，返回最大元素，数组长度减去1，即删除最后一个元素。此时的位置1元素不一定是最大元素，就需要下沉到正确位置，重新构造有序堆。</p><p><strong>代码如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下标为k的元素下沉到正确位置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sink</span>(<span class="params">arr,k,len</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = len ||arr.length;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">2</span>*k &lt;= len)&#123;</span><br><span class="line">        <span class="keyword">var</span> j = <span class="number">2</span>*k;</span><br><span class="line">        <span class="keyword">if</span>(j&lt;len &amp;&amp; less(arr,j,j+<span class="number">1</span>)) j++;</span><br><span class="line">        <span class="keyword">if</span>(!less(arr,k,j)) <span class="keyword">break</span>;</span><br><span class="line">        exch(arr,k,j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>堆有序化示例图：</strong><br><img src="/2017/05/01/排序算法08：优先队列与堆排序/堆有序化.jpg" title="堆有序化"></p><p><strong>堆的操作示例图：</strong><br><img src="/2017/05/01/排序算法08：优先队列与堆排序/堆的操作.jpg" title="堆的操作"></p><h2 id="优先队列实现"><a href="#优先队列实现" class="headerlink" title="优先队列实现"></a>优先队列实现</h2><p>&emsp;&emsp;理解了实现堆有序的上浮和下沉两种方法，优先队列的实现就轻而易举了，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优先队列</span></span><br><span class="line"><span class="comment"> * @constructor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MaxQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.queue = [];                <span class="comment">//- 存储基于堆的完全二叉树</span></span><br><span class="line">    <span class="keyword">this</span>.len   = <span class="number">0</span>;                 <span class="comment">//- 存储于queue[1..len]中，queue[0]未使用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向优先队列中插入元素</span></span><br><span class="line"><span class="comment"> * @param val</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MaxQueue.prototype.insert = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.queue[++<span class="keyword">this</span>.len] = val;    <span class="comment">//- 从索引1开始添加元素</span></span><br><span class="line">    <span class="comment">//使新增元素上浮到树的正确位置</span></span><br><span class="line">    swim(<span class="keyword">this</span>.queue,<span class="keyword">this</span>.len);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除优先队列中的最大元素，并返回该元素</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MaxQueue.prototype.delMax = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> max = <span class="keyword">this</span>.queue[<span class="number">1</span>];        <span class="comment">//- 从根节点得到最大元素</span></span><br><span class="line">    exch(<span class="keyword">this</span>.queue,<span class="number">1</span>,<span class="keyword">this</span>.len--);  <span class="comment">//- 把最后一个节点放到根节点上，并且让长度索引减一</span></span><br><span class="line">    <span class="keyword">this</span>.queue.length = <span class="keyword">this</span>.len+<span class="number">1</span>; <span class="comment">//- 删除最后一个节点</span></span><br><span class="line">    sink(<span class="keyword">this</span>.queue,<span class="number">1</span>);             <span class="comment">//- 下沉根节点，恢复堆的有序性</span></span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MaxQueue.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.queue);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MaxQueue.prototype.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.len==<span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>示例图：</strong></p><img src="/2017/05/01/排序算法08：优先队列与堆排序/堆上的优先队列操作.jpg" title="堆上的优先队列操作"><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>&emsp;&emsp;理解了优先队列，堆排序的逻辑十分简单。第一步：让数组形成堆有序状态；第二步：把堆顶的元素放到数组最末尾，末尾的放到堆顶，在剩下的元素中下沉到正确位置，重复操作即可。</p><p><strong>代码如下：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序算法</span></span><br><span class="line"><span class="comment"> * @constructor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HeapSort</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">HeapSort.prototype.sort = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="comment">//由于arr[0]不使用，放到最后使得能够被排序</span></span><br><span class="line">    <span class="comment">//注意：也可在less和exch中解决，见后面的Java完整代码实现。这里为了对应位置1的元素不使用，方便对照看代码与样例图。</span></span><br><span class="line">    arr[len] = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//使用下沉来构造二叉堆</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k=<span class="built_in">parseInt</span>(len/<span class="number">2</span>);k&gt;=<span class="number">1</span>;k--)&#123;</span><br><span class="line">        sink(arr,k,len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不断把最大的arr[1]交换到最后，然后让新的arr[1]元素下沉到堆有序状态</span></span><br><span class="line">    <span class="keyword">while</span> (len&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        exch(arr,<span class="number">1</span>,len--);</span><br><span class="line">        sink(arr,<span class="number">1</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除未使用的arr[0]（也可在less和exch中解决，见Java代码实现）</span></span><br><span class="line">    arr.splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>示例图：</strong></p><img src="/2017/05/01/排序算法08：优先队列与堆排序/堆排序.jpg" title="堆排序"><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="Javascript实现"><a href="#Javascript实现" class="headerlink" title="Javascript实现"></a>Javascript实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by YiYing on 2017/5/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">W</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 优先队列</span></span><br><span class="line"><span class="comment">     * @constructor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MaxQueue</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue = [];                <span class="comment">//- 存储基于堆的完全二叉树</span></span><br><span class="line">        <span class="keyword">this</span>.len   = <span class="number">0</span>;                 <span class="comment">//- 存储于queue[1..len]中，queue[0]未使用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向优先队列中插入元素</span></span><br><span class="line"><span class="comment">     * @param val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MaxQueue.prototype.insert = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.queue[++<span class="keyword">this</span>.len] = val;    <span class="comment">//- 从索引1开始添加元素</span></span><br><span class="line">        <span class="comment">//使新增元素上浮到树的正确位置</span></span><br><span class="line">        swim(<span class="keyword">this</span>.queue,<span class="keyword">this</span>.len);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除优先队列中的最大元素，并返回该元素</span></span><br><span class="line"><span class="comment">     * @returns &#123;*&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MaxQueue.prototype.delMax = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> max = <span class="keyword">this</span>.queue[<span class="number">1</span>];        <span class="comment">//- 从根节点得到最大元素</span></span><br><span class="line">        exch(<span class="keyword">this</span>.queue,<span class="number">1</span>,<span class="keyword">this</span>.len--);  <span class="comment">//- 把最后一个节点放到根节点上，并且让长度索引减一</span></span><br><span class="line">        <span class="keyword">this</span>.queue.length = <span class="keyword">this</span>.len+<span class="number">1</span>; <span class="comment">//- 删除最后一个节点</span></span><br><span class="line">        sink(<span class="keyword">this</span>.queue,<span class="number">1</span>);             <span class="comment">//- 下沉根节点，恢复堆的有序性</span></span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    MaxQueue.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.queue);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    MaxQueue.prototype.isEmpty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.len==<span class="number">0</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    W.MaxQueue = MaxQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 堆排序算法</span></span><br><span class="line"><span class="comment">     * @constructor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">HeapSort</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    HeapSort.prototype.sort = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = arr.length;</span><br><span class="line">        <span class="comment">//由于arr[0]不使用，放到最后使得能够被排序</span></span><br><span class="line">        <span class="comment">//注意：也可在less和exch中解决，见后面的Java完整代码实现。这里为了对应位置1的元素不使用，方便对照看代码与样例图。</span></span><br><span class="line">        arr[len] = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//使用下沉来构造二叉堆</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> k=<span class="built_in">parseInt</span>(len/<span class="number">2</span>);k&gt;=<span class="number">1</span>;k--)&#123;</span><br><span class="line">            sink(arr,k,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不断把最大的arr[1]交换到最后，然后让新的arr[1]元素下沉到堆有序状态</span></span><br><span class="line">        <span class="keyword">while</span> (len&gt;<span class="number">1</span>)&#123;</span><br><span class="line">            exch(arr,<span class="number">1</span>,len--);</span><br><span class="line">            sink(arr,<span class="number">1</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//删除未使用的arr[0]（也可在less和exch中解决，见Java代码实现）</span></span><br><span class="line">        arr.splice(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    W.HeapSort = HeapSort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//下标为k的元素上浮到正确位置</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">swim</span>(<span class="params">arr,k</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(k&gt;<span class="number">1</span> &amp;&amp; less(arr,<span class="built_in">parseInt</span>(k/<span class="number">2</span>),k))&#123;</span><br><span class="line">            <span class="comment">//父节点索引</span></span><br><span class="line">            <span class="keyword">var</span> parentNode = <span class="built_in">parseInt</span>(k/<span class="number">2</span>);</span><br><span class="line">            exch(arr,parentNode,k);</span><br><span class="line">            k = parentNode;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下标为k的元素下沉到正确位置</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sink</span>(<span class="params">arr,k,len</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = len ||arr.length;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">2</span>*k &lt;= len)&#123;</span><br><span class="line">            <span class="keyword">var</span> j = <span class="number">2</span>*k;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;len &amp;&amp; less(arr,j,j+<span class="number">1</span>)) j++;</span><br><span class="line">            <span class="keyword">if</span>(!less(arr,k,j)) <span class="keyword">break</span>;</span><br><span class="line">            exch(arr,k,j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">less</span>(<span class="params">arr,m,n</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//可根据不同的数据类型设置比对规则，比如json。这里适用于数字与字符串。</span></span><br><span class="line">        <span class="keyword">return</span> arr[m]&lt;arr[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换数组arr中m与n的位置</span></span><br><span class="line"><span class="comment">     * @param m</span></span><br><span class="line"><span class="comment">     * @param n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">exch</span>(<span class="params">arr,m,n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> swap    = arr[m];</span><br><span class="line">        arr[m]      = arr[n];</span><br><span class="line">        arr[n]      = swap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//优先队列测试，依次从大到小输出元素</span></span><br><span class="line">    <span class="keyword">var</span> q = <span class="keyword">new</span> MaxQueue();</span><br><span class="line">    q.insert(<span class="number">3</span>);</span><br><span class="line">    q.insert(<span class="number">33</span>);</span><br><span class="line">    q.insert(<span class="number">9</span>);</span><br><span class="line">    q.insert(<span class="number">21</span>);</span><br><span class="line">    <span class="keyword">while</span> (!q.isEmpty())&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(q.delMax())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//堆排序测试代码</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">new</span> HeapSort().sort(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.algs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heap</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pq</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] pq)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = pq.length;</span><br><span class="line">        <span class="comment">//构造堆结构</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = n/<span class="number">2</span>; k &gt;= <span class="number">1</span>; k--)</span><br><span class="line">            sink(pq, k, n);</span><br><span class="line">        <span class="comment">//排序数组</span></span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            exch(pq, <span class="number">1</span>, n--);</span><br><span class="line">            sink(pq, <span class="number">1</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下沉元素</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(Comparable[] pq, <span class="keyword">int</span> k, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">2</span>*k &lt;= n) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span>*k;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; n &amp;&amp; less(pq, j, j+<span class="number">1</span>)) j++;</span><br><span class="line">            <span class="keyword">if</span> (!less(pq, k, j)) <span class="keyword">break</span>;</span><br><span class="line">            exch(pq, k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意这里i和j都减去1</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable[] pq, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pq[i-<span class="number">1</span>].compareTo(pq[j-<span class="number">1</span>]) &lt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//注意这里i和j都减去1</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Object[] pq, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Object swap = pq[i-<span class="number">1</span>];</span><br><span class="line">        pq[i-<span class="number">1</span>] = pq[j-<span class="number">1</span>];</span><br><span class="line">        pq[j-<span class="number">1</span>] = swap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.println(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String[] a = &#123;<span class="string">"S"</span>,<span class="string">"O"</span>,<span class="string">"R"</span>,<span class="string">"T"</span>,<span class="string">"E"</span>,<span class="string">"X"</span>,<span class="string">"A"</span>,<span class="string">"M"</span>,<span class="string">"P"</span>,<span class="string">"L"</span>,<span class="string">"E"</span>&#125;;</span><br><span class="line">        Heap.sort(a);</span><br><span class="line">        show(a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>不稳定。</li><li>原地排序。</li><li>时间复杂度为NlogN</li><li>空间复杂度为l</li></ol><p>GitHub：<a href="https://github.com/AlbertKnag/algs-practice" target="_blank" rel="noopener">https://github.com/AlbertKnag/algs-practice</a></p><p>上一篇：<a href="http://muchstudy.com/2017/04/30/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9507%EF%BC%9A%E4%B8%89%E5%90%91%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/">排序算法07：三向快速排序</a><br>下一篇：<a href="http://muchstudy.com/2017/05/04/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9509%EF%BC%9A%E6%80%BB%E7%BB%93/">排序算法09：总结</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;堆排序一种是基于二叉堆的排序。本文将从优先队列讲起，循序渐进的实现堆排序。这也是《算法》第四版上讲解堆排序的大致章节结构。另外，本文所有的图都来自于此书。&lt;/p&gt;
&lt;h2 id=&quot;优先队列&quot;&gt;&lt;a href=&quot;#优先队列&quot; class=&quot;header
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法07：三向快速排序</title>
    <link href="http://muchstudy.com/2017/04/30/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9507%EF%BC%9A%E4%B8%89%E5%90%91%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://muchstudy.com/2017/04/30/排序算法07：三向快速排序/</id>
    <published>2017-04-30T14:07:43.000Z</published>
    <updated>2017-05-03T15:50:57.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>&emsp;&emsp;在上一篇<a href="http://muchstudy.com/2017/04/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9506%EF%BC%9A%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/">排序算法06：快速排序</a>中，可以知道，快速排序不停的递归切分数组。在有大量的重复元素情况下，这样的切分存在巨大的改进空间。三向切分的快速排序就是为了提升在有大量重复元素情况下快速排序的性能。</p><p>&emsp;&emsp;快速排序把数组切分为两部分，分别对应与小于，大于切分元素的数组元素。而三向切分将数组切分为三部分，分别对应小于，等于，大于切分元素的数组元素。</p><p>&emsp;&emsp;三向切分的快速排序的算法逻辑为：从左到右遍历数组一次，维护一个指针lt使得a[lo..lt-1]中的元素都小于v，一个指针gt使得a[gt+1..hi]中的元素都大于v，一个指针i使得a[gt..i-1]中的元素都等于v,a[i..gt]中的元素都还未确定。</p><p><strong>三向切分的示意图：</strong></p><img src="/2017/04/30/排序算法07：三向快速排序/三向切分的示意图.jpg" title="三向切分的示意图"><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quick3way</span>(<span class="params">a,lo,hi</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(hi&lt;=lo)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">var</span> lt=lo,i=lo+<span class="number">1</span>,gt=hi;</span><br><span class="line">        <span class="keyword">var</span> v = a[lo];              <span class="comment">//- 选择a[lo]为需要切分的元素</span></span><br><span class="line">        <span class="keyword">while</span> (i&lt;=gt)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &lt; v)&#123;</span><br><span class="line">                exch(a,lt++,i++)</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i] &gt; v)&#123;</span><br><span class="line">                exch(a,i,gt--);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*程序运行到这里结果为:a[lo..lt-1] &lt; v &lt; a[gt+1,hi];其中v=a[lt..gt]*/</span></span><br><span class="line">        quick3way(a,lo,lt<span class="number">-1</span>);       <span class="comment">//- 对左侧（a[lo..lt-1]）进行排序</span></span><br><span class="line">        quick3way(a,gt+<span class="number">1</span>,hi);       <span class="comment">//- 对右侧(a[gt+1,hi])进行排序</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>三向切分的轨迹：</strong><br><img src="/2017/04/30/排序算法07：三向快速排序/三向切分的轨迹.jpg" title="三向切分的轨迹"></p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="Javascript实现"><a href="#Javascript实现" class="headerlink" title="Javascript实现"></a>Javascript实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by YiYing on 2017/4/30.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">W</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">quick3way</span>(<span class="params">a,lo,hi</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(hi&lt;=lo)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">        <span class="keyword">var</span> lt=lo,i=lo+<span class="number">1</span>,gt=hi;</span><br><span class="line">        <span class="keyword">var</span> v = a[lo];              <span class="comment">//- 选择a[lo]为需要切分的元素</span></span><br><span class="line">        <span class="keyword">while</span> (i&lt;=gt)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &lt; v)&#123;</span><br><span class="line">                exch(a,lt++,i++)</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a[i] &gt; v)&#123;</span><br><span class="line">                exch(a,i,gt--);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*程序运行到这里结果为:a[lo..lt-1] &lt; v &lt; a[gt+1,hi];其中v=a[lt..gt]*/</span></span><br><span class="line">        quick3way(a,lo,lt<span class="number">-1</span>);       <span class="comment">//- 对左侧（a[lo..lt-1]）进行排序</span></span><br><span class="line">        quick3way(a,gt+<span class="number">1</span>,hi);       <span class="comment">//- 对右侧(a[gt+1,hi])进行排序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换数组中m与n的位置</span></span><br><span class="line"><span class="comment">     * @param a  数组</span></span><br><span class="line"><span class="comment">     * @param m</span></span><br><span class="line"><span class="comment">     * @param n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">exch</span>(<span class="params">a,m,n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> swap    = a[m];</span><br><span class="line">        a[m] = a[n];</span><br><span class="line">        a[n] = swap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    W.Quick3way = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        quick3way(a,<span class="number">0</span>,a.length<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> chars = [<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>,<span class="string">'I'</span>,<span class="string">'J'</span>,<span class="string">'K'</span>,<span class="string">'L'</span>,<span class="string">'M'</span>,<span class="string">'N'</span>,<span class="string">'O'</span>,<span class="string">'P'</span>,<span class="string">'Q'</span>,<span class="string">'R'</span>,<span class="string">'S'</span>,<span class="string">'T'</span>,<span class="string">'U'</span>,<span class="string">'V'</span>,<span class="string">'W'</span>,<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'Z'</span>];</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> id = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">35</span>);</span><br><span class="line">        arr[i] = chars[id];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.time(<span class="string">"Quick3way"</span>);</span><br><span class="line">    Quick3way(arr);      <span class="comment">//- chrome下一百万数据平均120ms,明显优于快速排序</span></span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">"Quick3way"</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.algs;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 三向快速排序（适用于重复元素较多的情况）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> YiYing</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2017年4月30日 下午10:34:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quick3way</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> lt = lo, gt = hi;</span><br><span class="line">        Comparable v = a[lo];</span><br><span class="line">        <span class="keyword">int</span> i = lo;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= gt) &#123;</span><br><span class="line">            <span class="keyword">int</span> cmp = a[i].compareTo(v);</span><br><span class="line">            <span class="keyword">if</span>      (cmp &lt; <span class="number">0</span>) exch(a, lt++, i++);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cmp &gt; <span class="number">0</span>) exch(a, i, gt--);</span><br><span class="line">            <span class="keyword">else</span>              i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此时数组中的情况为：a[lo..lt-1] &lt; v = a[lt..gt] &lt; a[gt+1..hi].</span></span><br><span class="line">        sort(a, lo, lt-<span class="number">1</span>);<span class="comment">//- 对左侧进行排序</span></span><br><span class="line">        sort(a, gt+<span class="number">1</span>, hi);<span class="comment">//- 对右侧进行排序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//交换 a[i]和a[j]的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Object[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        Object swap = a[i];</span><br><span class="line">        a[i] = a[j];</span><br><span class="line">        a[j] = swap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Integer[] a)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Integer[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">Quick3way.sort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">Quick3way.show(arr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>不稳定。</li><li>原地排序。</li><li>时间复杂度为介于N到NlogN之间</li><li>空间复杂度为lgN</li><li>经测试验证，在存在大量重复元素情况下，三向切分的快速排序的平均排序时间明显快于快速排序</li></ol><p>GitHub：<a href="https://github.com/AlbertKnag/algs-practice" target="_blank" rel="noopener">https://github.com/AlbertKnag/algs-practice</a></p><p>上一篇：<a href="http://muchstudy.com/2017/04/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9506%EF%BC%9A%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/">排序算法06：快速排序</a><br>下一篇：<a href="http://muchstudy.com/2017/05/01/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9508%EF%BC%9A%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E4%B8%8E%E5%A0%86%E6%8E%92%E5%BA%8F/">排序算法08：优先队列与堆排序</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法介绍&quot;&gt;&lt;a href=&quot;#算法介绍&quot; class=&quot;headerlink&quot; title=&quot;算法介绍&quot;&gt;&lt;/a&gt;算法介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在上一篇&lt;a href=&quot;http://muchstudy.com/2017/04/29/%E6%8
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法06：快速排序</title>
    <link href="http://muchstudy.com/2017/04/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9506%EF%BC%9A%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://muchstudy.com/2017/04/29/排序算法06：快速排序/</id>
    <published>2017-04-29T14:04:08.000Z</published>
    <updated>2017-04-30T15:15:37.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>&emsp;&emsp;快速排序是一种分治的排序算法。排序逻辑为：先挑一个元素来切分数组，最终让该元素的左侧都小于该元素，右侧的所有元素都大于该元素。递归的让左侧和右侧分别执行该操作，最终让整个数组变得有序。</p><p><strong>快速排序示意图：</strong><br><img src="/2017/04/29/排序算法06：快速排序/快速排序示意图.jpg" title="快速排序示意图"></p><p>&emsp;&emsp;咋眼一看快速排序跟归并排序很像，其实区别挺明显的。归并排序将数组分成两个子数组分别排序，并将有序的子数组归并以将整个数组排序；而快速排序将数组排序的方式则是当左右两个数组有序时整个数组为自然有序状态。</p><h2 id="快速排序的切分"><a href="#快速排序的切分" class="headerlink" title="快速排序的切分"></a>快速排序的切分</h2><p>&emsp;&emsp;快速排序的核心在于数组的切分。切分的逻辑为，维护两个指针i和j，i从前往后移动，j从后往前移动。最终让切分元素的左侧都小于切分元素，右侧都大于切分元素。</p><p><strong>切分示意图如下：</strong><br><img src="/2017/04/29/排序算法06：快速排序/快速排序切分示意图.jpg" title="快速排序切分示意图"></p><p>Javascript代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数组a切分为a[lo...i-1],a[i],a[i+1,hi]</span></span><br><span class="line"><span class="comment">     * @param a     需要切分的数组</span></span><br><span class="line"><span class="comment">     * @param lo    起始位置</span></span><br><span class="line"><span class="comment">     * @param hi    结束位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">a,lo,hi</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i = lo,j=hi+<span class="number">1</span>;      <span class="comment">//- i,j为左右扫描的指针</span></span><br><span class="line">        <span class="keyword">var</span> v = a[lo];          <span class="comment">//- 选择第lo元素为切分元素，让lo左边的都小于a[lo],右边的都大于a[lo]</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//不断从前向后移动指针</span></span><br><span class="line">            <span class="keyword">while</span> (a[++i] &lt; v)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==hi)&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//不断的从后往前移动指针</span></span><br><span class="line">            <span class="keyword">while</span> (v &lt; a[--j])&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==lo)&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=j)&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="comment">//较小的往前放，较小的往后放</span></span><br><span class="line">            exch(a,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把切分的元素放到正确的位置，交换lo与j的位置</span></span><br><span class="line">        exch(a,lo,j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>一次切分的切分轨迹如下：</strong><br><img src="/2017/04/29/排序算法06：快速排序/切分轨迹.jpg" title="切分轨迹"></p><h2 id="排序实现"><a href="#排序实现" class="headerlink" title="排序实现"></a>排序实现</h2><p>切分完成了排序就比较简单了，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> * @param a     需要排序的数组</span></span><br><span class="line"><span class="comment"> * @param lo    起始位置</span></span><br><span class="line"><span class="comment"> * @param hi    结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">a,lo,hi</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(hi&lt;=lo)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> j = partition(a,lo,hi); <span class="comment">//- 切分数组，让a[j]左边的都小于它，右边的都大于它。</span></span><br><span class="line">    sort(a,lo,j<span class="number">-1</span>);             <span class="comment">//- 将左半部分a[lo..j-1]排序</span></span><br><span class="line">    sort(a,j+<span class="number">1</span>,hi);             <span class="comment">//- 将右半部份a[j+1...hi]排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="Javascript实现"><a href="#Javascript实现" class="headerlink" title="Javascript实现"></a>Javascript实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by YiYing on 2017/4/30.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">W</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     * @param a     需要排序的数组</span></span><br><span class="line"><span class="comment">     * @param lo    起始位置</span></span><br><span class="line"><span class="comment">     * @param hi    结束位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">a,lo,hi</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(hi&lt;=lo)<span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">var</span> j = partition(a,lo,hi); <span class="comment">//- 切分数组，让a[j]左边的都小于它，右边的都大于它。</span></span><br><span class="line">        sort(a,lo,j<span class="number">-1</span>);             <span class="comment">//- 将左半部分a[lo..j-1]排序</span></span><br><span class="line">        sort(a,j+<span class="number">1</span>,hi);             <span class="comment">//- 将右半部份a[j+1...hi]排序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数组a切分为a[lo...i-1],a[i],a[i+1,hi]</span></span><br><span class="line"><span class="comment">     * @param a     需要切分的数组</span></span><br><span class="line"><span class="comment">     * @param lo    起始位置</span></span><br><span class="line"><span class="comment">     * @param hi    结束位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">a,lo,hi</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i = lo,j=hi+<span class="number">1</span>;      <span class="comment">//- i,j为左右扫描的指针</span></span><br><span class="line">        <span class="keyword">var</span> v = a[lo];          <span class="comment">//- 选择第lo元素为切分元素，让lo左边的都小于a[lo],右边的都大于a[lo]</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">//不断从前向后移动指针</span></span><br><span class="line">            <span class="keyword">while</span> (a[++i] &lt; v)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i==hi)&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//不断的从后往前移动指针</span></span><br><span class="line">            <span class="keyword">while</span> (v &lt; a[--j])&#123;</span><br><span class="line">                <span class="keyword">if</span>(j==lo)&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=j)&#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="comment">//较小的往前放，较小的往后放</span></span><br><span class="line">            exch(a,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把切分的元素放到正确的位置，交换lo与j的位置</span></span><br><span class="line">        exch(a,lo,j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换数组中m与n的位置</span></span><br><span class="line"><span class="comment">     * @param a  数组</span></span><br><span class="line"><span class="comment">     * @param m</span></span><br><span class="line"><span class="comment">     * @param n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">exch</span>(<span class="params">a,m,n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> swap    = a[m];</span><br><span class="line">        a[m] = a[n];</span><br><span class="line">        a[n] = swap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    W.QuickSort = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">        sort(a,<span class="number">0</span>,a.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//var arr = [4,5,6,0,3,5,21,7,9,0,1];</span></span><br><span class="line">    <span class="comment">//console.log(arr);</span></span><br><span class="line">    <span class="keyword">var</span> chars = [<span class="string">'0'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>,<span class="string">'D'</span>,<span class="string">'E'</span>,<span class="string">'F'</span>,<span class="string">'G'</span>,<span class="string">'H'</span>,<span class="string">'I'</span>,<span class="string">'J'</span>,<span class="string">'K'</span>,<span class="string">'L'</span>,<span class="string">'M'</span>,<span class="string">'N'</span>,<span class="string">'O'</span>,<span class="string">'P'</span>,<span class="string">'Q'</span>,<span class="string">'R'</span>,<span class="string">'S'</span>,<span class="string">'T'</span>,<span class="string">'U'</span>,<span class="string">'V'</span>,<span class="string">'W'</span>,<span class="string">'X'</span>,<span class="string">'Y'</span>,<span class="string">'Z'</span>];</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> id = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">35</span>);</span><br><span class="line">        arr[i] = chars[id];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.time(<span class="string">"QuickSort"</span>);</span><br><span class="line">    QuickSort(arr);      <span class="comment">//- chrome下一百万数据平均250ms,如果不计算长度，则小于200ms</span></span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">"QuickSort"</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.algs;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quick</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line">        sort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//让数组从a[lo] 到 a[hi]有序</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hi &lt;= lo) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> j = partition(a, lo, hi);</span><br><span class="line">        sort(a, lo, j-<span class="number">1</span>);</span><br><span class="line">        sort(a, j+<span class="number">1</span>, hi);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切分数组a[lo..hi] 最终让数组满足如下状态： a[lo..j-1] &lt;= a[j] &lt;= a[j+1..hi]</span></span><br><span class="line">    <span class="comment">// 并返回j</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = lo;</span><br><span class="line">        <span class="keyword">int</span> j = hi + <span class="number">1</span>;</span><br><span class="line">        Comparable v = a[lo];</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (less(a[++i], v))</span><br><span class="line">                <span class="keyword">if</span> (i == hi) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">while</span> (less(v, a[--j]))</span><br><span class="line">                <span class="keyword">if</span> (j == lo) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= j) <span class="keyword">break</span>;</span><br><span class="line">            exch(a, i, j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把切分的元素放到j的位置上</span></span><br><span class="line">        exch(a, lo, j);</span><br><span class="line">        <span class="keyword">return</span> j;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 判断v &lt; w ?</span></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable v, Comparable w)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> v.compareTo(w) &lt; <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 交换 a[i]和 a[j]</span></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Object[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">         Object swap = a[i];</span><br><span class="line">         a[i] = a[j];</span><br><span class="line">         a[j] = swap;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Integer[] a)</span></span>&#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">             System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">         &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Integer[] a = &#123;<span class="number">1</span>,<span class="number">55</span>,<span class="number">32</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">sort(a);</span><br><span class="line">show(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>不稳定。</li><li>原地排序。</li><li>时间复杂度为NlogN</li><li>空间复杂度为lgN</li><li>快速排序最好的情况是每次都正好能将数组对半分</li><li>如果使用左右两个辅助数组可以方便实现切分，但把数组复制回去的成本会大大降低排序的速度</li><li>归并排序和希尔排序一般都比快速排序慢。原因为：快速排序切分中用一个递增的索引将数组元素和一个定值比较。而归并排序和希尔排序在内循环中移动数据的频率较高。</li></ol><p>GitHub：<a href="https://github.com/AlbertKnag/algs-practice" target="_blank" rel="noopener">https://github.com/AlbertKnag/algs-practice</a></p><p>上一篇：<a href="http://muchstudy.com/2017/04/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9505%EF%BC%9A%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/">排序算法05：归并排序</a><br>下一篇：<a href="http://muchstudy.com/2017/04/30/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9507%EF%BC%9A%E4%B8%89%E5%90%91%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/">排序算法07：三向快速排序</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法介绍&quot;&gt;&lt;a href=&quot;#算法介绍&quot; class=&quot;headerlink&quot; title=&quot;算法介绍&quot;&gt;&lt;/a&gt;算法介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;快速排序是一种分治的排序算法。排序逻辑为：先挑一个元素来切分数组，最终让该元素的左侧都小于该元素，右
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法05：归并排序</title>
    <link href="http://muchstudy.com/2017/04/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9505%EF%BC%9A%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://muchstudy.com/2017/04/29/排序算法05：归并排序/</id>
    <published>2017-04-29T02:51:38.000Z</published>
    <updated>2017-04-30T14:52:02.349Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>&emsp;&emsp;归并排序的算法逻辑为把两个有序的数组归并为一个有序的数组。</p><p>举个例子，对于一个长度为8的数组，有两种归并方式</p><p>自顶向下的归并:</p><ol><li>先分为[0-3],[4-7],左右有序后再归并到一起就变成一个完整的有序数组了</li><li>让[0-3]有序又可以分为[0-1]、[2-3]有序，递归下去，最终归并为[0-3]有序</li></ol><p>自底向上的归并：</p><ol><li>先让[0-1],[2-3],[4-5],[6-7]有序</li><li>再让[0-3],[4-7]有序</li><li>最终归并[0-7],让整个数组有序</li></ol><img src="/2017/04/29/排序算法05：归并排序/归并排序示意图.jpg" title="归并排序示意图"><h2 id="归并实现"><a href="#归并实现" class="headerlink" title="归并实现"></a>归并实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原地归并</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> * @param start</span></span><br><span class="line"><span class="comment"> * @param mid</span></span><br><span class="line"><span class="comment"> * @param end</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">arr,start,mid,end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i=start,j=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    <span class="comment">//数据复制一份将a[start..end]复制到temp[start..end],start不一定为0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> m=start;m&lt;=end;m++)&#123;</span><br><span class="line">        temp[m] = arr[m];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> n=start;n&lt;=end;n++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;mid)&#123;</span><br><span class="line">            <span class="comment">//左边用尽（取右半边的元素）</span></span><br><span class="line">            arr[n] = temp[j++];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j&gt;end)&#123;</span><br><span class="line">            <span class="comment">//右边用尽（取左半边的元素）</span></span><br><span class="line">            arr[n] = temp[i++];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp[j]&lt;temp[i])&#123;</span><br><span class="line">            <span class="comment">//右半边的元素小于左半边的元素（取右半边的元素）</span></span><br><span class="line">            arr[n] = temp[j++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//右半边的元素大于左半边的元素（取左半边的元素）</span></span><br><span class="line">            arr[n] = temp[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这张原地归并轨迹的样例图来自于《算法》第四版，左侧为arr，右侧为temp数组</p><img src="/2017/04/29/排序算法05：归并排序/原地归并的轨迹.jpg" title="原地归并的轨迹"><h2 id="自顶向下的归并"><a href="#自顶向下的归并" class="headerlink" title="自顶向下的归并"></a>自顶向下的归并</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自顶向下的归并</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> * @param start</span></span><br><span class="line"><span class="comment"> * @param end</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortDown</span>(<span class="params">arr,start,end</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//将数组arr[start..end]排序，这里的start并不一定是0</span></span><br><span class="line">    <span class="keyword">if</span>(end&lt;=start) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> mid = start + <span class="built_in">parseInt</span>((end-start)/<span class="number">2</span>);</span><br><span class="line">    sortDown(arr,start,mid);        <span class="comment">//- 将左半边排序</span></span><br><span class="line">    sortDown(arr,mid+<span class="number">1</span>,end);        <span class="comment">//- 将右半边排序</span></span><br><span class="line">    merge(arr,start,mid,end);       <span class="comment">//- 归并结果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2017/04/29/排序算法05：归并排序/依赖树.jpg" title="依赖树"><img src="/2017/04/29/排序算法05：归并排序/自顶向下的归并排序中归并结果的轨迹.jpg" title="自顶向下的归并排序中归并结果的轨迹"><img src="/2017/04/29/排序算法05：归并排序/自顶向下归并的调用轨迹.jpg" title="自顶向下归并的调用轨迹"><h2 id="自底向上的归并"><a href="#自底向上的归并" class="headerlink" title="自底向上的归并"></a>自底向上的归并</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自底向上的归并</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortUp</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> sz=<span class="number">1</span>;sz&lt;len;sz=<span class="number">2</span>*sz)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> start=<span class="number">0</span>;start&lt;len-sz;start=start+<span class="number">2</span>*sz)&#123;</span><br><span class="line">            merge(arr,start,start+sz<span class="number">-1</span>,<span class="built_in">Math</span>.min(start+<span class="number">2</span>*sz<span class="number">-1</span>,len<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2017/04/29/排序算法05：归并排序/自底向上的归并排序的归并结果.jpg" title="自底向上的归并排序的归并结果"><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="javascript实现"><a href="#javascript实现" class="headerlink" title="javascript实现"></a>javascript实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by YiYing on 2017/4/29.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原地归并</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> * @param start</span></span><br><span class="line"><span class="comment"> * @param mid</span></span><br><span class="line"><span class="comment"> * @param end</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">arr,start,mid,end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i=start,j=mid+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    <span class="comment">//数据复制一份将a[start..end]复制到temp[start..end],start不一定为0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> m=start;m&lt;=end;m++)&#123;</span><br><span class="line">        temp[m] = arr[m];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> n=start;n&lt;=end;n++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;mid)&#123;</span><br><span class="line">            <span class="comment">//左边用尽（取右半边的元素）</span></span><br><span class="line">            arr[n] = temp[j++];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j&gt;end)&#123;</span><br><span class="line">            <span class="comment">//右边用尽（取左半边的元素）</span></span><br><span class="line">            arr[n] = temp[i++];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp[j]&lt;temp[i])&#123;</span><br><span class="line">            <span class="comment">//右半边的元素小于左半边的元素（取右半边的元素）</span></span><br><span class="line">            arr[n] = temp[j++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//右半边的元素大于左半边的元素（取左半边的元素）</span></span><br><span class="line">            arr[n] = temp[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自顶向下的归并</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> * @param start</span></span><br><span class="line"><span class="comment"> * @param end</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortDown</span>(<span class="params">arr,start,end</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//将数组arr[start..end]排序，这里的start并不一定是0</span></span><br><span class="line">    <span class="keyword">if</span>(end&lt;=start) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> mid = start + <span class="built_in">parseInt</span>((end-start)/<span class="number">2</span>);</span><br><span class="line">    sortDown(arr,start,mid);        <span class="comment">//- 将左半边排序</span></span><br><span class="line">    sortDown(arr,mid+<span class="number">1</span>,end);        <span class="comment">//- 将右半边排序</span></span><br><span class="line">    merge(arr,start,mid,end);       <span class="comment">//- 归并结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自底向上的归并</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortUp</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> sz=<span class="number">1</span>;sz&lt;len;sz=<span class="number">2</span>*sz)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> start=<span class="number">0</span>;start&lt;len-sz;start=start+<span class="number">2</span>*sz)&#123;</span><br><span class="line">            merge(arr,start,start+sz<span class="number">-1</span>,<span class="built_in">Math</span>.min(start+<span class="number">2</span>*sz<span class="number">-1</span>,len<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr1 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr1);</span><br><span class="line">    sortDown(arr1,<span class="number">0</span>,arr1.length<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(arr1);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"----------------"</span>);</span><br><span class="line">    <span class="keyword">var</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(arr2);</span><br><span class="line">    sortUp(arr2);</span><br><span class="line">    <span class="built_in">console</span>.log(arr2);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.algs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Merge</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span>[] temp,<span class="keyword">int</span> start,<span class="keyword">int</span> mid,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i=start,j=mid+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//避免每次都创建数组对象</span></span><br><span class="line"><span class="comment">//int[] temp = new int[arr.length];</span></span><br><span class="line"><span class="comment">//数据复制一份将a[start..end]复制到temp[start..end],start不一定为0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> m=start;m&lt;=end;m++)&#123;</span><br><span class="line">temp[m] = arr[m];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n=start;n&lt;=end;n++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i&gt;mid)&#123;</span><br><span class="line">            <span class="comment">//左边用尽（取右半边的元素）</span></span><br><span class="line">            arr[n] = temp[j++];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j&gt;end)&#123;</span><br><span class="line">            <span class="comment">//右边用尽（取左半边的元素）</span></span><br><span class="line">            arr[n] = temp[i++];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(temp[j]&lt;temp[i])&#123;</span><br><span class="line">            <span class="comment">//右半边的元素小于左半边的元素（取右半边的元素）</span></span><br><span class="line">            arr[n] = temp[j++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//右半边的元素大于左半边的元素（取左半边的元素）</span></span><br><span class="line">            arr[n] = temp[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortDown</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span>[] temp,<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line"><span class="comment">//将数组arr[start..end]排序，这里的start并不一定是0</span></span><br><span class="line">    <span class="keyword">if</span>(end&lt;=start) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = start + (end-start)/<span class="number">2</span>;</span><br><span class="line">    sortDown(arr,temp,start,mid);        <span class="comment">//- 将左半边排序</span></span><br><span class="line">    sortDown(arr,temp,mid+<span class="number">1</span>,end);        <span class="comment">//- 将右半边排序</span></span><br><span class="line">    merge(arr,temp,start,mid,end);       <span class="comment">//- 归并结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortUp</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span>[] temp)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> sz=<span class="number">1</span>;sz&lt;len;sz=<span class="number">2</span>*sz)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> start=<span class="number">0</span>;start&lt;len-sz;start=start+<span class="number">2</span>*sz)&#123;</span><br><span class="line">            merge(arr,temp,start,start+sz-<span class="number">1</span>,Math.min(start+<span class="number">2</span>*sz-<span class="number">1</span>,len-<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr1  = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] temp1 = <span class="keyword">new</span> <span class="keyword">int</span>[arr1.length];</span><br><span class="line">    sortDown(arr1,temp1,<span class="number">0</span>,arr1.length-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> m:arr1)&#123;</span><br><span class="line">    System.out.print(m+<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println();</span><br><span class="line">    System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] arr2  = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span>[] temp2 = <span class="keyword">new</span> <span class="keyword">int</span>[arr2.length];</span><br><span class="line">    sortUp(arr2,temp2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n:arr2)&#123;</span><br><span class="line">    System.out.print(n+<span class="string">" "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>稳定。</li><li>非原地排序。</li><li>时间复杂度为NlogN</li><li>空间复杂度为N</li><li>归并排序的主要缺点是辅助数组所使用的额外空间和N的大小成正比</li><li>归并排序的递归使小规模问题中方法的调用过于频繁。使用插入排序处理小规模的子数组（比如长度小于15）一般可以将归并排序的运行时间缩短10%-15%</li><li>当数组长度为2的幂时，自顶向下和自底向上的归并排序所用的比较次数和数组的访问次数正好相同，只是顺序不同。其它时候，两种方法的比较和数组的访问次序会有所不同</li></ol><p>GitHub：<a href="https://github.com/AlbertKnag/algs-practice" target="_blank" rel="noopener">https://github.com/AlbertKnag/algs-practice</a></p><p>上一篇：<a href="http://muchstudy.com/2017/04/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9504%EF%BC%9A%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/">排序算法04：希尔排序</a><br>下一篇：<a href="http://muchstudy.com/2017/04/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9506%EF%BC%9A%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/">排序算法06：快速排序</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法介绍&quot;&gt;&lt;a href=&quot;#算法介绍&quot; class=&quot;headerlink&quot; title=&quot;算法介绍&quot;&gt;&lt;/a&gt;算法介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;归并排序的算法逻辑为把两个有序的数组归并为一个有序的数组。&lt;/p&gt;
&lt;p&gt;举个例子，对于一个长度为8
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法04：希尔排序</title>
    <link href="http://muchstudy.com/2017/04/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9504%EF%BC%9A%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    <id>http://muchstudy.com/2017/04/23/排序算法04：希尔排序/</id>
    <published>2017-04-23T12:33:41.000Z</published>
    <updated>2017-04-29T14:50:51.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>&emsp;&emsp;从上一篇<a href="http://muchstudy.com/2017/04/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9502%EF%BC%9A%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/">《插入排序》</a>可以知道，当最小元素恰好在最后一个时，需要移动的次数为N-1。当一个从大到小排列的数组使用插入排序变成从小到大排列时，需要比乱序状态下耗费更多的时间。原因为插入排序是从后往前一位一位的往前交换，如果能把靠后的较小元素只交换（移动）一次就插入到靠前位置，则能有效的缩短排序时间。希尔排序就是这样一种算法。</p><p>&emsp;&emsp;希尔排序通过一个序列让靠后的元素一次性移动到前面，最后使用插入排序让数组变成有序状态。</p><p>&emsp;&emsp;举个例子。长度为100的数组，挑选出[1,10,20,50]这么一个序列，这个数列的含义就是每次元素移动的间隔。</p><ol><li>让间隔50的数据相对有序（arr[0]&lt;arr[49]&lt;arr[99]）</li><li>让间隔20的数据相对有序（arr[0]&lt;arr[19]&lt;arr[39]&lt;arr[59]&lt;arr[79]&lt;arr[99]）</li><li>让间隔10的数据相对有序（arr[0]&lt;arr[9]&lt;arr[19]&lt;arr[29]&lt;arr[39]……）</li><li>让间隔1的数据现对有序(步长为1实际上就是插入排序)</li></ol><p>下图为《算法》第四版上希尔排序排序轨迹样例：</p><img src="/2017/04/23/排序算法04：希尔排序/希尔排序.jpg" title="排序轨迹"><p>这张图是对SHELLSORTEXAMPLE字符序列排序，序列为13、4、1。</p><p>可视化效果：<a href="http://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html" target="_blank">这里</a></p><h2 id="Javascript实现"><a href="#Javascript实现" class="headerlink" title="Javascript实现"></a>Javascript实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by YiYing on 2017/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">W</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Shell</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序算法实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Shell.prototype.sort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="keyword">this</span>.arr.length;</span><br><span class="line">        <span class="keyword">var</span> h   = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//自动生成序列。步长序列为1、4、13、40、121、364、1093......</span></span><br><span class="line">        <span class="keyword">while</span>(h&lt;<span class="built_in">parseInt</span>(len/<span class="number">3</span>))&#123;</span><br><span class="line">            h = h*<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(h&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=h;i&lt;len;i++)&#123;</span><br><span class="line">                <span class="comment">//当h&gt;1时，实际上是把后面的一次性移动到前面。最后h为1时实际上就是对arr进行插入排序</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j=i;j&gt;=h &amp;&amp; <span class="keyword">this</span>.less(j,j-h);j=j-h)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.exchange(j,j-h);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//每执行一次，步长依次递减，最终步长递减为1。</span></span><br><span class="line">            h = <span class="built_in">parseInt</span>(h/<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断m是否小于n</span></span><br><span class="line"><span class="comment">     * @param m</span></span><br><span class="line"><span class="comment">     * @param n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Shell.prototype.less = <span class="function"><span class="keyword">function</span> (<span class="params">m,n</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//可根据不同的数据类型设置比对规则，比如json。这里适用于数字与字符串。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.arr[m]&lt;<span class="keyword">this</span>.arr[n];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换数组中m与n的位置</span></span><br><span class="line"><span class="comment">     * @param m</span></span><br><span class="line"><span class="comment">     * @param n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Shell.prototype.exchange = <span class="function"><span class="keyword">function</span> (<span class="params">m,n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> swap    = <span class="keyword">this</span>.arr[m];</span><br><span class="line">        <span class="keyword">this</span>.arr[m] = <span class="keyword">this</span>.arr[n];</span><br><span class="line">        <span class="keyword">this</span>.arr[n] = swap;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印排序后的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Shell.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.arr);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否已排序</span></span><br><span class="line"><span class="comment">     * @returns &#123;boolean&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Shell.prototype.isSorted = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="keyword">this</span>.arr.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.less(i,i<span class="number">-1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    W.Shell = Shell;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> shell = <span class="keyword">new</span> Shell(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"排序前："</span>+shell.isSorted());</span><br><span class="line">    shell.sort();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"排序后："</span>+shell.isSorted());</span><br><span class="line">    shell.show();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.algs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shell</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 希尔排序实现逻辑</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line"><span class="keyword">int</span> h= <span class="number">1</span>;</span><br><span class="line"><span class="comment">//自动生成序列。步长序列为1、4、13、40、121、364、1093......</span></span><br><span class="line"><span class="keyword">while</span>(h&lt;len/<span class="number">3</span>)&#123;</span><br><span class="line">h = <span class="number">3</span>*h+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">while</span>(h&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=h;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="comment">//当h&gt;1时，实际上是把后面的一次性移动到前面。最后h为1时实际上就是对arr进行插入排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&gt;=h &amp;&amp; less(arr[j],arr[j-h]);j -= h)&#123;</span><br><span class="line">        exchange(arr,j,j-h);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//每执行一次，步长依次递减，最终步长递减为1。</span></span><br><span class="line">        h = h/<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较m是否小于n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> m</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m &lt; n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换m与n的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> m</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> swap = a[m];</span><br><span class="line">        a[m] = a[n];</span><br><span class="line">        a[n] = swap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">Shell.sort(arr);</span><br><span class="line">Shell.show(arr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>不稳定。</li><li>原地排序。</li><li>时间复杂度为：目前无法准确评估时间复杂度。但是肯定小于平方级别，大于线性对数级别。详细可见《算法》第四版P162</li><li>空间复杂度为：常数级别。</li><li>希尔排序比插入排序、选择排序更快。且数组越大，优势越大。</li><li>对于递增序列可以随意选择，目前无法证明某个序列是最优的。</li></ol><p>GitHub：<a href="https://github.com/AlbertKnag/algs-practice" target="_blank" rel="noopener">https://github.com/AlbertKnag/algs-practice</a></p><p>上一篇：<a href="http://muchstudy.com/2017/04/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9503%EF%BC%9A%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/">排序算法03：插入排序</a><br>下一篇：<a href="http://muchstudy.com/2017/04/29/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9505%EF%BC%9A%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/">排序算法05：归并排序</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法介绍&quot;&gt;&lt;a href=&quot;#算法介绍&quot; class=&quot;headerlink&quot; title=&quot;算法介绍&quot;&gt;&lt;/a&gt;算法介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;从上一篇&lt;a href=&quot;http://muchstudy.com/2017/04/22/%E6%8
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法03：插入排序</title>
    <link href="http://muchstudy.com/2017/04/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9503%EF%BC%9A%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    <id>http://muchstudy.com/2017/04/22/排序算法03：插入排序/</id>
    <published>2017-04-22T14:34:18.000Z</published>
    <updated>2017-04-29T14:51:21.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><blockquote><p>步骤：</p><ol><li>从第一个元素开始，该元素可以认为已经被排序</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li><li>如果被扫描的元素（已排序）大于新元素，将该元素后移一位</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li><li>将新元素插入到该位置后</li><li>重复步骤2~5</li></ol></blockquote><p>排序演示：<br><img src="/2017/04/22/排序算法03：插入排序/插入排序.gif" title="插入排序"></p><p>可视化效果：<a href="http://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html" target="_blank">这里</a></p><h2 id="Javascript实现"><a href="#Javascript实现" class="headerlink" title="Javascript实现"></a>Javascript实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by YiYing on 2017/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">W</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Insertion</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入排序算法实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Insertion.prototype.sort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="keyword">this</span>.arr.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="comment">//在已经有序之中，从后往前比对，依次交换，直到插入到正确的位置即可</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=i;j&gt;<span class="number">0</span>&amp;&amp;<span class="keyword">this</span>.less(j,j<span class="number">-1</span>);j--)&#123;</span><br><span class="line">                <span class="keyword">this</span>.exchange(j,j<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断m是否小于n</span></span><br><span class="line"><span class="comment">     * @param m</span></span><br><span class="line"><span class="comment">     * @param n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Insertion.prototype.less = <span class="function"><span class="keyword">function</span> (<span class="params">m,n</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//可根据不同的数据类型设置比对规则，比如json。这里适用于数字与字符串。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.arr[m]&lt;<span class="keyword">this</span>.arr[n];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换数组中m与n的位置</span></span><br><span class="line"><span class="comment">     * @param m</span></span><br><span class="line"><span class="comment">     * @param n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Insertion.prototype.exchange = <span class="function"><span class="keyword">function</span> (<span class="params">m,n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> swap    = <span class="keyword">this</span>.arr[m];</span><br><span class="line">        <span class="keyword">this</span>.arr[m] = <span class="keyword">this</span>.arr[n];</span><br><span class="line">        <span class="keyword">this</span>.arr[n] = swap;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印排序后的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Insertion.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.arr);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否已排序</span></span><br><span class="line"><span class="comment">     * @returns &#123;boolean&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Insertion.prototype.isSorted = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="keyword">this</span>.arr.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.less(i,i<span class="number">-1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    W.Insertion = Insertion;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> insertion = <span class="keyword">new</span> Insertion(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"排序前："</span>+insertion.isSorted());</span><br><span class="line">    insertion.sort();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"排序后："</span>+insertion.isSorted());</span><br><span class="line">    insertion.show();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.algs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Insertion</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序实现逻辑</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="comment">//在已经有序之中，从后往前比对，依次交换，直到插入到正确的位置即可</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j&gt;<span class="number">0</span>&amp;&amp;less(arr[j], arr[j-<span class="number">1</span>]); j--) &#123;</span><br><span class="line">                exchange(arr, j, j-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比较m是否小于n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> m</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m &lt; n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换m与n的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> m</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> swap = a[m];</span><br><span class="line">        a[m] = a[n];</span><br><span class="line">        a[n] = swap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">Insertion.sort(arr);</span><br><span class="line">Insertion.show(arr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>实验证明（《算法》第四版P160），插入排序比选择排序更快。</li><li>稳定。相同元素排序后能保持排序前的相对顺序。</li><li>原地排序。</li><li>时间复杂度为：介于线性级别与平方级别之间。取决于输入元素的排列情况。</li><li>空间复杂度为：常数级别。</li></ol><p>GitHub：<a href="https://github.com/AlbertKnag/algs-practice" target="_blank" rel="noopener">https://github.com/AlbertKnag/algs-practice</a></p><p>上一篇：<a href="http://muchstudy.com/2017/04/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9502%EF%BC%9A%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/">排序算法02：选择排序</a><br>下一篇：<a href="http://muchstudy.com/2017/04/23/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9504%EF%BC%9A%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/">排序算法04：希尔排序</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法介绍&quot;&gt;&lt;a href=&quot;#算法介绍&quot; class=&quot;headerlink&quot; title=&quot;算法介绍&quot;&gt;&lt;/a&gt;算法介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从第一个元素开始，该元素可以认为已经被排序&lt;/li&gt;
&lt;li&gt;取
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法02：选择排序</title>
    <link href="http://muchstudy.com/2017/04/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9502%EF%BC%9A%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <id>http://muchstudy.com/2017/04/22/排序算法02：选择排序/</id>
    <published>2017-04-22T09:22:17.000Z</published>
    <updated>2017-04-29T14:52:07.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><p>&emsp;&emsp;首先，从[0,len]中找到数组中最小的元素，让它与第一个元素交换。接着从[1,len]中找出最小的元素，让它与第二个元素交换。循环往复，最终使得数组从小到大排序。</p><p>可视化效果：<a href="http://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html" target="_blank">这里</a></p><h2 id="Javascript实现"><a href="#Javascript实现" class="headerlink" title="Javascript实现"></a>Javascript实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by YiYing on 2017/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">W</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Selection</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择排序算法实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Selection.prototype.sort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="keyword">this</span>.arr.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> min = i;</span><br><span class="line">            <span class="comment">//找出最小元素</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>;j&lt;len;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.less(j,min))&#123;</span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//把最小元素放到最前面</span></span><br><span class="line">            <span class="keyword">this</span>.exchange(i,min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断m是否小于n</span></span><br><span class="line"><span class="comment">     * @param m</span></span><br><span class="line"><span class="comment">     * @param n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Selection.prototype.less = <span class="function"><span class="keyword">function</span> (<span class="params">m,n</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//可根据不同的数据类型设置比对规则，比如json。这里适用于数字与字符串。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.arr[m]&lt;<span class="keyword">this</span>.arr[n];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换数组中m与n的位置</span></span><br><span class="line"><span class="comment">     * @param m</span></span><br><span class="line"><span class="comment">     * @param n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Selection.prototype.exchange = <span class="function"><span class="keyword">function</span> (<span class="params">m,n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> swap    = <span class="keyword">this</span>.arr[m];</span><br><span class="line">        <span class="keyword">this</span>.arr[m] = <span class="keyword">this</span>.arr[n];</span><br><span class="line">        <span class="keyword">this</span>.arr[n] = swap;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印排序后的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Selection.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.arr);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否已排序</span></span><br><span class="line"><span class="comment">     * @returns &#123;boolean&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Selection.prototype.isSorted = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="keyword">this</span>.arr.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.less(i,i<span class="number">-1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    W.Selection = Selection;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> selection = <span class="keyword">new</span> Selection(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"排序前："</span>+selection.isSorted());</span><br><span class="line">    selection.sort();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"排序后："</span>+selection.isSorted());</span><br><span class="line">    selection.show();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.algs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Selection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 插入排序实现逻辑</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = i;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (less(arr[j], arr[min])) min = j;</span><br><span class="line">            &#125;</span><br><span class="line">            exchange(arr, i, min);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 比较m是否小于n</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> m</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m &lt; n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 交换m与n的位置</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> m</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> n</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exchange</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> swap = a[m];</span><br><span class="line">        a[m] = a[n];</span><br><span class="line">        a[n] = swap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">            System.out.print(a[i]+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = &#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    Selection.sort(arr);</span><br><span class="line">    Selection.show(arr);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>运行时间和输入无关。</p><blockquote><p>为了找出最小元素而扫描一遍数组并不能为下一遍扫描提供信息。长度一致，一个有序的数组或值全部相当的数组和一个无序的数组排序所需的时间一致。</p></blockquote></li><li><p>数据移动是最少的。</p><blockquote><p>一个长度为N的数组只需要N次交换即可完成排序。</p></blockquote></li><li><p>不稳定。</p><blockquote><p>无法保证排序前与排序后<strong>重复元素</strong>的相对顺序一致。举例：序列[5,8,5,2,9]，第一遍选择第1个元素5会和2交换，那么原序列中两个5的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。</p></blockquote></li><li>原地排序。</li><li>时间复杂度为：平方级别。</li><li>空间复杂度为：常数级别。</li></ul><p>GitHub：<a href="https://github.com/AlbertKnag/algs-practice" target="_blank" rel="noopener">https://github.com/AlbertKnag/algs-practice</a></p><p>上一篇：<a href="http://muchstudy.com/2017/04/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9501%EF%BC%9A%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/">排序算法01：冒泡排序</a><br>下一篇：<a href="http://muchstudy.com/2017/04/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9503%EF%BC%9A%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/">排序算法03：插入排序</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法介绍&quot;&gt;&lt;a href=&quot;#算法介绍&quot; class=&quot;headerlink&quot; title=&quot;算法介绍&quot;&gt;&lt;/a&gt;算法介绍&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;首先，从[0,len]中找到数组中最小的元素，让它与第一个元素交换。接着从[1,len]中找出最小的
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>排序算法01：冒泡排序</title>
    <link href="http://muchstudy.com/2017/04/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9501%EF%BC%9A%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>http://muchstudy.com/2017/04/22/排序算法01：冒泡排序/</id>
    <published>2017-04-22T03:11:20.000Z</published>
    <updated>2017-04-29T14:51:40.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="算法介绍"><a href="#算法介绍" class="headerlink" title="算法介绍"></a>算法介绍</h2><blockquote><p>步骤：</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对第0个到第n-1个数据做同样的工作。这时，最大的数就“浮”到了数组最后的位置上。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol></blockquote><p>可视化效果：<a href="http://www.cs.usfca.edu/~galles/visualization/ComparisonSort.html" target="_blank">这里</a></p><h2 id="Javascript实现"><a href="#Javascript实现" class="headerlink" title="Javascript实现"></a>Javascript实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by YiYing on 2017/4/22.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">W</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Bubble</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.arr = arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序算法实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Bubble.prototype.sort = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="keyword">this</span>.arr.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="comment">//将最大的元素不断的沉到底部</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;len-i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.less(j+<span class="number">1</span>,j))&#123;</span><br><span class="line">                    <span class="keyword">this</span>.exchange(j+<span class="number">1</span>,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断m是否小于n</span></span><br><span class="line"><span class="comment">     * @param m</span></span><br><span class="line"><span class="comment">     * @param n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Bubble.prototype.less = <span class="function"><span class="keyword">function</span> (<span class="params">m,n</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//可根据不同的数据类型设置比对规则，比如json。这里适用于数字与字符串。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.arr[m]&lt;<span class="keyword">this</span>.arr[n];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换数组中m与n的位置</span></span><br><span class="line"><span class="comment">     * @param m</span></span><br><span class="line"><span class="comment">     * @param n</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Bubble.prototype.exchange = <span class="function"><span class="keyword">function</span> (<span class="params">m,n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> swap    = <span class="keyword">this</span>.arr[m];</span><br><span class="line">        <span class="keyword">this</span>.arr[m] = <span class="keyword">this</span>.arr[n];</span><br><span class="line">        <span class="keyword">this</span>.arr[n] = swap;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印排序后的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Bubble.prototype.show = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.arr);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否已排序</span></span><br><span class="line"><span class="comment">     * @returns &#123;boolean&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Bubble.prototype.isSorted = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="keyword">this</span>.arr.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.less(i,i<span class="number">-1</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    W.Bubble = Bubble;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">21</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> bubble = <span class="keyword">new</span> Bubble(arr);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"排序前："</span>+bubble.isSorted());</span><br><span class="line">    bubble.sort();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"排序后："</span>+bubble.isSorted());</span><br><span class="line">    bubble.show();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>稳定。相同元素排序后能保持排序前的相对顺序。</li><li>原地排序。</li><li>时间复杂度为：平方级别。</li><li>空间复杂度为：常数级别。</li></ol><p>GitHub：<a href="https://github.com/AlbertKnag/algs-practice" target="_blank" rel="noopener">https://github.com/AlbertKnag/algs-practice</a></p><p>下一篇：<a href="http://muchstudy.com/2017/04/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%9502%EF%BC%9A%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/">排序算法02：选择排序</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;算法介绍&quot;&gt;&lt;a href=&quot;#算法介绍&quot; class=&quot;headerlink&quot; title=&quot;算法介绍&quot;&gt;&lt;/a&gt;算法介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;比较相邻的元素。如果第一个比第二个大，就交换他们两个。&lt;/li&gt;
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>循环删除数组元素的几种姿势</title>
    <link href="http://muchstudy.com/2017/04/07/%E5%BE%AA%E7%8E%AF%E5%88%A0%E9%99%A4%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9A%84%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF/"/>
    <id>http://muchstudy.com/2017/04/07/循环删除数组元素的几种姿势/</id>
    <published>2017-04-07T03:16:54.000Z</published>
    <updated>2019-12-01T04:09:48.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>&emsp;&emsp;在码代码的过程中，经常会遇到在循环中移除指定元素的需求。按照常规的思路，直接一个for循环，然后在循环里面来个if判断，在判断中删除掉指定元素即可。但是实际情况往往不会像预想的那样顺利运行。下面以一段Javascript代码为例演示这一过程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="comment">//打印数组中的情况，便于跟踪数组中数据的变化</span></span><br><span class="line">        <span class="built_in">console</span>.log(i+<span class="string">"="</span>+arr[i]);</span><br><span class="line">        <span class="comment">//删除掉所有为2的元素</span></span><br><span class="line">        <span class="keyword">if</span>(arr[i]==<span class="number">2</span>)&#123;</span><br><span class="line">            arr.splice(i,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><img src="/2017/04/07/循环删除数组元素的几种姿势/数组中元素删除.jpg"><p>&emsp;&emsp;从最终的结果可以看到实际上只删除掉了匹配的其中一个元素，而另外一个元素还存在。</p><p>&emsp;&emsp;从打印出的运行过程不难发现，原因为当删除掉了一个元素后，数组的索引发生的变化，造成了程序的异常。</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>找到了问题的原因，就不难解决问题了。</p><h3 id="姿势一"><a href="#姿势一" class="headerlink" title="姿势一"></a>姿势一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="comment">//打印数组中的情况，便于跟踪数组中数据的变化</span></span><br><span class="line">        <span class="built_in">console</span>.log(i+<span class="string">"="</span>+arr[i]);</span><br><span class="line">        <span class="comment">//删除掉所有为2的元素</span></span><br><span class="line">        <span class="keyword">if</span>(arr[i]==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="comment">//注意对比这行代码：删除元素后调整i的值</span></span><br><span class="line">            arr.splice(i--,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>上面的代码看起来不大好理解，有没有看起来更易于理解的代码呢？请看下面</p><h3 id="姿势二"><a href="#姿势二" class="headerlink" title="姿势二"></a>姿势二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">var</span> len = arr.length<span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//start from the top</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=len;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i+<span class="string">"="</span>+arr[i]);</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==<span class="number">2</span>)&#123;</span><br><span class="line">            arr.splice(i,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>从后往前遍历可以有效解决问题，也容易理解，那么还有没有跟简洁的实现呢？接着看下面代码</p><h3 id="姿势三"><a href="#姿势三" class="headerlink" title="姿势三"></a>姿势三</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">var</span> i = arr.length;</span><br><span class="line">    <span class="keyword">while</span>(i--)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i+<span class="string">"="</span>+arr[i]);</span><br><span class="line">        <span class="keyword">if</span>(arr[i]==<span class="number">2</span>)&#123;</span><br><span class="line">            arr.splice(i,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>使用<code>while(i--)</code>,i为数组下标，个人觉得这是最简洁、高效的代码实现了。</p><p>作者公众号：<br><img src="http://muchstudy.com/2019/11/10/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9AJS%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/YIYING.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;在码代码的过程中，经常会遇到在循环中移除指定元素的需求。按照常规的思路，直接一个for循环，然后在循环里面来个if判
      
    
    </summary>
    
      <category term="Programmer" scheme="http://muchstudy.com/categories/Programmer/"/>
    
    
  </entry>
  
  <entry>
    <title>自营电商平台业务梳理</title>
    <link href="http://muchstudy.com/2017/03/29/%E7%94%B5%E5%95%86%E4%B8%9A%E5%8A%A1%E6%A2%B3%E7%90%86/"/>
    <id>http://muchstudy.com/2017/03/29/电商业务梳理/</id>
    <published>2017-03-29T02:33:14.000Z</published>
    <updated>2017-03-29T02:52:58.519Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;目前的电商越来越深入人心，一些有自家产品的企业也跃跃欲试，希望能建立自己的网上销售平台，不再满足于借助第三方系统，比如天猫旗舰店等。希望 “All Control”。</p><p>&emsp;&emsp;针对这样的需求，对自营电商平台的业务做了一个简单的梳理，整理出如下这张图。</p><img src="/2017/03/29/电商业务梳理/电商.png" title="电商业务梳理">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;目前的电商越来越深入人心，一些有自家产品的企业也跃跃欲试，希望能建立自己的网上销售平台，不再满足于借助第三方系统，比如天猫旗舰店等。希望 “All Control”。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;针对这样的需求，对自营电商平台的业务做了一个
      
    
    </summary>
    
      <category term="其它" scheme="http://muchstudy.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
  </entry>
  
  <entry>
    <title>nginx+tomcat+memcached配置session共享</title>
    <link href="http://muchstudy.com/2017/03/17/nginx-tomcat-memcached%E9%85%8D%E7%BD%AEsession%E5%85%B1%E4%BA%AB/"/>
    <id>http://muchstudy.com/2017/03/17/nginx-tomcat-memcached配置session共享/</id>
    <published>2017-03-17T08:05:43.000Z</published>
    <updated>2017-03-17T08:38:38.169Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>&emsp;&emsp;两台tomcat，通过nginx来实现负载均衡，使用memcached来解决session共享问题。</p><h2 id="tomcat配置"><a href="#tomcat配置" class="headerlink" title="tomcat配置"></a>tomcat配置</h2><h3 id="分别拷贝jar包到tomcatA、tomcatB的lib目录下"><a href="#分别拷贝jar包到tomcatA、tomcatB的lib目录下" class="headerlink" title="分别拷贝jar包到tomcatA、tomcatB的lib目录下"></a>分别拷贝jar包到tomcatA、tomcatB的lib目录下</h3><p>包含如下这些jar包，从<a href="/2017/03/17/nginx-tomcat-memcached配置session共享/lib.rar" title="这里下载">这里下载</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">asm-3.2.jar</span><br><span class="line">kryo-1.04.jar</span><br><span class="line">kryo-serializers-0.11.jar</span><br><span class="line">memcached-session-manager-1.7.0.jar</span><br><span class="line">memcached-session-manager-tc7-1.8.1.jar</span><br><span class="line">minlog-1.2.jar</span><br><span class="line">msm-kryo-serializer-1.7.0.jar</span><br><span class="line">reflectasm-1.01.jar</span><br><span class="line">spymemcached-2.7.3.jar</span><br></pre></td></tr></table></figure><h3 id="配置context-xml"><a href="#配置context-xml" class="headerlink" title="配置context.xml"></a>配置context.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">"de.javakaffee.web.msm.MemcachedBackupSessionManager"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">memcachedNodes</span>=<span class="string">"n1:127.0.0.1:11211"</span></span></span><br><span class="line"><span class="tag"><span class="attr">lockingMode</span>=<span class="string">"auto"</span></span></span><br><span class="line"><span class="tag"><span class="attr">sticky</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag"><span class="attr">requestUriIgnorePattern</span>= <span class="string">".*\.(png|gif|jpg|css|js)$"</span></span></span><br><span class="line"><span class="tag"><span class="attr">sessionBackupAsync</span>= <span class="string">"false"</span></span></span><br><span class="line"><span class="tag"><span class="attr">sessionBackupTimeout</span>= <span class="string">"100"</span></span></span><br><span class="line"><span class="tag"><span class="attr">copyCollectionsForSerialization</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">transcoderFactoryClass</span>=<span class="string">"de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">user  nobody;  </span><br><span class="line">worker_processes  4;  </span><br><span class="line">error_log  logs/error.log;  </span><br><span class="line">events &#123;  </span><br><span class="line">    worker_connections  1024;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">http &#123;  </span><br><span class="line">    include       mime.types;  </span><br><span class="line">    default_type  application/octet-stream;  </span><br><span class="line">    sendfile        on;  </span><br><span class="line">    keepalive_timeout  65;  </span><br><span class="line">    gzip  on;  </span><br><span class="line">    upstream  myserver   &#123;  </span><br><span class="line">              server   127.0.0.1:8080;  </span><br><span class="line">              server   127.0.0.1:8081;  </span><br><span class="line">    &#125;  </span><br><span class="line">    server &#123;  </span><br><span class="line">        listen       80;  </span><br><span class="line">        server_name  127.0.0.2;  </span><br><span class="line">        charset utf-8;  </span><br><span class="line">        location / &#123;  </span><br><span class="line">            root   html;  </span><br><span class="line">            index  index.html index.htm;  </span><br><span class="line">            proxy_pass        http://myserver;  </span><br><span class="line">            proxy_set_header  X-Real-IP  $remote_addr;  </span><br><span class="line">            client_max_body_size  100m;  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location ~ ^/(WEB-INF)/ &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        error_page   500 502 503 504  /50x.html;  </span><br><span class="line">        location = /50x.html &#123;  </span><br><span class="line">            root   html;  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>tomcatA的地址为127.0.0.1:8080</li><li>tomcatB的地址为127.0.0.1:8081</li><li>通过在浏览器上输入127.0.0.2，请求会动态分配到A和B上</li></ol><h2 id="验证Session共享是否配置成功"><a href="#验证Session共享是否配置成功" class="headerlink" title="验证Session共享是否配置成功"></a>验证Session共享是否配置成功</h2><p>1.在tomcatA的webapp下新增test.jsp页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=ISO-8859-1&quot;</span><br><span class="line">pageEncoding=&quot;ISO-8859-1&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=ISO-8859-1&quot;&gt;</span><br><span class="line">&lt;title&gt;tomcatA&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">SessionID:&lt;%=session.getId()%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">out.println(&quot;tomcatA&quot;);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2.在tomcatB的webapp下新增test.jsp页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=ISO-8859-1&quot;</span><br><span class="line">  pageEncoding=&quot;ISO-8859-1&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=ISO-8859-1&quot;&gt;</span><br><span class="line">&lt;title&gt;tomcatB&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  SessionID:&lt;%=session.getId()%&gt;</span><br><span class="line">  &lt;%</span><br><span class="line">    out.println(&quot;tomcatB&quot;);</span><br><span class="line">  %&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;浏览器请求127.0.0.2/projectName/test.jsp，多刷新几下，如果seseionID一直不变，而不断切换A和B，则证明配置成功。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;两台tomcat，通过nginx来实现负载均衡，使用memcached来解决session共享问题。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
      <category term="其它" scheme="http://muchstudy.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript数组倒序算法与性能对比</title>
    <link href="http://muchstudy.com/2017/03/14/JavaScript%E6%95%B0%E7%BB%84%E5%80%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B8%8E%E6%80%A7%E8%83%BD%E5%AF%B9%E6%AF%94/"/>
    <id>http://muchstudy.com/2017/03/14/JavaScript数组倒序算法与性能对比/</id>
    <published>2017-03-14T03:38:53.000Z</published>
    <updated>2017-03-14T04:56:35.544Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近正在撸算法第四版，关于JS中数组的倒序，想到如下几种实现方式。</p><h2 id="for-push"><a href="#for-push" class="headerlink" title="for push"></a>for push</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [],len=arr.length<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> right=len;right&gt;=<span class="number">0</span>;right--)&#123;</span><br><span class="line">        result.push(arr[right])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(result.join(<span class="string">""</span>));</span><br><span class="line">&#125;)(<span class="string">"字符倒序测试."</span>.split(<span class="string">""</span>));</span><br></pre></td></tr></table></figure><h2 id="for-swap-half"><a href="#for-swap-half" class="headerlink" title="for swap half"></a>for swap half</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> left = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> right = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> length = array.length;</span><br><span class="line">    <span class="keyword">for</span> (left = <span class="number">0</span>; left &lt; length / <span class="number">2</span>; left += <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        right = length - <span class="number">1</span> - left;</span><br><span class="line">        <span class="keyword">var</span> temporary = array[left];</span><br><span class="line">        array[left] = array[right];</span><br><span class="line">        array[right] = temporary;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(array.join(<span class="string">""</span>));</span><br><span class="line">&#125;)(<span class="string">"字符倒序测试."</span>.split(<span class="string">""</span>));</span><br></pre></td></tr></table></figure><h2 id="native-reverse"><a href="#native-reverse" class="headerlink" title="native reverse"></a>native reverse</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = arr.reverse();</span><br><span class="line">    <span class="built_in">console</span>.log(result.join(<span class="string">""</span>));</span><br><span class="line">&#125;)(<span class="string">"字符倒序测试."</span>.split(<span class="string">""</span>));</span><br></pre></td></tr></table></figure><h2 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h2><p>&emsp;&emsp;本来想再写一个性能测试的样例，在写之前感觉应该已经有人做过这件事了，所以Google了一下，找到Stackoverflow上<a href="http://stackoverflow.com/questions/5276953/what-is-the-most-efficient-way-to-reverse-an-array-in-javascript" target="_blank" rel="noopener"><strong>这篇答案</strong></a>，循着找到一个很全面的性能测试样例，点击<a href="https://jsperf.com/js-array-reverse-vs-while-loop/66" target="_blank" rel="noopener"><strong>这里</strong></a>。点击<strong>Run tests</strong>即能在对应的测试环境下测试各种算法的性能情况。</p><p>在我本地环境（Testing in Chrome 56.0.2924 / Windows 10 0.0.0）的测试结果如图：</p><img src="/2017/03/14/JavaScript数组倒序算法与性能对比/倒序算法性能对比.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;最近正在撸算法第四版，关于JS中数组的倒序，想到如下几种实现方式。&lt;/p&gt;
&lt;h2 id=&quot;for-push&quot;&gt;&lt;a href=&quot;#for-push&quot; class=&quot;headerlink&quot; title=&quot;for push&quot;&gt;&lt;/a&gt;for push&lt;
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>算法的时间复杂度</title>
    <link href="http://muchstudy.com/2017/02/26/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>http://muchstudy.com/2017/02/26/算法的时间复杂度/</id>
    <published>2017-02-26T14:30:45.000Z</published>
    <updated>2017-02-26T14:44:58.478Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;关于算法的时间复杂度经常会看到比如logN,NlogN等。之前一直觉得搞不清楚，来一个问题不知道怎么得出该算法的时间复杂度。最近在撸《算法》第四版,是时候祭出下面这张图了。</p><img src="/2017/02/26/算法的时间复杂度/时间复杂度.jpg"><p>&emsp;&emsp;时间复杂度这个东西，其实更准确点说应该是描述一个算法在问题规模不断增大时对应的时间增长曲线。所以，这些增长数量级并不是一个准确的性能评价，可以理解为一个近似值，时间的增长近似于logN、NlogN的曲线。</p><img src="/2017/02/26/算法的时间复杂度/增长曲线.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;关于算法的时间复杂度经常会看到比如logN,NlogN等。之前一直觉得搞不清楚，来一个问题不知道怎么得出该算法的时间复杂度。最近在撸《算法》第四版,是时候祭出下面这张图了。&lt;/p&gt;
&lt;img src=&quot;/2017/02/26/算法的时间复杂度/时间复
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript实现二分查找</title>
    <link href="http://muchstudy.com/2017/02/22/JavaScript%E5%AE%9E%E7%8E%B0%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    <id>http://muchstudy.com/2017/02/22/JavaScript实现二分查找/</id>
    <published>2017-02-21T16:59:42.000Z</published>
    <updated>2019-12-22T15:14:27.311Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近撸《算法》第四版，开篇就是一个Java版本的二分查找算法，下面以JS实现一下。</p><p>&emsp;&emsp;二分查找的前提为：数组、有序。逻辑为：优先和数组的中间元素比较，如果等于中间元素，则直接返回。如果不等于则取半继续查找。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分查找，递归实现。</span></span><br><span class="line"><span class="comment"> * @param target</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> * @param start</span></span><br><span class="line"><span class="comment"> * @param end</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params">target,arr,start,end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( start &gt; end)&#123;<span class="keyword">return</span> <span class="number">-1</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> start   = start || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> end     = end || arr.length<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mid = <span class="built_in">parseInt</span>(start+(end-start)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(target==arr[mid])&#123;</span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target&gt;arr[mid])&#123;</span><br><span class="line">        <span class="keyword">return</span> binarySearch(target,arr,mid+<span class="number">1</span>,end);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> binarySearch(target,arr,start,mid<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 有序的二分查找，返回-1或存在的数组下标。不使用递归实现。</span></span><br><span class="line"><span class="comment"> * @param target</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> * @returns &#123;*&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params">target,arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> start   = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> end     = arr.length<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start&lt;=end)&#123;</span><br><span class="line">        <span class="keyword">var</span> mid = <span class="built_in">parseInt</span>(start+(end-start)/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span>(target==arr[mid])&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target&gt;arr[mid])&#123;</span><br><span class="line">            start   = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            end     = mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;写完有序，自然而然的想到了无序的情况如何使用二分查找呢？马上想到先使用快排分组，分好组再二分。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 无序的二分查找。返回true/false</span></span><br><span class="line"><span class="comment"> * @param target</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params">target,arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (arr.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//使用快速排序。以mid为中心划分大小，左边小，右边大。</span></span><br><span class="line">        <span class="keyword">var</span> left    = [];</span><br><span class="line">        <span class="keyword">var</span> right   = [];</span><br><span class="line">        <span class="comment">//选择第一个元素作为基准元素(基准元素可以为任意一个元素)</span></span><br><span class="line">        <span class="keyword">var</span> pivot   = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//由于取了第一个元素，所以从第二个元素开始循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> item = arr[i];</span><br><span class="line">            <span class="comment">//大于基准的放右边，小于基准的放左边</span></span><br><span class="line">            item&gt;pivot ? right.push(item) : left.push(item);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到经过排序的新数组</span></span><br><span class="line">        <span class="keyword">if</span>(target==pivot)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target&gt;pivot)&#123;</span><br><span class="line">            arr     = right;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            arr     = left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;写完用快速排序实现的无序二分查找，仔细想了一下该算法的时间复杂度，发现还不如直接一个for循环来得快……囧</p><hr><p>&emsp;&emsp;睡完一觉起来感觉也不是一无是处，这是一个用时间换空间的好办法，大规模问题下有助于节省内存开销。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;最近撸《算法》第四版，开篇就是一个Java版本的二分查找算法，下面以JS实现一下。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;二分查找的前提为：数组、有序。逻辑为：优先和数组的中间元素比较，如果等于中间元素，则直接返回。如果不等于则取半继续查找。&lt;/p&gt;
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>怎样全面了解应聘者的实力</title>
    <link href="http://muchstudy.com/2017/02/12/%E6%80%8E%E6%A0%B7%E5%85%A8%E9%9D%A2%E4%BA%86%E8%A7%A3%E5%BA%94%E8%81%98%E8%80%85%E7%9A%84%E5%AE%9E%E5%8A%9B/"/>
    <id>http://muchstudy.com/2017/02/12/怎样全面了解应聘者的实力/</id>
    <published>2017-02-12T02:44:46.000Z</published>
    <updated>2017-02-22T02:01:52.707Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;怎样在有限的时间内了解应聘者的综合实力是一件值得思考的问题。针对这一问题，来聊一聊我认为可行的办法。</p><h2 id="一份有针对性的试题"><a href="#一份有针对性的试题" class="headerlink" title="一份有针对性的试题"></a>一份有针对性的试题</h2><blockquote><p>技术点的考察</p></blockquote><p>&emsp;&emsp;一份好的试题能够判断出技术人员基础技术知识掌握的情况，不耽搁面试者时间即能筛选出符合基础门槛的求职者。</p><p>&emsp;&emsp;这套试题个人认为应当着重考察基础，不应当炫技。反感一些头脑风暴，一些在工作当中基本不会用到的技术怪异用法等。不应该为了“考”面试者而出题，这样就有些变味儿了。所有试题始终贯穿目的、初心，实在最好。</p><h2 id="多问开放性问题"><a href="#多问开放性问题" class="headerlink" title="多问开放性问题"></a>多问开放性问题</h2><blockquote><p>技术面与深度的考察</p></blockquote><p>&emsp;&emsp;<strong>开放性的问题更能全面的了解一个人的技术水平。</strong>对于前端职位面试，比如我会问下面这些问题：</p><ul><li>说说你了解的盒模型，定位与浮动</li><li>说说你对HTTP缓存的理解</li><li>说说你对前端模块化开发的理解</li><li>说说你了解的前端性能优化手段</li><li>你用过哪些MV*框架，为什么要用？</li></ul><p>&emsp;&emsp;之所以要问开放性的问题，就是要避免让应聘者跟着面试官的思路走，给予面试者最大的发挥空间。能力强者对于这类开放性的问题有无限的发挥空间，与之相反，发挥空间就很窄了。</p><p>&emsp;&emsp;这类问题不仅能看出应聘者的技术宽度，还能看出技术深度。</p><p>&emsp;&emsp;不过，对于此类开放性的问题，面试官应当做好控场，避免跑火车，引导面试者更深入的阐述问题。</p><h2 id="了解过往工作经历"><a href="#了解过往工作经历" class="headerlink" title="了解过往工作经历"></a>了解过往工作经历</h2><blockquote><p>更加立体的考察</p></blockquote><p>&emsp;&emsp;<strong>了解面试者的过往工作经历与细节可以更立体的了解一个人综合能力。</strong>比如我会问下面这些问题：</p><ul><li>谈一谈目前你的工作内容</li><li>哪些参与的项目让你印象深刻？你在当中充当什么角色？有些什么收获？</li><li>举例说一说你写过的有成就感的前端代码</li></ul><p>&emsp;&emsp;通过对过往经历的了解，一个直观的画像就呈现了出来，可以大致评估出应聘者目前的<strong>综合能力</strong>处于什么阶段，如果招聘过来可以安排些什么工作。</p><h2 id="了解工作之外对技术的投入"><a href="#了解工作之外对技术的投入" class="headerlink" title="了解工作之外对技术的投入"></a>了解工作之外对技术的投入</h2><blockquote><p>成长潜力的考察</p></blockquote><p>&emsp;&emsp;<strong>了解工作之外的技术投入可以了解到应聘者的技术热情、成长潜力。</strong>针对这一部分，我会通过如下问题来了解：</p><ul><li>平时通过什么途径，从哪些地方了解与学习新技术、了解技术前沿</li><li>有没有个人博客，有没有Github、stackoverflow账号</li><li>平时有参与过技术沙龙吗？</li><li>在工作之外，有没有利用技术鼓捣一点儿东西</li><li>最近有没有在学习、了解一些技术方面的东西</li><li>你是如何沉淀工作中的收获，沉淀学习到的新技术</li></ul><p>&emsp;&emsp;如果有个人博客，可以通过博客内容看出应聘者的成长路线，通过Github中的代码可以看出代码水平如何。</p><p>&emsp;&emsp;通过上述这些问题，基本上能确定应聘者是否是一个有进取心的人。<strong>进取心与追求卓越是技术人员成长的钥匙。</strong></p><p>&emsp;&emsp;如果应聘者目前的技术能力并不强，但有强烈的进取心、知道如何去补齐短板，这样的人我相信技术不是障碍。因为技术就摆在那儿，只要你愿意去拿就总会拿到的。</p><p>&emsp;&emsp;强烈进取心、追求卓越、踏实、靠谱、有责任心、容易沟通，这些特质相对于技术是很难学得来的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;怎样在有限的时间内了解应聘者的综合实力是一件值得思考的问题。针对这一问题，来聊一聊我认为可行的办法。&lt;/p&gt;
&lt;h2 id=&quot;一份有针对性的试题&quot;&gt;&lt;a href=&quot;#一份有针对性的试题&quot; class=&quot;headerlink&quot; title=&quot;一份有针
      
    
    </summary>
    
      <category term="Thinking" scheme="http://muchstudy.com/categories/Thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>关于公司招聘的一些思考</title>
    <link href="http://muchstudy.com/2017/02/11/%E5%85%B3%E4%BA%8E%E5%85%AC%E5%8F%B8%E6%8B%9B%E8%81%98%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83/"/>
    <id>http://muchstudy.com/2017/02/11/关于公司招聘的一些思考/</id>
    <published>2017-02-11T08:55:55.000Z</published>
    <updated>2017-02-11T14:20:46.944Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;过完年，陆陆续续的招聘启动了，新年上班第一周就面了几个前来应聘前端岗的技术人员，面完后，一些思考不得不一吐为快。</p><h2 id="关于技术人员"><a href="#关于技术人员" class="headerlink" title="关于技术人员"></a>关于技术人员</h2><p>&emsp;&emsp;通过对技术人员的面试，发现相同工作经验的技术人员间能力差异巨大。一些工作好几年的技术人员的技术实力明显还徘徊在入门水平。面对如此现状，不由得引发思考，是何种原因造成了如此结果？</p><p>&emsp;&emsp;接触得越来越多之后，发现这些人都有如下这些公共特点：</p><ul><li><strong>长期呆在舒适区中。</strong>一份工作可能第一年收获很多，之后便处于舒适区中一年一年的重复做着相同的事情。</li><li><strong>缺乏思考。</strong>即使是做重复的事情并不会去思考如何把重复变得不再重复。</li><li><strong>对技术缺乏热情。</strong>跟这些人聊技术，会明显感觉到十分生硬，没有生机活力。而另外一些人则是滔滔不绝，一谈到技术就有说不完的东西。</li><li><p><strong>呆在自己的小圈子中。</strong>这些人技术的提升完全依靠曾经所做的项目。在我的面试问题中最后有这么一个问题：“你通过哪些途径学习了解技术？”。这些人的回答往往是生硬的说看书和看一些资料。而另外一些人的回答则丰富很多，比如牛人的博客、技术论坛、各类技术网站、通过RSS长期订阅技术资源、参加技术沙龙等。</p></li><li><p><strong>缺乏进取心。</strong>不会主动积极的去了解新技术，新事物。业余时间很少投入到技术之中。</p></li><li><strong>无紧迫感。</strong>干一天算一天，无短期、长期规划与期望。</li></ul><h2 id="关于公司与团队影响力"><a href="#关于公司与团队影响力" class="headerlink" title="关于公司与团队影响力"></a>关于公司与团队影响力</h2><p>&emsp;&emsp;通过招聘，越来越感受到公司与团队在技术圈子中影响力的重要。</p><p>&emsp;&emsp;显然，影响力大的团队更容易吸引优秀技术人员的加入。一个团队在技术社区中的影响力离不开对社区的贡献。在我看来，对技术的分享是一件共赢的事情。对于分享者来说，是工作的总结与技术的沉淀，同时增加影响力。对接收者来说，是一个不错的经验学习与探讨的机会。</p><p>&emsp;&emsp;对于一个产品研发团队来讲，基础通用组件的开源、技术研究的总结、技术选型的结论、产品研发过程中的各种方法思路的改进都是一些值得沉淀与分享的东西。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;过完年，陆陆续续的招聘启动了，新年上班第一周就面了几个前来应聘前端岗的技术人员，面完后，一些思考不得不一吐为快。&lt;/p&gt;
&lt;h2 id=&quot;关于技术人员&quot;&gt;&lt;a href=&quot;#关于技术人员&quot; class=&quot;headerlink&quot; title=&quot;关于技术
      
    
    </summary>
    
      <category term="Thinking" scheme="http://muchstudy.com/categories/Thinking/"/>
    
    
  </entry>
  
  <entry>
    <title>产品研发记录05：产品研发人员应当具备的特质</title>
    <link href="http://muchstudy.com/2017/02/10/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E8%AE%B0%E5%BD%9505%EF%BC%9A%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E4%BA%BA%E5%91%98%E9%9C%80%E8%A6%81%E5%85%B7%E6%9C%89%E7%9A%84%E7%89%B9%E8%B4%A8/"/>
    <id>http://muchstudy.com/2017/02/10/产品研发记录05：产品研发人员需要具有的特质/</id>
    <published>2017-02-10T13:47:45.000Z</published>
    <updated>2017-02-10T16:16:07.250Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/02/10/产品研发记录05：产品研发人员需要具有的特质/产品研发人员应当具备的特质.jpg"><p>&emsp;&emsp;目前负责一款基础开发框架产品的研发，该产品的受众群体为所有的项目开发人员。该基础开发框架产品的核心价值在与提升开发效率、统一技术路线、沉淀技术积累。</p><p>&emsp;&emsp;领导一直在说要补充人员到基础开发框架产品组里面，可惜一直找不到合适的人员补充进来。</p><p>&emsp;&emsp;对于什么样的人员才<strong>“合适”</strong>，我的理解如下：</p><h2 id="一定的技术深度与广度"><a href="#一定的技术深度与广度" class="headerlink" title="一定的技术深度与广度"></a>一定的技术深度与广度</h2><p>&emsp;&emsp;对于技术深度，保证了代码的高质量。这里的质量包含了代码的逻辑清晰，结构优雅，性能强劲。至少能保证不让挑剔的开发人员吐槽产品研发人员的代码问题。</p><p>&emsp;&emsp;对于技术广度，保证在产品的新功能开发时能够选择最优的技术方案。如果广度不够，那么在做功能开发时，往往会以最熟悉的方式仅仅完成功能需求而已，而很难考虑到怎么样做才是最好的。</p><h2 id="丰富的项目开发经验"><a href="#丰富的项目开发经验" class="headerlink" title="丰富的项目开发经验"></a>丰富的项目开发经验</h2><p>&emsp;&emsp;对于用于提升项目开发效率与质量的基础开发框架，本来就是为了实际业务项目而生。如果没有实际的项目开发经验，就很难设身处地的考虑问题，很难去思考如何去设计基础开发框架来解决项目开发中的问题。另外，对于项目开发人员提出来的问题，很难换位去体会开发人员在产品使用中的痛苦，从而更好优化基础开发框架产品。</p><p>&emsp;&emsp;另外，丰富的项目开发经验有助于总结提炼出项目开发中的通用部分，抽取到产品当中来，以统一的解决方案来解决相同的问题。</p><p>&emsp;&emsp;对于产品功能而言，应当尽量避免鸡肋的功能，不能解决项目开发痛点的功能。</p><h2 id="好奇心"><a href="#好奇心" class="headerlink" title="好奇心"></a>好奇心</h2><p>&emsp;&emsp;好奇心有助于技术人员去探寻问题的本质，从而从根本上解决问题。最烦躁遇到问题不深究其中的原因，而是从表面上打补丁，一个又一个，跟电线杆上的牛皮癣一样让人十分不舒服。</p><p>&emsp;&emsp;好奇心还有助于技术人员去接收学习新的技能与知识点。</p><p>&emsp;&emsp;我希望团队中的每个人都是能够不断成长的，成长带来工作效率的提升，接着带来更多的物质回报，从而形成正向循环。</p><h2 id="追求卓越"><a href="#追求卓越" class="headerlink" title="追求卓越"></a>追求卓越</h2><p>&emsp;&emsp;始终觉得产品研发人员应当是一拨追求卓越的人。</p><p>&emsp;&emsp;只有具备一颗追求卓越的心，才能像工匠一样不断的打磨产品，让产品更加优秀，让产品像一件工艺品、艺术品。</p><p>&emsp;&emsp;一款好的产品就像一个好的技术人员一样，不应该长期保持平庸状态。</p><p>上一篇：<a href="http://muchstudy.com/2017/01/08/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E8%AE%B0%E5%BD%9504%EF%BC%9A%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%E7%9A%84%E6%80%BB%E7%BB%93/">产品研发记录04：关于开源组件选择与技术方案选择的总结</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2017/02/10/产品研发记录05：产品研发人员需要具有的特质/产品研发人员应当具备的特质.jpg&quot;&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;目前负责一款基础开发框架产品的研发，该产品的受众群体为所有的项目开发人员。该基础开发框架产品的核心价值在与提升开发效率、
      
    
    </summary>
    
      <category term="产品研发" scheme="http://muchstudy.com/categories/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>读《禅与摩托车维修艺术》</title>
    <link href="http://muchstudy.com/2017/01/21/%E8%AF%BB%E3%80%8A%E7%A6%85%E4%B8%8E%E6%91%A9%E6%89%98%E8%BD%A6%E7%BB%B4%E4%BF%AE%E8%89%BA%E6%9C%AF%E3%80%8B/"/>
    <id>http://muchstudy.com/2017/01/21/读《禅与摩托车维修艺术》/</id>
    <published>2017-01-21T10:21:15.000Z</published>
    <updated>2017-01-21T14:49:32.507Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/01/21/读《禅与摩托车维修艺术》/禅与摩托车维修艺术.jpg" title="《禅与摩托车维修艺术》"><p>&emsp;&emsp;看到这本书的书名，千万不要认为这是一本讲解摩托车维修的书。实际上，把书名转换为“禅与代码编写的艺术”也是毫无违和感的。</p><p>&emsp;&emsp;实际上这是一本哲学书籍。作者不断的叩问自己，在人迹罕至的心灵高原地带找寻能够囊括万物的终极答案。俗话说人与人斗其乐无穷，通过作者的经历，自己与自己斗才是真正的勇士！</p><p>&emsp;&emsp;读完了全书，对书中所讲述的思想的鬼魂、分析的刀子、心灵的高原地带、理性教会、溶液结晶、公牛两角的两难问题等印象深刻。作者是一位真正的思想者。</p><p>&emsp;&emsp;在很早之前，对中国哲学有所了解。佛家讲万法皆空，独一个“空”字；道家讲道法自然，独一个“道”字。书中的“良质”囊括了东、西方哲学，让西方哲学自苏格拉底、柏拉图、亚里士多德以来建立起来的理性分析，与东方哲学的“不可说”结合了起来。真是条条大路通罗马……</p><p>&emsp;&emsp;《禅与摩托车维修艺术》这本书才IT圈也比较有名。之所以这样，个人认为看完这本书，会让程序的创造者在一摞摞的代码中看到生机，体会到不断琱琢代码的那种成就感，让人体会到coding其实也是一种艺术。因为良质的存在，理性的代码与冰冷的机器中也能涌现出和谐的美感。</p><p><strong>一些值得再读一读的摘录：</strong></p><ul><li><p>这些乡间小路和一般的干道迥然不同，就连沿线居住的居民的生活步调和个性也不一样。他们一直都没有离开过本地，所以可以很悠闲地和你寒暄问候、谈天说地，那感觉好极了。反而是那些早就搬到城市里的人和他们的子子孙孙迷失了，忘记了这种情怀。</p></li><li><p>这的确是件令人迷惘的事，就好像真理已经在敲你的门，而你却说：“走开，我正在寻找真理。”所以真理掉头就走了。</p></li><li><p>他并不是固执的人，心胸也不狭窄，既不懒惰也不愚蠢，所以这件事要解释起来还挺不容易的，有些神秘感，因为在没有答案的地方穷打转是很荒谬的。</p></li><li><p>我提醒他这件事，约翰告诉我，他换过新的皮圈但还是滴水，他说了这些就不再提了，也就是说事情到此为止。如果你试过修理水龙头，但是情况依旧，那就表示你命中注定有个会滴水的水龙头。</p></li><li><p>佛陀或是耶稣坐在电脑和变速器的齿轮旁边修行会像坐在山顶和莲花座上一样自在。如果情形不是如此，那无异于亵渎了佛陀–也就是亵渎了你自己。）</p></li><li><p>为什么会发生这种事情呢？这个问题不断在我脑海中出现，这就是我想要写这本书的原因。为什么他们的动作这样粗鲁呢？他们不像约翰和思薇雅一样害怕科技，他们都是专门人员，然而做起事来却像猩猩一样，没有真正地投入，似乎没有明显的原因。我试着回想那间修理店，就是让我做噩梦的那个地方，想要找出问题的真正答案。</p></li><li><p>但是让我惊讶的是，这些手册编写者的态度和这些修理人员的态度一样，竟然都是旁观者，所以它们可以被称为旁观者的手册。</p></li><li><p>“我的意思是，”我在他打断之前接着说，“就是地心引力定理只存在于人的心里，这也是一种鬼魂！对于别人所相信的鬼魂，我们很容易无知而且自负地就进行攻击，但是对于我们自己心中的鬼魂，我们却非常无知而且盲目地信仰着。”</p></li><li><p>他们还是看着我，所以我继续说：“自然的法则是人类发明的，就像鬼的存在一样。逻辑学、数学也都是如此，所有值得赞美的事，也都是人类的发明。这个世界也是人类所想象出来的，整体来说也就是一种灵界的存在。在古代，我们所居住的这个美妙的世界就被如此视之，它由鬼神所统领，我们之所以能看到这个世界，就是因为鬼神让我们看见，他们是摩西、耶稣基督、释迦牟尼、柏拉图、卢梭、杰弗逊、林肯等等，牛顿是非常好的一位，可算其中最好的一位，所以我们的常识就是由过去成百上千的鬼神所构成的，他们企图在人的生命当中找到他们的地位。”</p></li><li><p>自然的法则是人类发明的，就像鬼的存在一样。</p><blockquote><p>精神永存</p></blockquote></li><li><p>现在把它们放在桌上，即使天气不冷，它们也没有办法平平地躺着。它们似乎有属于自己的往事。</p><blockquote><p>手套的往事</p></blockquote></li><li><p>我相信大部分的骑手都会同意，一旦一辆车陪伴过你许多时光，那么对你来说它就是独一无二的，是别的车子无法取代的。</p><blockquote><p>我们周围的事物同时成就了我们</p></blockquote></li><li><p>你会发现车子已经拥有了属于它自己的声音和节奏，与我的完全不同–不是不如我的，而是不同。</p></li><li><p>培养这种车子的个性正是维修保养的真正目的。</p></li><li><p>如果有人不懂心存感激，而你当面告诉他，那么你就等于是在骂他，这样你什么事都解决不了。</p></li><li><p>他说：“这是天底下最难拍的了。你需要一个三百六十度的广角镜头，你看着这样一片风景，然后看看地上的草，一切都妙不可言。但是一旦你用框子框住，美感就都不见了。”</p></li><li><p>过了一会儿，他说：“这是天底下最难拍的了。你需要一个三百六十度的广角镜头，你看着这样一片风景，然后看看地上的草，一切都妙不可言。但是一旦你用框子框住，美感就都不见了。” 我说：“我想这就是你在汽车里面所见不到的吧！”</p></li><li><p>他对事情的表象比较感兴趣，对于内涵就不然了。这一点很重要，因为这就是他看事情的方法。</p></li><li><p>我是从内涵着手，而他却是从物的表象开始。我看到的是这个铝片的意义，而他看到的却是这个铝片的外观。</p><blockquote><p>解决bug 也是如此</p></blockquote></li><li><p>有些东西你忽略是因为它们非常细微，但有些却是因为它们过于庞大。</p></li><li><p>他们诊断后认为是精神疾病的征兆。</p><blockquote><p>每个人都或多或少的有精神疾病</p></blockquote></li><li><p>我也不知道，因果似乎无法解释他的状况。因果逻辑是思想上的产物，我认为精神疾病先于人的思想。”</p></li><li><p>古典的认知认为这个世界是由一些基本形式组成的，而浪漫的认知则是从它的表象来观察。</p></li><li><p>就我所知，目前还没有人可以真正融合两者，因为这两者之间根本就找不到交会点。</p></li><li><p>从这些观察当中，我们必须加以选择，而我们所选择的和所观察到的，永远不一样，因为经由选择而产生了变化。我们从所观察到的事物当中选出一把沙子，然后称这把沙子为世界。</p></li><li><p>现在有一件很重要的事，就是如何把这两者融合为一，却不伤害到彼此，这种认知法不会拒绝分类，也不会拒绝不分类。这种认知法就是直接把重点放在沙子的来源，也就是无穷的景致之中，这就是我们这位悲惨的博士斐德洛想做的。</p></li><li><p>他所探索的就是隐身在一切科技的背后，在所有现代科学、所有西方思想背后的鬼魂–也就是理性本身。</p></li><li><p>认为人生最终的目的，活着，是一件不可能的事，然而毕竟活着就是人生最终的目的。</p></li><li><p>我想他之所以会这样热切追求理性，是因为他想要在理性身上泄恨，是因为他觉得自己就是由理性塑造出来的。他想要把自己从这样的形象当中解放出来，因此他要把理性给毁了。他用很奇怪的方式达到了他的目标。</p></li><li><p>所以最基本的就是要了解这种理念。约翰看到摩托车的时候，只看到各种不同的结构，于是就厌恶它，然后拒绝进一步的接触。但是在我的眼睛里，我却看到设计者的理念。约翰认为我接触的是各种零件，实际我接触的是各种观念。</p></li><li><p>如果把整个工厂拆毁了，而架构它的理性仍然存在，那么靠着这个理性很容易就可以建造另一座工厂。如果革命能够摧毁一个政府，但是政府背后的理性仍然完整地保存着，那么很快地又可以再建立同样的政府。</p></li><li><p>在这里要提到逻辑的两种方法，归纳法和演绎法。</p></li><li><p>因为一个实验并不会因为没有达到预期的结果就被称为失败了，只有它的结果无法测出假设的真假时才会被称为失败了。</p></li><li><p>一名没有受过训练的旁观者只看到修理人员所付出的劳力，就以为他最主要的工作在于劳力。事实上，这正是他最轻松也是工作上最小的一部分，他最重要的工作就在于仔细观察和精确思考，这就是为什么技术人员往往显得沉默寡言，甚至在做实验的时候有些畏缩。</p></li><li><p>在科学的殿堂里有许多深宅大院……有各种人住在其中，而他们住在这儿的动机也是形形色色，五花八门。</p></li><li><p>是什么把他们带进殿堂里的……答案不一而足……逃避平凡生活的芜杂和无可救药的厌倦；逃离自己欲望的束缚。一个脾气好的人想要逃离喧闹、令人紧张的环境，而来到寂静的高山，在这里你极目远眺，透过静谧清新的空气，愉快地描摹永恒宁静的山色。</p></li><li><p>如果科学方法的目的就是要从一大堆的假设当中选出正确的，然而假设出现的速度远远超过实验所能处理的速度，那么很明显地就来不及证明所有的假设。如果不能够证明所有的假设，那么任何实验的结果都变得很不可靠。这样一来，整个科学的方法就缺乏建立实证知识的目标。</p></li><li><p>运用科学方法的目的，就是要从许多假设当中找出正确的一个，这就是科学的目的。然而我们从科学的历史来看，事实恰恰相反。各种资料、史料、理论和假设不断大量地增加，科学把人从唯一绝对的真理，引向多元、摇摆不定、相对的世界，是造成社会混乱、思想价值混淆的主要元凶。而这一切现象原本是科学要消灭的。</p></li><li><p>但是对现在大部分的人来说，这些基本的需要不再是主要的问题，因而从古代流传下来的理性结构已经不符合所需，从而显露出它真正的面目–在情感上是空虚的，在美学上没有任何表现，而在灵性上更是一片空白。</p></li><li><p>斐德洛不理解这种态度，也不知道该怎么办。由于他研究科学并不是为了个人或是实用的目的，所以这使他完全停顿了下来。这就如同他在观赏爱因斯坦曾经描述过的那座澄静的山，突然在山与山之间裂开了一道沟，里面什么也没有。然后你得慢慢地、十分困难地解释它的由来。起初这些山岭看起来好像会永远存在，其实却可能变成别的东西……很可能只是他自己的幻想，所以他停下来了。</p></li><li><p>我们可以感觉到，虽然我们在谈论其他的事情，山依然存在。我很高兴再来到这里，但也有一点哀伤。有的时候到达目的地还不如在旅途中。</p></li><li><p>最后思考的结果是他想回到学校里去读哲学，他飘荡不定的时期结束了，他现在很积极地追寻着某个目标。</p><blockquote><p>这也代表着菲德洛进入另一个时期</p></blockquote></li><li><p>他才发现他曾经一度认为的世界上唯一的知识–科学，其实只是哲学的一支，哲学比科学宽广许多，甚至更基本。他所问的有关无限假设的问题科学家并不感兴趣，因为这不是科学问题。科学没有办法在研究科学方法的时候不落入会摧毁它所有答案的陷阱。所以他问的问题比科学的层次还要高。于是，斐德洛在哲学当中发现了引领他走向科学那个问题的自然延伸。</p></li><li><p>所以他问的问题比科学的层次还要高。于是，斐德洛在哲学当中发现了引领他走向科学那个问题的自然延伸。</p></li><li><p>如果人类所有已知的知识是一个巨大的体系，那么心灵的高山地带就出现在这个体系的最高处，它是所有思想当中最抽象也是最普遍的。 很少有人到此一游，因为你不能从这一趟旅程当中获得任何实质上的利益。但是就像我们周遭的这一片高山区，它有它自己庄严的美感，所以对某些人来说，即使费尽九牛二虎之力到此一游也是值得的。</p></li><li><p>我通过直觉所了解到的摩托车，就像我存在银行里面的钱。如果我到银行要求看我的钱，他们一定会很奇怪地看着我。因为我的钱并没放在他们的抽屉里，他们没法拿出来给我看，我的钱其实只是电脑存档里面的一个数字。但是这样就够了，因为我相信如果我需要钱的时候，银行会通过他们的系统让我取到钱。同样的，即使我的感官并没有看到真正的钱，但是我仍然有能力感受到我的钱在那儿，随时可以取用。康德的《纯粹理性批判》就是探讨我们如何得到这种直觉的知识，以及如何运用它。</p></li><li><p>他回到美国的中西部念了一个实用的新闻学位，结了婚，先后住在内华达州和新墨西哥州，做一些奇怪的工作，比如记者、科学作家以及工业广告的撰稿人。他有两个孩子，买了一个农场、一匹马、两辆车，然后逐渐地步入中年，身体开始发胖。他对理性的追求似乎已放弃了，这点非常重要，一定要了解，他放弃了。</p></li><li><p>文章一开始就先提到报纸上的一篇文章，说到乡间有一座教堂在入口处挂了一幅电动的啤酒招牌，因为教堂已经卖给人开酒吧。你可以想像得到，这个时候有人笑了起来。这所大学素以举行饮酒派对而闻名，因此两者的形象有些隐隐相合。报上说，有一些人向教会当局抱怨此事。这是一间天主教教堂，奉命处理这些抱怨的神父对整件事情颇为不耐。对他来说，这些人对于教会的本质无知到了令人咋舌的地步。难道他们认为那些砖墙和彩色玻璃就代表教会了 吗？还是屋顶的形状代表教会呢？这种虚伪的虔诚正是教会大力反对的物质主义。这幢建筑本身并非圣地，既然移作他用就算结束了作为一间教堂的任务。 所以电动啤酒招牌是挂在一间酒吧前，而不是教堂前。因此没有办法察觉这种差异的人，只是表现出了他们自己的无知罢了。</p></li><li><p>真正的大学并没有特定的地点，也没有校产；既不支付薪水，也不接受物质的报酬。真正的大学是心灵的世界，是多少世纪以来流传给我们的理性思想，它不存在于任何特定的建筑物之内。这种心灵的世界，许多世纪以来都是 通过一 群所谓的教 授所传递的，而教授这个头衔并不属于真正大学的一部分，大学的本质在于流传下来的 理性的自身。</p></li><li><p>斐德洛认为，理性教会追求的最主要目标，就是苏格拉底一向认为的真理。</p></li><li><p>真正的神职人员在这时就应当表现出他们没有听到这些威胁，因为他们的目标并不是把服务大众放在第一，他们最主要的是要服事真理。 这个就是他所谓的理性教会。毫无疑问这是他长久以来发自内心的感想。</p></li><li><p>如果你对事情有完全的信心，就不太可能产生狂热的态度。就拿太阳来说 吧，没有人会为了它明天会升起而兴奋不已，因为这是必然的现象。如果有人对政治或是宗教狂热，那是因为他对这些目标或是教义没有完全的信心。</p></li><li><p>他希望我批评的是其中缺乏艺术性的连贯，这一向是工程人员最忽视的东西。它和其他与科技相关的事物一样，经常出现在古典和浪漫的对立中。</p></li><li><p>机器没有感受力，除了人施加给它们的东西。要想测验机器的好坏，就看它给你的感受，没有别的测验方法。</p></li><li><p>狄威斯问我：”你的意思是，当我在组合烤肉架的时候，实际上我是在雕刻它？””没错，就是这样。”他想了一想，脸上的笑意愈来愈深。</p></li><li><p>而他真正的想法是，这些规则是作品写好之后才找出来的，作者不是依照这些原则来写作。</p></li><li><p>有一些学生的作品由于事先经过周密的思考，注意是否符合修辞学，因此读起来很乏味，仿佛其中的确有点蜜汁，但却无法汹涌而出。但是你又如何教学生那些无法事先周密策划的东西呢？这似乎是不可能达到的要求。</p></li><li><p>大部分人望着灵性的高峰，但是一生从来不曾攀上过，只是听听别人的经验就已经很满足，而自己不愿意花费任何心血。有一些人则是靠着有经验的向导，他们知道最安全的路，因而能够很顺利地到达他们的目的地。 但是还有另外一批人，不但没有经验，而且不太相信别人的经验，想要走出自己的路。其中很少有人能成功，但是总有一些靠着自己的意志、运气还有上天的恩典而做到了。 那些成功的人要比别人更明白，其实登山并没有惟一或是固定的路线，有多少这样的人物就有多少条路。</p></li><li><p>每件事都有无穷的假设，你观察得愈多你看到得就愈多。</p></li><li><p>她之所以写不出有关波斯曼的事，是因为她想不出波斯曼有什么值得重复写下来的地方。</p></li><li><p>她之所以写不出有关波斯曼的事，是因为她想不出波斯曼有什么值得重复写下来的地方。很奇怪，她竟然不知道自己可以从不同的角度观察，而不要在乎别人说过什么。而把题材缩减到一块砖就突破了她的瓶颈。因为很明显地，她必须直接地、不受任何阻碍地观察这块砖。</p><blockquote><p>学位和评分保证了最低标准而不是野蛮生长</p></blockquote></li><li><p>而在大学里，情况就复杂多了，你必须要让老师觉得，虽然你实际是在模仿，但是表面上并没有模仿。你就是吸收老师指示的重点，然后再走自己的路。这样你就能得到高分。而原创的学生则可能从最高分到最低分都有，整个学校的价值评估都反对创意。 他曾经和住在隔壁的心理学教授讨论这个问题。他是一位非常有想像力的老师，他说：”没错，你只有把整个教育的学位和评分制度取消，才能得到真正的教育。”</p></li><li><p>愈聪明愈认真的学生愈不需要分数，很可能是因为他们对学问的本身比较感兴趣。而愈懒惰愈愚笨的学生则愈需要分数，因为可以让他们知道自己是否及格了。</p></li><li><p>一篇优秀的作品不需要任何规则，不需要任何理论，然而他指向了某种东西，非常真实，他们无法否认它的存在。</p><blockquote><p>这种东西能直抵人心</p></blockquote></li></ul><ul><li><p>这个世界缺少它仍然能运作，但是生命变得非常呆滞，几乎不值得活下去。事实上的确是不值得活下去的。 “值得”就是一种良质的字眼，因为生命不再有价值或是目标。</p></li><li><p>他们的世界以知识为主，但是不仅如此，他们假设这个世界的运行要倚靠法则–理性–人类的进步就在于发现这些法则，之后为了满足自我的欲望，而应用这些法则。这就是他们的世界观。</p></li><li><p>根据斐德洛的见解，这个世界是由三种事物所组成的，就是心、物和良质。</p></li><li><p>周围的宁静可以让你把事情做得很漂亮。</p><blockquote><p>内心的宁静也一样</p></blockquote></li><li><p>任何经由思想所意识到的总是存在于过去，因而都不真实。所以真实总是存在于你所看到的那一刹那，且在你还没有意识到之前。</p></li><li><p>人们对于良质有不同的看法，并不是因为良质本身有差异，而是每一个人的经验背景不同。</p></li><li><p>换句话说，几何学的公理不过是化装过的定义。 然后，既已认同了几何学公理的本质，他转而考虑这个问题，欧几里得几何学是真的还是黎曼几何学是真的？他回答：这问题毫无意义。 这好像我们这么问：是否英尺制是对的而常衡制是错的？是否笛卡儿坐标是对的而极坐标是错的？一个几何学不可能比另一个更正确；它只可能是更方便。几何学不是真实的，它只是更先进的。</p></li><li><p>彭加列清楚地说明，他不是在谈浪漫美，震撼感官的外表美。他是在谈古 典美，它从部分的和谐秩序中所生，是一种可以把握的纯粹智慧；</p></li><li><p>像约翰夫妇这种对待科技的态度，是于事无益的。因为你不能单单靠着情绪活着，你还需要了解宇宙运行的方式，了解自然的法则。</p></li><li><p>内心的宁静会产生正确的价值观，正确的价值观就会产生正确的思想，正确的思想就会产生正确的行动，而采取了正确行动的工作，便可使别人从中看到做事人内心的宁静。</p></li><li><p>如果想要改造世界，就要先从一个人的心灵、头脑和手开始改造，然后由它们向外发展。有的人可以谈论如何改变人类的命运，我却只想讨论如何维修一部摩托车，我认为我必须说的这些更具有长远的价值。</p></li><li><p>我希望我知道要和他说些什么，或者问些什么。有的时候他似乎和我如此亲近，而这种亲近和我说什么问什么无关。有的时候他又似乎离我好远，站在一个有利的位置观察我，而我却没摸清状况。有的时候他又很幼稚，那个时候就和我完全无关了。</p></li><li><p>进取心的陷阱可以定义为，因无法意识到良质，从而使人丧失做事的热忱。</p></li><li><p>陷阱主要有两种：第一 种是因外在的环境使你放弃了良质，我称之为挫折。第二种是你内在的因素引起的，我还没有一个确切的称呼，姑且称之为忧虑。</p></li><li><p>现 在我们要谈谈内心因素导致的陷阱。 这一部分有三个陷阱。第一个陷阱会限制情感理解，称之为”价值的陷阱”；第二个则会阻碍认知理解，称之为”真理的陷阱 “；第三个会阻碍精神运动行为，称之为”肌肉的陷阱”。其中价值的陷阱最严重也最危险。</p></li><li><p>如果你自视甚高，那么你观察新事物的能力就会降低。</p></li><li><p>焦虑是另外一个陷阱。</p></li><li><p>枯燥是我想到的下一个陷阱。</p></li><li><p>“无”不是表示一无所有，”无”只是说没有等级，不是”一”，不是”零”，不是”是”也不是”非”。它表示在回答一个问题的时候，超越了”是”与”非” 的等级，</p></li><li><p>“爸爸？””什么事？””我们为什么要这样做呢？””做什么？””一直骑摩托车。””只是来看看乡野的风景。度假啊！”这个回答似乎不能令他满意，可是他也说不上有什么不对。 突然他觉得有点失望，我没有和他说真话，这就是症结所在。</p></li><li><p>所以良质不是方法，而是方法所追求的目标。</p></li><li><p>是良质酝酿了神话的诞生。那就对了。那就是他所谓的”良质是持续不断的刺激，让我们创造出目前的世界，所有的世界，世界上的每一样事物”。宗教不是由人发明的，人是由宗教发明的。</p></li><li><p>许久前我曾经提到，斐德洛在追求理性的鬼魂。这就是我的意思。理性和良质分家了，而且互相对立，良质被迫屈居于理性之下。</p></li><li><p>我记得是柯勒律治曾经说过：”一个人如果不是柏拉图的信徒，就是亚里士多德的信徒。”不能忍受亚里士多德永无止尽的分析，必然会喜好柏拉图天马行空的概念。不能忍受柏拉图高远的理想主义，必然欢迎亚里士多德的实际。柏拉图认为得道非常重要，每一代都不断有这样的人出现，殚精竭虑地寻找宇宙存在的源头。而亚里士多德则代表了维修摩托车的技术人员，他喜欢世间万象。</p></li><li><p>你可以很明显地从这些对话当中看见，苏格拉底如何运用分析的刀把高尔吉亚的艺术劈成碎片。而更重要的是你可以看到，这些碎片就是亚里士多德修辞学的基础。</p></li><li><p>“人是衡量一切的标准。”的确，这就是他所说的良质。</p></li><li><p>现在很少有学校愿意继续教授古典伦理学，于是学生们便追随着亚里士多德和柏拉图，永无止尽地提出古代希腊人永远不需要问的问题：”善究竟是什么呢？我们如何去界定呢？由于每一个人都有不同的定义，我们如何才知道哪里才有善呢？有人认为善存在于快乐之中，但我们又怎么知道快乐是什么呢？而快乐又该如何界定呢？快乐和善不是客观事物。我们无法用科学的方法研究它们。它们不是客观的存在，只能存在于你心中。所以如果你想要快乐，只需要改变你的心意。哈哈，哈哈。”这就是亚里士多德式的伦理学，亚里士多德式的定义，亚里士多德式的逻辑，亚里士多德式的形式，亚里士多德式的本质，亚里士多德式的修辞学，亚里士多德式的笑声……哈哈哈哈。 而智者学派人的尸骨早已化为尘土，他们所说的也和他们一样烟消云散。 于是这些尘土被埋在毁灭的雅典瓦堆之中，而雅典也消失在覆灭的马其顿帝国当中。紧接而来的是古罗马帝国和拜占庭帝国的灭亡，然后接着是奥斯曼帝国，接着就是现代国家–他们被埋得这样深，而且被蒙上了一层礼法、虚伪之情和邪恶，以至于只有很多个世纪之后出现的这个狂人，才发现了可以将他们出土的线索，同时恐怖地看清了前人的所作所为……路上一片漆黑，我必须打开头灯才能顺利地在雨雾中行驶。</p></li><li><p>印度的一元思想和希腊的一元思想是一样的，如果不一样，那就是二元了。而一元论之间所产生的差异主要在于”这一位”的特性，而非”这一位”的本质。由于”这一位”是万物的源头，包含了一切，所以它不可能用这些事物来定义，因为不论你用什么去定义它，你所用来定义的事物都无法达到”这一位”的层次。”</p></li><li><p>斐德洛想，他不应该打断的。如果他是真正追寻真理的人，而不是专门宣传某一种观点，就不应该打断他的话。</p></li><li><p>“写作的好坏我们需要向吕西亚请教，或是向任何一位诗人和演说家请教吗？”什么是善，斐德洛，什么又是恶–我们需要别人来告诉我们答案吗？这就是几个月前他在蒙大拿州的教室里说的，这是自柏拉图之后的每一位辩证学家所忽略的。他们每一个人都想从知识的角度去界定良质，但是现在他发现自己和良质的距离非常遥远，因为他也在做同样的事。他原来的目标是不要让良质被界定，但是在和辩证学家对抗的过程中，他提出了许多论点，每一个论点都是他在良质旁边建立的砖墙。 一旦想通过系统的思考去界定良质，就会破坏它最原始的目标，所以他所做的实在是一桩愚不可及的事。</p></li><li><p>他走过了这一段死荫的幽谷，走出神话，仿佛像从梦境中走出来。他整个的意识就像是一场梦，不是别人的梦而是他自己的梦，是他现在必须独自支撑的梦。然后他自己也消失了，只剩下他的梦和在梦中的他。</p></li><li><p>他说：”我就知道。”这句话不断出现在我的脑海里，好像鱼钩上有东西上钩了，想引起我的注意。</p></li></ul><p><strong>书中一段《道德经》英译:</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">道可道，非常道。名可名，非常名。无名天地之始，有名万物之母。故常无欲以观其妙，常有欲以观其徼。此两者同出而异名。同谓之玄，玄之又玄，众妙之门。</span><br><span class="line">道冲而用之或不盈，渊兮似万物之宗。挫其锐，解其纷，和其光，同其尘，湛兮似或存。</span><br><span class="line">吾不知谁之子，象帝之先。  </span><br><span class="line">……根绵绵若存，用之不勤。……</span><br><span class="line">视之不见名曰夷，听之不闻名曰希，搏之不得名曰微，此三者不可致诘，故混而为一。其上不皎，其下不昧。绳绳不可名，复归于无物。是谓无状之状，无物之象，是谓惚恍。迎之不见其首，随之不见其后。执古之道，以御今之有，能知古始，是谓道纪。</span><br><span class="line"></span><br><span class="line">The quality that can be define is not the Absolute Quality.</span><br><span class="line">The names that can be define are not Absolute names.</span><br><span class="line">It is the origin of heaven and earth.</span><br><span class="line">When named it is the mother of  all things...</span><br><span class="line">Quality  (romantic Quality) and its manifestations (classic Quality) are in their nature the same. It is given different names (subjects and objects) when it becomes classically manifest.</span><br><span class="line">Romantic quality and classic quality together may be called the "mystic".</span><br><span class="line">Reaching from mystery into deeper mystery, it is the gate to the secret of all life.</span><br><span class="line">Quality is all pervading.</span><br><span class="line">And its use is inexhaustible!</span><br><span class="line">Fathomless!</span><br><span class="line">Like the fountainhead of all things...</span><br><span class="line">Yet crystal clear like water it seems to remain.</span><br><span class="line">I do not know who's Son it is.</span><br><span class="line">An image of what existed before God.</span><br><span class="line">...Continuously, continuously it seems to remain. Draw upon it and it serves you with ease...</span><br><span class="line">Looked at but cannot be seen...listened to but cannot be heard...grasped at but cannot touched...these three elude all our inquiries and hence blend and become one.</span><br><span class="line">Not by its rising is there light,</span><br><span class="line">Bot by its sinking is there darkness</span><br><span class="line">Unceasing, continuous</span><br><span class="line">It cannot be defined</span><br><span class="line">And reverts again into the realm of nothingness</span><br><span class="line">That is why it is called the form of the formless</span><br><span class="line">The image of nothingness</span><br><span class="line">That is why it is called elusive</span><br><span class="line">Meet it and you do not see its face</span><br><span class="line">Follow it and you do not see its back</span><br><span class="line">He who holds fast to the quality of old</span><br><span class="line">Is able to know the primeval beginnings</span><br><span class="line">Which are the continuity of quality.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2017/01/21/读《禅与摩托车维修艺术》/禅与摩托车维修艺术.jpg&quot; title=&quot;《禅与摩托车维修艺术》&quot;&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;看到这本书的书名，千万不要认为这是一本讲解摩托车维修的书。实际上，把书名转换为“禅与代码编写的艺术”也是毫无
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>Markdown转HTML</title>
    <link href="http://muchstudy.com/2017/01/18/Markdown%E8%BD%ACHTML/"/>
    <id>http://muchstudy.com/2017/01/18/Markdown转HTML/</id>
    <published>2017-01-18T09:28:33.000Z</published>
    <updated>2017-01-18T16:28:27.111Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;目前，产品中所有前端组件的API文档均由Markdown编写，之前的处理方式为在Atom中写好，然后另存为html的方式放到产品的在线样例库中，最近越来越觉得这种方式太麻烦，不易于管理。考虑砍掉另存为html的步骤，直接在webstorm中写文档，然后在运行时动态把markdown编译成html文档，跟目前的很多在线的Markdown文本编辑器的原理类似。</p><p>&emsp;&emsp;经过调研，可以后端转，也可以前端转。最终，采用前端JS来把Markdown转换为HTML。采用<a href="https://github.com/showdownjs/showdown" target="_blank" rel="noopener">showdown</a>来实现。</p><p>&emsp;&emsp;从showdown的github主页上看到过程挺简单，引入js文件，然后按照下面的语法转换即可：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> converter = <span class="keyword">new</span> showdown.Converter(),</span><br><span class="line">    text      = <span class="string">'#hello, markdown!'</span>,</span><br><span class="line">    html      = converter.makeHtml(text);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;经过验证，发现默认是不对表格做转换的。查看<a href="http://showdownjs.github.io/demo/" target="_blank" rel="noopener">官方DEMO</a>,发现在官方DEMO上一切正常，接着发现原来需要做一些配置项。懒得去一个个看API配置，直接在官方的Demo中加个断点，通过<code>getOptions</code>方法拿到DEMO样例的配置项，结果如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//docurl即xxx.md文件，这里也可以使用jquery来加载指定url的markdown文件</span></span><br><span class="line"><span class="built_in">require</span>([ <span class="string">"text!"</span> + docUrl ], <span class="function"><span class="keyword">function</span>(<span class="params">doc</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> converter = <span class="keyword">new</span> showdown.Converter(&#123;</span><br><span class="line">        <span class="string">"omitExtraWLInCodeBlocks"</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">"noHeaderId"</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="string">"prefixHeaderId"</span>:<span class="string">""</span>,</span><br><span class="line">        <span class="string">"ghCompatibleHeaderId"</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">"headerLevelStart"</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="string">"parseImgDimensions"</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">"simplifiedAutoLink"</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">"excludeTrailingPunctuationFromURLs"</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="string">"literalMidWordUnderscores"</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">"strikethrough"</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">"tables"</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">"tablesHeaderId"</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="string">"ghCodeBlocks"</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">"tasklists"</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">"smoothLivePreview"</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="string">"smartIndentationFix"</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="string">"disableForced4SpacesIndentedSublists"</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="string">"simpleLineBreaks"</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="string">"requireSpaceBeforeHeadingText"</span>:<span class="literal">false</span>,</span><br><span class="line">        <span class="string">"ghMentions"</span>:<span class="literal">false</span>,<span class="string">"extensions"</span>:[],<span class="string">"sanitize"</span>:<span class="literal">false</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> html = converter.makeHtml(doc);</span><br><span class="line">    <span class="comment">//接着把html放到DOM上即可</span></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">    <span class="comment">//我这里是弹出一个侧边栏，在侧边栏上显示markdown所写的API内容</span></span><br><span class="line">    Util.slidebar(&#123;</span><br><span class="line">        body : html,</span><br><span class="line">        width : slideWidth || <span class="string">"800px"</span>,</span><br><span class="line">        afterLoad : <span class="function"><span class="keyword">function</span>(<span class="params">$elem</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//容器的跟节点上加上class，解决markdown转换为html后样式不对的问题</span></span><br><span class="line">            $elem.addClass(<span class="string">"markdown-body"</span>);</span><br><span class="line">            $elem.find(<span class="string">"table"</span>).addClass(<span class="string">"table table-bordered table-hover"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过上述代码，能够正常把markdown转换为html。但是，发现样式有问题，表格没有边框。从上面也看到了，额外增加了样式。</p><p>&emsp;&emsp;最后，把样式文件<code>markdown.css</code>也分享出来。当然，如果想结果跟showdown的DEMO样例一样，也可以去把DEMO的样式扒下来。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.markdown-body</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">"Helvetica Neue"</span>, Helvetica, <span class="string">"Segoe UI"</span>, Arial, freesans, sans-serif;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.6</span>;</span><br><span class="line">    <span class="attribute">word-wrap</span>: break-word</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: decimal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: square</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> &gt; *<span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span> <span class="meta">!important</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> &gt; *<span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span> <span class="meta">!important</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">a</span><span class="selector-pseudo">:not(</span><span class="selector-attr">[href]</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: inherit;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-class">.absent</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#c00</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-class">.anchor</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding-right</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">30px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-class">.anchor</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">    <span class="attribute">outline</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h1</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h2</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h3</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h4</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h5</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h6</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h1</span> <span class="selector-class">.octicon-link</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h2</span> <span class="selector-class">.octicon-link</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h3</span> <span class="selector-class">.octicon-link</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h4</span> <span class="selector-class">.octicon-link</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h5</span> <span class="selector-class">.octicon-link</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h6</span> <span class="selector-class">.octicon-link</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.anchor</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.anchor</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.anchor</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.anchor</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.anchor</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.anchor</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.anchor</span> <span class="selector-class">.octicon-link</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h2</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.anchor</span> <span class="selector-class">.octicon-link</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h3</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.anchor</span> <span class="selector-class">.octicon-link</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h4</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.anchor</span> <span class="selector-class">.octicon-link</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h5</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.anchor</span> <span class="selector-class">.octicon-link</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h6</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.anchor</span> <span class="selector-class">.octicon-link</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h1</span> <span class="selector-tag">tt</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h1</span> <span class="selector-tag">code</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h2</span> <span class="selector-tag">tt</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h2</span> <span class="selector-tag">code</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h3</span> <span class="selector-tag">tt</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h3</span> <span class="selector-tag">code</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h4</span> <span class="selector-tag">tt</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h4</span> <span class="selector-tag">code</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h5</span> <span class="selector-tag">tt</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h5</span> <span class="selector-tag">code</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h6</span> <span class="selector-tag">tt</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">h6</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: inherit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0.3em</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2.25em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.2</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h1</span> <span class="selector-class">.anchor</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0.3em</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.75em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.225</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h2</span> <span class="selector-class">.anchor</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.43</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h3</span> <span class="selector-class">.anchor</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h4</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.25em</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h4</span> <span class="selector-class">.anchor</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h5</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h5</span> <span class="selector-class">.anchor</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h6</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#777</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">h6</span> <span class="selector-class">.anchor</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">p</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">blockquote</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">ul</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">ol</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">dl</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">pre</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">16px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">hr</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">16px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e7e7e7</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span> none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">ul</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">ol</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="number">2em</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">ul</span><span class="selector-class">.no-list</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">ol</span><span class="selector-class">.no-list</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style-type</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">ul</span> <span class="selector-tag">ul</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">ul</span> <span class="selector-tag">ol</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">ol</span> <span class="selector-tag">ol</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">ol</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">li</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">16px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">dl</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">dl</span> <span class="selector-tag">dt</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">font-style</span>: italic;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">dl</span> <span class="selector-tag">dd</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">16px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">blockquote</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#777</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">4px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">blockquote</span> &gt; <span class="selector-pseudo">:first-child</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">blockquote</span> &gt; <span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-class">.table-bordered</span>&gt;<span class="selector-tag">thead</span>&gt;<span class="selector-tag">tr</span>&gt;<span class="selector-tag">th</span>&#123;</span><br><span class="line">    <span class="attribute">border-bottom-width</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*.markdown-body table &#123;</span></span><br><span class="line"><span class="comment">display: block;</span></span><br><span class="line"><span class="comment">width: 100%;</span></span><br><span class="line"><span class="comment">overflow: auto;</span></span><br><span class="line"><span class="comment">word-break: normal;</span></span><br><span class="line"><span class="comment">word-break: keep-all</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">.markdown-body table th &#123;</span></span><br><span class="line"><span class="comment">font-weight: bold</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">.markdown-body table th, .markdown-body table td &#123;</span></span><br><span class="line"><span class="comment">padding: 6px 13px;</span></span><br><span class="line"><span class="comment">border: 1px solid #ddd</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">.markdown-body table tr &#123;</span></span><br><span class="line"><span class="comment">background-color: #fff;</span></span><br><span class="line"><span class="comment">border-top: 1px solid #ccc</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">.markdown-body table tr:nth-child(2n) &#123;</span></span><br><span class="line"><span class="comment">background-color: #f8f8f8</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-class">.emoji</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">span</span><span class="selector-class">.frame</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">span</span><span class="selector-class">.frame</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">13px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">span</span><span class="selector-class">.frame</span> <span class="selector-tag">span</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">float</span>: left</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">span</span><span class="selector-class">.frame</span> <span class="selector-tag">span</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">span</span><span class="selector-class">.align-center</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">clear</span>: both</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">span</span><span class="selector-class">.align-center</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">13px</span> auto <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-align</span>: center</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">span</span><span class="selector-class">.align-center</span> <span class="selector-tag">span</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">text-align</span>: center</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">span</span><span class="selector-class">.align-right</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">clear</span>: both</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">span</span><span class="selector-class">.align-right</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">13px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-align</span>: right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">span</span><span class="selector-class">.align-right</span> <span class="selector-tag">span</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">span</span><span class="selector-class">.float-left</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">span</span><span class="selector-class">.float-left</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">13px</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">span</span><span class="selector-class">.float-right</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">span</span><span class="selector-class">.float-right</span> &gt; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">13px</span> auto <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">text-align</span>: right</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">code</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">tt</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">0.2em</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0.2em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">85%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(0, 0, 0, 0.04);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">code</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">code</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">tt</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">tt</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">letter-spacing</span>: -<span class="number">0.2em</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"\00a0"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">code</span> <span class="selector-tag">br</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">tt</span> <span class="selector-tag">br</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">del</span> <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: inherit</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">pre</span> &gt; <span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">word-break</span>: normal;</span><br><span class="line">    <span class="attribute">white-space</span>: pre;</span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-class">.highlight</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">16px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-class">.highlight</span> <span class="selector-tag">pre</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">pre</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">85%</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.45</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-class">.highlight</span> <span class="selector-tag">pre</span> &#123;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">word-break</span>: normal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">pre</span> &#123;</span><br><span class="line">    <span class="attribute">word-wrap</span>: normal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">pre</span> <span class="selector-tag">code</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">pre</span> <span class="selector-tag">tt</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">    <span class="attribute">max-width</span>: initial;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: initial;</span><br><span class="line">    <span class="attribute">line-height</span>: inherit;</span><br><span class="line">    <span class="attribute">word-wrap</span>: normal;</span><br><span class="line">    <span class="attribute">background-color</span>: transparent;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">pre</span> <span class="selector-tag">code</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">pre</span> <span class="selector-tag">code</span><span class="selector-pseudo">:after</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">pre</span> <span class="selector-tag">tt</span><span class="selector-pseudo">:before</span>, <span class="selector-class">.markdown-body</span> <span class="selector-tag">pre</span> <span class="selector-tag">tt</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: normal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">kbd</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">11px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fcfcfc</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">border-bottom-color</span>: <span class="number">#bbb</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#bbb</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: disc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.markdown-body</span> <span class="selector-tag">ul</span> <span class="selector-tag">ul</span>, <span class="selector-tag">markdown-body</span> <span class="selector-tag">ol</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: circle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;目前，产品中所有前端组件的API文档均由Markdown编写，之前的处理方式为在Atom中写好，然后另存为html的方式放到产品的在线样例库中，最近越来越觉得这种方式太麻烦，不易于管理。考虑砍掉另存为html的步骤，直接在webstorm中写文档，然
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://muchstudy.com/categories/FrontEnd/"/>
    
    
  </entry>
  
  <entry>
    <title>Tomcat环境下设置HTTP强缓存</title>
    <link href="http://muchstudy.com/2017/01/14/Tomcat%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%AE%BE%E7%BD%AEHTTP%E5%BC%BA%E7%BC%93%E5%AD%98/"/>
    <id>http://muchstudy.com/2017/01/14/Tomcat环境下设置HTTP强缓存/</id>
    <published>2017-01-14T10:54:44.000Z</published>
    <updated>2017-01-14T13:21:30.991Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在之前的一篇文章<a href="http://muchstudy.com/2016/08/18/HTTP%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3/">《HTTP缓存详解》</a>中详细的整理了关于HTTP缓存的知识点，这一篇通过实践，具体验证如何设置HTTP的强缓存，让客户端直接从本地缓存中拿资源，而不发起网络请求。</p><h2 id="一、设置HTTP强缓存"><a href="#一、设置HTTP强缓存" class="headerlink" title="一、设置HTTP强缓存"></a>一、设置HTTP强缓存</h2><p>&emsp;&emsp;可通过<code>Expires</code>与<code>Cache-Control</code>控制资源何时过期。<code>Expires</code>通过设置一个具体过期日期来控制，<code>Cache-Control</code>是设置一个距离第一次请求之后多久的时间段来控制。</p><h3 id="1-自定义Filter"><a href="#1-自定义Filter" class="headerlink" title="1.自定义Filter"></a>1.自定义Filter</h3><p>过滤器代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterCache</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">            HttpServletResponse res = (HttpServletResponse) response;  </span><br><span class="line">            <span class="comment">//res.setDateHeader("expries", new Date().getTime()+60*60*24*1000);//- 设置一天失效，经测试Chrome下不生效</span></span><br><span class="line">            res.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"max-age=10"</span>);  <span class="comment">//- 这里的单位为秒，10代表第一次请求10s后过期</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>web.xml配置如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 过滤所有的js文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterCache<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.demo.cache.FilterCache<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>FilterCache<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="2-使用容器的Filter"><a href="#2-使用容器的Filter" class="headerlink" title="2.使用容器的Filter"></a>2.使用容器的Filter</h3><p>&emsp;&emsp;tomcat容器提供自有的过滤器来设置HTTP缓存，只需在web.xml中进行配置即可，相信其它服务器也有相关的配置项，例如Nginx、WebLogic等。</p><p>配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ExpiresFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.catalina.filters.ExpiresFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ExpiresByType image<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>access plus 10 days<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ExpiresByType text/css<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>access plus 10 days<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>ExpiresByType application/javascript<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>access plus 10 days<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>ExpiresFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dispatcher</span>&gt;</span>REQUEST<span class="tag">&lt;/<span class="name">dispatcher</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>官方文档：</p><ul><li>tomcat7:<a href="http://tomcat.apache.org/tomcat-7.0-doc/config/filter.html#Expires_Filter" target="_blank" rel="noopener">http://tomcat.apache.org/tomcat-7.0-doc/config/filter.html#Expires_Filter</a></li><li>tomcat8:<a href="http://tomcat.apache.org/tomcat-8.0-doc/config/filter.html#Expires_Filter" target="_blank" rel="noopener">http://tomcat.apache.org/tomcat-8.0-doc/config/filter.html#Expires_Filter</a></li></ul><h2 id="二、特别说明"><a href="#二、特别说明" class="headerlink" title="二、特别说明"></a>二、特别说明</h2><h3 id="1-客户端环境准备"><a href="#1-客户端环境准备" class="headerlink" title="1.客户端环境准备"></a>1.客户端环境准备</h3><p>在Chrome下，需进行如下设置（F12接着按F1即可打开settings面板）：</p><img src="/2017/01/14/Tomcat环境下设置HTTP强缓存/DisableCache.jpg"><h3 id="2-刷新浏览器方式"><a href="#2-刷新浏览器方式" class="headerlink" title="2.刷新浏览器方式"></a>2.刷新浏览器方式</h3><p>&emsp;&emsp;经过测试，只有通过浏览器地址栏回车的方式强缓存才会生效；以F5、浏览器刷新按钮、Ctrl+R方式刷新页面均会发起HTTP网络请求，即使缓存未过期。</p><h2 id="三、结果"><a href="#三、结果" class="headerlink" title="三、结果"></a>三、结果</h2><p>在Chrome下测试结果如下：</p><img src="/2017/01/14/Tomcat环境下设置HTTP强缓存/chrome.jpg"><p>&emsp;&emsp;设置<code>Cache-Control</code>的过期时间为10s，第一次请求返回200，在size栏下显示文件大小；第二次刷新页面，size栏显示<code>from memory cache</code>,即证明浏览器未发起网路请求，直接从本地缓存中获取资源。在IE下会显示<code>来自缓存</code>，Firefox下显示<code>已缓存</code>。</p><p>&emsp;&emsp;经测试，使用<code>Cache-Control</code>设置缓存在Chrome、Firefox、Edge、IE11下均有效，使用<code>Expires</code>只在IE11与Edge下生效。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;在之前的一篇文章&lt;a href=&quot;http://muchstudy.com/2016/08/18/HTTP%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3/&quot;&gt;《HTTP缓存详解》&lt;/a&gt;中详细的整理了关于HTTP缓存的知识点
      
    
    </summary>
    
      <category term="HTTP" scheme="http://muchstudy.com/categories/HTTP/"/>
    
    
      <category term="缓存" scheme="http://muchstudy.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>产品研发记录04：关于开源组件选择与技术方案选择的总结</title>
    <link href="http://muchstudy.com/2017/01/08/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E8%AE%B0%E5%BD%9504%EF%BC%9A%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://muchstudy.com/2017/01/08/产品研发记录04：关于技术选型的总结/</id>
    <published>2017-01-08T06:48:50.000Z</published>
    <updated>2017-02-10T16:16:47.717Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在<a href="http://muchstudy.com/2017/01/02/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E8%AE%B0%E5%BD%9501%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E4%BA%A7%E5%93%81/">基础开发框架产品</a>构建当中，由于人力成本等其它原因，无法做到所有的代码都自己实现。所以，在技术部分就包含开源组件选择与选择合适的技术方案自己实现两部分。</p><h2 id="一、开源组件选择"><a href="#一、开源组件选择" class="headerlink" title="一、开源组件选择"></a>一、开源组件选择</h2><p>&emsp;&emsp;对于开源组件的选择应当考虑如下几个方面：</p><ul><li>是否已经经过了时间的考验。例如Jquery之类组件。</li><li>是否有完善的生态环境。如果一款开源组件长时间没人管，没人用，圈子不活跃，建议不要选择。</li><li>如果是小团队，还需要考虑团队人员的技术栈。大团队，需考虑新组件的推广成本。例如React、Angular、Vue。</li><li>文档是否完善。</li></ul><h2 id="二、技术方案选择"><a href="#二、技术方案选择" class="headerlink" title="二、技术方案选择"></a>二、技术方案选择</h2><ul><li>首先筛选出做一件事都有哪些技术方案能实现。</li><li>通过Demo样例来判断每种方案的实现难易程度，判断每条路走下去分别会有哪些坑。</li><li>市面上是否已有成熟的、已用于真实环境的技术解决方案。</li><li>预估业务增长的速度，是否能支撑起增长变化后的需求。</li><li>性能考量，实现复杂度考量。</li></ul><h2 id="三、其它"><a href="#三、其它" class="headerlink" title="三、其它"></a>三、其它</h2><ul><li>不管什么组件，什么技术方案，首要需考虑的是是否能够很好的契合目前需要解决的问题。</li><li>如果所选的会使用在核心部分，那么需考虑在3-5年后是否会过时。</li><li>做好对比分析，最好仔细列出优缺点，折衷考虑。</li><li>拿不定主意，不好评估的可先行小范围试用。如果不行，可快速切换；如果不错，再推广开。</li><li>新组件，新技术未经过充分验证不可推进太快，就跟车速太快不好调头一个道理。</li></ul><p>&emsp;&emsp;总的来说，随着时间的推移与业务的变更，技术也应当随之改变。不管是开源组件的选择还是技术方案的选择，<strong>只能保证在那么一段时间内是最优的选择。</strong>技术人员必须时刻保持敏锐的嗅觉，跟上技术的步伐。如果一直停止不前，不管是对于一款产品也好，对于产品的研发人员也好，迎面而来的只有被淘汰的命运。</p><p>&emsp;&emsp;在本文的最后，还想多说两句。<strong>所有的东西都不可能是一成不变的。</strong>产品没有随着新技术的提升与业务的变更而跟着做相应的调整，几年过后，就会变得越来越难用；技术人员安于呆在温水中，个人能力没有随着工作年限的增加而增加，几年之后会觉得越来越尴尬；</p><p>&emsp;&emsp;在知乎上有这么一个问题：”<a href="https://www.zhihu.com/question/41167695" target="_blank" rel="noopener">有哪些一开始觉得离自己很遥远的事，真的发生在自己身上时措手不及？</a>“。其中有一个简短而有力的答案，这个答案是：<strong>“平凡”。</strong></p><p>上一篇：<a href="http://muchstudy.com/2017/01/07/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E8%AE%B0%E5%BD%9503%EF%BC%9A%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1%E7%9A%84%E6%80%9D%E8%80%83/">产品研发记录03：关于技术债务的思考</a><br>下一篇：<a href="http://muchstudy.com/2017/02/10/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E8%AE%B0%E5%BD%9505%EF%BC%9A%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E4%BA%BA%E5%91%98%E9%9C%80%E8%A6%81%E5%85%B7%E6%9C%89%E7%9A%84%E7%89%B9%E8%B4%A8/">产品研发记录05：产品研发人员应当具备的特质</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;在&lt;a href=&quot;http://muchstudy.com/2017/01/02/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E8%AE%B0%E5%BD%9501%EF%BC%9A%E4%B8%BA%E4%BB%80
      
    
    </summary>
    
      <category term="产品研发" scheme="http://muchstudy.com/categories/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>产品研发记录03：关于技术债务的思考</title>
    <link href="http://muchstudy.com/2017/01/07/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E8%AE%B0%E5%BD%9503%EF%BC%9A%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1%E7%9A%84%E6%80%9D%E8%80%83/"/>
    <id>http://muchstudy.com/2017/01/07/产品研发记录03：关于技术债务的思考/</id>
    <published>2017-01-07T15:17:57.000Z</published>
    <updated>2017-01-08T13:32:23.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、何谓技术债务"><a href="#一、何谓技术债务" class="headerlink" title="一、何谓技术债务"></a>一、何谓技术债务</h2><p>&emsp;&emsp;技术债务就是传说中的各种坑，这些坑有大有小，不外乎如下几种类型：</p><ul><li><p>代码的坑。</p><blockquote><p>&emsp;&emsp;无注释、无排版、各种冗余、各种难以维护的代码；绕来绕去很难看懂的代码；明显性能问题的代码；甚至还有逻辑混乱然后还能跑起来的神级代码。碰到这样的代码坑，给人的统一印象就是<strong>很难保持淡定。</strong></p></blockquote></li><li><p>业务的坑。</p><blockquote><p>&emsp;&emsp;业务一而再再而三的变，变得面目全非，甚至变得代码需要重新写。</p></blockquote></li><li><p>设计的坑。</p><blockquote><p>&emsp;&emsp;架构设计，功能设计，API接口设计不合理。造成后续使用困难，扩展困难，跟不上业务的快速增长。</p></blockquote></li></ul><h2 id="二、产生的原因"><a href="#二、产生的原因" class="headerlink" title="二、产生的原因"></a>二、产生的原因</h2><p>&emsp;&emsp;技术债务产生的原因不外乎如下几个：</p><ul><li><p>时间不够。</p><blockquote><p>&emsp;&emsp;很难见到有时间充裕的项目，大多数项目都有一个deadline。比如双十一活动，那么对于苦逼的程序员，就必须得保证在这一天之前把所有的活动页面做出来。在时间紧迫的情况下，做出东西为首要目标，具体过程就是八仙过海各显神通了。在这种情况下，当然就是怎么快怎么来，而不会过多的考虑代码的整体结构、扩展、性能等要素。</p></blockquote></li><li><p>能力不够。</p><blockquote><p>&emsp;&emsp;技术人员的能力不够，经验不够丰富，此种情况下即使给予充裕的时间可能也不会得到满意的结果。在做出优秀设计，写出优秀的代码这件事上无速成可言。</p></blockquote></li></ul><ul><li>不可控。<blockquote><p>&emsp;&emsp;不可控是指自己无法控制，各种身不由己。比如：强势客户、强势领导非要让你这么干；前期框架就这样，即使知道有问题，还是得按照之前的套路走；</p></blockquote></li></ul><h2 id="三、如何面对技术债务"><a href="#三、如何面对技术债务" class="headerlink" title="三、如何面对技术债务"></a>三、如何面对技术债务</h2><ul><li><p>淡定。</p><blockquote><p>&emsp;&emsp;这是首先要做的事情。畏难情绪一起来，工作效率随之降低。只有保持清醒的头脑，面对技术债务时才能做出正确的决定。</p></blockquote></li><li><p>填坑。</p><blockquote><p>&emsp;&emsp;填坑得赶紧。从个人经验上来看，一些关键坑如果不赶紧填，坑就会越来越大，越到后面越难填，越让人头疼。</p></blockquote></li><li><p>总结。</p><blockquote><p>&emsp;&emsp;总结为什么会有这个坑，避免今后再挖相同的坑。</p></blockquote></li></ul><p>上一篇：<a href="http://muchstudy.com/2017/01/04/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E8%AE%B0%E5%BD%9502%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E4%BA%A7%E5%93%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E4%B8%8E%E5%93%B2%E5%AD%A6/">产品研发记录02：基础开发框架产品的设计哲学</a><br>下一篇：<a href="http://muchstudy.com/2017/01/08/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E8%AE%B0%E5%BD%9504%EF%BC%9A%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%E7%9A%84%E6%80%BB%E7%BB%93/">产品研发记录04：关于开源组件选择与技术方案选择的总结</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、何谓技术债务&quot;&gt;&lt;a href=&quot;#一、何谓技术债务&quot; class=&quot;headerlink&quot; title=&quot;一、何谓技术债务&quot;&gt;&lt;/a&gt;一、何谓技术债务&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;技术债务就是传说中的各种坑，这些坑有大有小，不外乎如下几种类型：&lt;/
      
    
    </summary>
    
      <category term="产品研发" scheme="http://muchstudy.com/categories/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>产品研发记录02：基础开发框架产品的设计哲学</title>
    <link href="http://muchstudy.com/2017/01/04/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E8%AE%B0%E5%BD%9502%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E4%BA%A7%E5%93%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E4%B8%8E%E5%93%B2%E5%AD%A6/"/>
    <id>http://muchstudy.com/2017/01/04/产品研发记录02：基础开发框架产品的设计理念与哲学/</id>
    <published>2017-01-04T13:49:41.000Z</published>
    <updated>2017-01-07T17:26:23.247Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;一款产品从0到1必然会耗费设计人员的一番心血。如果只是单纯的功能堆叠，而没有灌注其中的一致设计理念与哲学，面对这样的产品，你会明显感觉到混乱与混沌，缺少气质与灵魂。</p><p>&emsp;&emsp;而基础开发框架产品相对于其它传统意义上的产品而言有他的特殊之处，特殊之处在于该产品的使用者为公司的项目开发人员而不是最终用户。所以，在基础开发框架的设计上必然会向开发人员侧重。</p><p>&emsp;&emsp;下面就来说说目前所负责的一款基础开发框架产品的设计理念与哲学。</p><h2 id="一、实在"><a href="#一、实在" class="headerlink" title="一、实在"></a>一、实在</h2><p>&emsp;&emsp;对于实在的含义可以解读为如下几点：</p><h3 id="1-实实在在的解决问题"><a href="#1-实实在在的解决问题" class="headerlink" title="1. 实实在在的解决问题"></a>1. 实实在在的解决问题</h3><p>&emsp;&emsp;解决问题意为着产品的设计实现要以解决实际问题为导向，<strong>不针对于实际问题的设计都是耍流氓。</strong></p><p>&emsp;&emsp;另外，<strong>不对新技术过度追求</strong>。用力过猛使得不稳定因素增加。多大问题用多大刀，技术与问题能很好契合才是最优选。</p><h3 id="2-实实在在的带来便利"><a href="#2-实实在在的带来便利" class="headerlink" title="2. 实实在在的带来便利"></a>2. 实实在在的带来便利</h3><p>&emsp;&emsp;当开发人员使用基础开发框架来进行项目开发时，的确能明显提升工作效率。一个虽然解决了实际问题，但是开发人员使用过程中感觉蹩手蹩脚的设计不是一个好设计。</p><p>&emsp;&emsp;这里的便利不仅指开发时的便利，还包括后期运行维护时的便利。可以通过一些手段引导开发人员朝着一个良好的开发模式靠拢。比如框架层面的限制、目录规范、代码规范校验等。</p><h3 id="3-不能太实在"><a href="#3-不能太实在" class="headerlink" title="3. 不能太实在"></a>3. 不能太实在</h3><p>&emsp;&emsp;首先，<strong>不重复造轮子。</strong>对于这一点，千万不要实实在在的来一个问题就造一个轮子。如果市面上已经有匹配度很好的轮子为什么不借为己用？自己不间断的无脑造轮子会有如下风险：</p><ul><li>花大力气造的轮子没有已有的轮子优秀</li><li>后续需投入大量人力做问题处理与升级维护</li><li>需负责提供完善的文档以及负责对开发人员的指导培训，而已有轮子这些东西开发人员可以从网络获取</li></ul><p>&emsp;&emsp;另外，<strong>别一味想着用技术去解决问题。</strong>有些时候通过一些开发准则，技术使用规范，业务逻辑重新梳理能更好的解决问题。有些问题当陷入技术的漩涡后，反而会让问题变得越来越庞大，越来越难以控制。</p><h2 id="二、开放"><a href="#二、开放" class="headerlink" title="二、开放"></a>二、开放</h2><p>&emsp;&emsp;在过往的经验当中，见过太多太多的产品越做越封闭，越做越臃肿。当产品越来越封闭后，开发人员彻底变成调包侠，更不利于个人成长。产品研发人员疲于应付各种BUG与技术支持，而无暇思考产品的迭代蜕变。</p><p>&emsp;&emsp;这里的开放意味着基础开发框架需要保持一定的Open程度。当遇到刁钻需求时开发人员只要对产品有一定了解，自己也能解决，鼓励开发人员多折腾。这样不仅有利于开发人员的技术成长，而且有助于使得产品研发人员从不断的技术支持中解脱出来。</p><h2 id="三、分享"><a href="#三、分享" class="headerlink" title="三、分享"></a>三、分享</h2><p>&emsp;&emsp;作为基础开发框架的研发人员，在解决核心问题的同时还有义务与责任带领框架的使用人员不断的提高自身的技术水平。他们水平的提高才能对产品提出更高水平的建议。开发者与使用者之间应当建立起良好的沟通交流机制，相互分享各自的经验心得，共同使得基础开发框架产品更上一个台阶。</p><p>&emsp;&emsp;<strong>基础框架产品与使用人员的关系其实是一个相互成就的关系。</strong> 使用者不断分享出使用经验，提出宝贵意见，让产品不断优化，同时反过来让使用人员用起来更加得心应手。</p><h2 id="四、最后"><a href="#四、最后" class="headerlink" title="四、最后"></a>四、最后</h2><p>&emsp;&emsp;在职业生涯中，见过太多太多的项目，再简单的也能做砸，再难的也能做成功。同时，跟公司产品的优劣好像关系也不大。</p><p>&emsp;&emsp;一队什么样的人来做这个项目很大程度上决定这个项目的成败。</p><p>&emsp;&emsp;所以，<strong>没有银弹，唯一的银弹是人。</strong></p><p>上一篇：<a href="http://muchstudy.com/2017/01/02/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E8%AE%B0%E5%BD%9501%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E4%BA%A7%E5%93%81/">产品研发记录01：为什么需要基础开发框架产品</a><br>下一篇：<a href="http://muchstudy.com/2017/01/07/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E8%AE%B0%E5%BD%9503%EF%BC%9A%E5%85%B3%E4%BA%8E%E6%8A%80%E6%9C%AF%E5%80%BA%E5%8A%A1%E7%9A%84%E6%80%9D%E8%80%83/">产品研发记录03：关于技术债务的思考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;一款产品从0到1必然会耗费设计人员的一番心血。如果只是单纯的功能堆叠，而没有灌注其中的一致设计理念与哲学，面对这样的产品，你会明显感觉到混乱与混沌，缺少气质与灵魂。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;而基础开发框架产品相对于其它传统意义上的产品而
      
    
    </summary>
    
      <category term="产品研发" scheme="http://muchstudy.com/categories/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>产品研发记录01：为什么需要基础开发框架产品</title>
    <link href="http://muchstudy.com/2017/01/02/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E8%AE%B0%E5%BD%9501%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E4%BA%A7%E5%93%81/"/>
    <id>http://muchstudy.com/2017/01/02/产品研发记录01：为什么需要基础开发框架产品/</id>
    <published>2017-01-02T15:18:58.000Z</published>
    <updated>2017-01-05T14:41:35.967Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;目前负责一套基础开发框架产品的研发，从0到1开始已历经两年时间，日趋稳定。希望通过本系列文章记录下产品研发过程中的方方面面，归纳总结沉淀下来。</p><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>&emsp;&emsp;传统行业，以项目为单位。在没有产品之前，所属部门所有人员打散进入一个个的项目，根据客户需求进行开发。Java体系，这个时候，各个项目基本上由各项目的技术负责人搭建项目开发环境，架构设计，模块拆分。完事后，再安排开发人员根据需求开发。之后，测试上线，最终验收，完成整个项目开发流程。之后再辗转新的项目，或者继续做该项目的下一期项目。</p><p>&emsp;&emsp;这样的项目开发方式会带来如下问题：</p><ul><li><strong>大量冗余工作。</strong>比如开发环境搭建，登录、首页、菜单、权限、人员管理、系统监控等公共需求基本上在每个项目中都得重新开发一遍。</li><li><p><strong>技术债务风险。</strong>主要技术的选型往往由各个项目的技术负责人确定，一些零散的组件，比如前端常用的图表、树、弹出框等基础组件往往由实际开发人员决定。带来所用技术混乱，后期运维成本提高。</p></li><li><p><strong>对开发人员要求提高。</strong>项目与项目之间技术风格迥异，开发人员转项目往往得重新学习了解一套新的技术体系。从一个项目的熟手变为另一项目的生手。</p></li><li><p><strong>技术、经验无法沉淀。</strong>对于传统行业，技术与行业实施经验才是无价之宝。由于各项目单打独斗，项目与项目间经验无法复用，知识很难沉淀。</p></li></ul><h2 id="二、基础开发框架产品"><a href="#二、基础开发框架产品" class="headerlink" title="二、基础开发框架产品"></a>二、基础开发框架产品</h2><p>&emsp;&emsp;为了解决上述问题，引入基础开发框架产品。所有项目的实施都以该基础框架产品为基座进行开发。该<strong>基座</strong>包含如下几点：</p><ul><li>整体架构前后端分离，使用RESTFULL进行前后端数据交互</li><li>前后端技术体系统一</li><li>由基础开发框架组负责技术选型，确定技术路线。比如React、Vue、Angular到表格组件，图表组件到底用哪个之类问题</li><li>应用部分：提供登录、首页、菜单、人员管理、权限管理、字典管理、系统监控等通用模块</li><li>前端部分：统一技术栈。提供通用前端开发组件，开发结构规范，提供公共的前端压缩合并以及缓存解决方案。</li><li>安全：统一的XSS、CSRF、SQL注入等安全问题解决方案</li><li>统一的框架级异常处理</li><li>可平滑升级</li><li>提供问题反馈、建议提交平台，构建正循环生态环境</li><li>……</li></ul><p>&emsp;&emsp;总之，属于项目开发公共的部分都放入其中，随着项目的不断实施，不断的总结出新的组件，不断的完善现有基础组件。</p><h2 id="三、带来的好处"><a href="#三、带来的好处" class="headerlink" title="三、带来的好处"></a>三、带来的好处</h2><ul><li>开发实施效率明显提升</li><li>项目后期维护成本降低</li><li>技术路线统一后项目开发人员的技术学习成本降低</li><li>基于同一套基础开发框架，A项目中的闪光点可直接搬到B项目中</li><li>由基础开发框架组造完轮子后避免各个项目重复造轮子</li><li>形成公司核心竞争力</li></ul><p>下一篇：<a href="http://muchstudy.com/2017/01/04/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91%E8%AE%B0%E5%BD%9502%EF%BC%9A%E5%9F%BA%E7%A1%80%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E4%BA%A7%E5%93%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5%E4%B8%8E%E5%93%B2%E5%AD%A6/">产品研发记录02：基础开发框架产品的设计哲学</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;目前负责一套基础开发框架产品的研发，从0到1开始已历经两年时间，日趋稳定。希望通过本系列文章记录下产品研发过程中的方方面面，归纳总结沉淀下来。&lt;/p&gt;
&lt;h2 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="产品研发" scheme="http://muchstudy.com/categories/%E4%BA%A7%E5%93%81%E7%A0%94%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>人生中唯一的2016</title>
    <link href="http://muchstudy.com/2016/12/31/%E4%BA%BA%E7%94%9F%E4%B8%AD%E5%94%AF%E4%B8%80%E7%9A%842016/"/>
    <id>http://muchstudy.com/2016/12/31/人生中唯一的2016/</id>
    <published>2016-12-31T09:11:07.000Z</published>
    <updated>2016-12-31T12:44:53.889Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在人生中的每一天都是唯一的，转眼就到了今年的最后一天。在这最后一天里，不禁想问自己，你在这一年里收获了什么？在时间长河里为这个世界留下了什么？创造了什么价值？在这一年里有哪些遗憾？接下来的一年里你有什么打算？</p><h2 id="收获的"><a href="#收获的" class="headerlink" title="收获的"></a>收获的</h2><ul><li><p>拿到了驾照，从三月份报考，差不多半年，每周末练车，在十月份的时候驾照终于到手。</p></li><li><p>读完了：《皮囊》《动物庄园》《黄金时代》《白夜行》《嫌疑人X的献身》《解忧杂货铺》《精进》《巨流河》《HTTP权威指南》《Head First设计模式》，正在读《禅与摩托车维修艺术》</p></li><li><p>每天上班地铁背英语单词，坚持200多天，对英语有了一些<a href="http://muchstudy.com/2016/12/18/%E5%9D%9A%E6%8C%81%E4%B8%80%E5%B9%B4%E8%83%8C%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E7%9A%84%E6%80%BB%E7%BB%93/">感想</a></p></li><li><p>练字，硬笔楷书，100天出头。</p></li><li><p>500多个随手小视频，用视频记录下2016生活中的点滴。几十年后再来看这些视频，肯定会有一番不一样的感受。</p></li><li><p>看了一段时间关于编译原理的视频与资料，对编译原理有了一些了解</p></li></ul><h2 id="留下的"><a href="#留下的" class="headerlink" title="留下的"></a>留下的</h2><ul><li><p>作为公司基础开发框架产品负责人，产品今年迭代了12个版本，越来越稳定，在稳定中不断的打磨脱变。通过该产品，提升了开发人员的开发效率。</p></li><li><p>博客开通，分享50多篇原创博客，希望能帮助到一些人。</p></li><li><p><a href="http://stackoverflow.com/users/3995834/ying-yi" target="_blank" rel="noopener">stackoverflow</a>从0到将近500分，算是常年在上面找到有用答案的反馈。</p></li></ul><h2 id="其它重要事件"><a href="#其它重要事件" class="headerlink" title="其它重要事件"></a>其它重要事件</h2><ul><li><p>年初跟媳妇儿以及爸妈全家人到云南自驾游一圈</p></li><li><p>买房，三十而立算是有了基础</p></li><li><p>老婆怀孕，明年等着升级，得多赚奶粉钱了</p></li></ul><h2 id="遗憾"><a href="#遗憾" class="headerlink" title="遗憾"></a>遗憾</h2><ul><li><p>书法练习未能连续坚持</p></li><li><p>系统架构师考试未能通过</p></li></ul><h2 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h2><ul><li><p>博客继续写下去</p></li><li><p>坚持练字</p></li><li><p>囤着还未看的书，希望能看掉一些：《算法》第四版、《TCP/IP》卷一、《经济学原理》-曼昆、《瓦尔登湖》、《英语语法实践指南》、《数学之美》</p></li><li><p>想要学习的领域：机器学习、推荐引擎</p></li><li><p>接受新的挑战</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;在人生中的每一天都是唯一的，转眼就到了今年的最后一天。在这最后一天里，不禁想问自己，你在这一年里收获了什么？在时间长河里为这个世界留下了什么？创造了什么价值？在这一年里有哪些遗憾？接下来的一年里你有什么打算？&lt;/p&gt;
&lt;h2 id=&quot;收获的&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL 5.7 绿色版安装</title>
    <link href="http://muchstudy.com/2016/12/29/MySQL-5-7-%E7%BB%BF%E8%89%B2%E7%89%88%E5%AE%89%E8%A3%85/"/>
    <id>http://muchstudy.com/2016/12/29/MySQL-5-7-绿色版安装/</id>
    <published>2016-12-29T07:16:13.000Z</published>
    <updated>2016-12-29T08:20:43.750Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>安装环境为windows2008 R2，X64</p></blockquote><h2 id="一、下载解压"><a href="#一、下载解压" class="headerlink" title="一、下载解压"></a>一、下载解压</h2><p>&emsp;&emsp;官网下载地址：<a href="http://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql/</a><br>&emsp;&emsp;选择跟环境对应的版本，然后解压即可。我这里解压到<code>C:\work\mysql-5.7.17-winx64</code></p><h2 id="二、-环境变量配置"><a href="#二、-环境变量配置" class="headerlink" title="二、 环境变量配置"></a>二、 环境变量配置</h2><p>&emsp;&emsp;把<code>C:\work\mysql-5.7.17-winx64\bin</code>添加到用户的环境变量<code>path</code>中</p><h2 id="三、-添加配置文件"><a href="#三、-添加配置文件" class="headerlink" title="三、 添加配置文件"></a>三、 添加配置文件</h2><p>&emsp;&emsp;复制<code>my-default.ini</code>一份该文件，在当前目录下粘贴为<code>my.ini</code>，并增加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">character_set_server=utf8</span><br><span class="line">basedir=C:\work\mysql-5.7.17-winx64</span><br><span class="line">datadir=C:\work\mysql-5.7.17-winx64\data</span><br><span class="line">port   = 3306</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;修改默认的字符编码为UTF-8 解决中文乱码问题。</p><h2 id="四、数据库初始化"><a href="#四、数据库初始化" class="headerlink" title="四、数据库初始化"></a>四、数据库初始化</h2><p>&emsp;&emsp;用管理员身份打开CMD，并执行如下命令：</p><ul><li><code>mysqld --initialize --user=mysql --console</code></li></ul><img src="/2016/12/29/MySQL-5-7-绿色版安装/1.jpg"><p>&emsp;&emsp;结尾部分为初始化的随机root密码，可以先从控制台上复制下来，下一步修改密码会使用</p><h2 id="五、修改root密码"><a href="#五、修改root密码" class="headerlink" title="五、修改root密码"></a>五、修改root密码</h2><p>&emsp;&emsp;运行如下命令：</p><ul><li><code>mysql -u root -p</code> 之后会提示输入密码</li><li><code>set password for root@localhost = password(&#39;root&#39;);</code>修改密码为root</li></ul><img src="/2016/12/29/MySQL-5-7-绿色版安装/2.jpg"><h2 id="六、创建新用户"><a href="#六、创建新用户" class="headerlink" title="六、创建新用户"></a>六、创建新用户</h2><p>&emsp;&emsp;运行如下命令：</p><ul><li><code>CREATE USER &#39;admin&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39;;</code></li><li><code>GRANT ALL PRIVILEGES ON *.* TO &#39;admin&#39;@&#39;%&#39;;</code></li></ul><img src="/2016/12/29/MySQL-5-7-绿色版安装/3.jpg"><p>&emsp;&emsp;注意<code>admin&#39;@&#39;%</code>中的百分号，这里使用百分号意味着允许任意远程客户端连接。<code>root@localhost</code>意味着只允许本地客户端连接。  </p><p>&emsp;&emsp;官方文档：<a href="http://dev.mysql.com/doc/refman/5.7/en/adding-users.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.7/en/adding-users.html</a></p><h2 id="七、添加为系统服务"><a href="#七、添加为系统服务" class="headerlink" title="七、添加为系统服务"></a>七、添加为系统服务</h2><p>&emsp;&emsp;运行如下命令：</p><ul><li><code>mysqld --install MySQL57</code></li><li><code>net start MySQL57</code></li></ul><img src="/2016/12/29/MySQL-5-7-绿色版安装/4.jpg"><p>&emsp;&emsp;删除服务可运行<code>sc delete MySQL57</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;安装环境为windows2008 R2，X64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、下载解压&quot;&gt;&lt;a href=&quot;#一、下载解压&quot; class=&quot;headerlink&quot; title=&quot;一、下载解压&quot;&gt;&lt;/a&gt;一、下载解压&lt;/h2
      
    
    </summary>
    
      <category term="DBMS" scheme="http://muchstudy.com/categories/DBMS/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式总结</title>
    <link href="http://muchstudy.com/2016/12/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://muchstudy.com/2016/12/28/设计模式总结/</id>
    <published>2016-12-28T13:25:46.000Z</published>
    <updated>2016-12-28T15:36:31.861Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;看完《Head First设计模式》一书，本篇算是对设计模式做一个简单的总结。</p><h2 id="一、为什么要使用设计模式"><a href="#一、为什么要使用设计模式" class="headerlink" title="一、为什么要使用设计模式"></a>一、为什么要使用设计模式</h2><p>&emsp;&emsp;个人觉得，设计模式存在的价值既是为了解决实际的问题。在碰到实际问题，合适的场景使用设计模式会带来如下好处：</p><ul><li>让代码结构更加清晰</li><li>使得代码易于维护</li><li>利于后期功能扩展</li><li>使用共同的术语方便技术人员相互交流</li></ul><h2 id="二、如何使用设计模式"><a href="#二、如何使用设计模式" class="headerlink" title="二、如何使用设计模式"></a>二、如何使用设计模式</h2><p>&emsp;&emsp;对于如何使用设计模式，个人觉得没必要去记住书中的设计模式使用套路，一个是的确很难记，另外就是设计模式应当是在解决实际问题中<strong>自然而然生长出来</strong>的，而不是套出来的。 但是，还是应当对设计模式有所了解，这样在解决问题时容易获得灵感。</p><h2 id="三、感想"><a href="#三、感想" class="headerlink" title="三、感想"></a>三、感想</h2><p>&emsp;&emsp;在看本书之前，只熟悉常见的几个设计模式。看完之后给我最大的感受就是，虽然很多模式不知道，但是在实际的工作当中已经使用了大量的设计模式，比如装饰者、观察者、策略等模式。<br>&emsp;&emsp;当在实际工作当中，遇到需要解决的问题时，自然而然就会去想程序该怎么设计比较合理。在思考整个代码结构如何才能更优的过程中，应当忘记设计模式的使用套路，专注与问题的本质上。当以最优的方式解决问题后，这个最优解其实就是一种模式。<br>&emsp;&emsp;最后，一切应当以解决问题为导向。切记为了使用设计模式而生搬硬套的使用设计模式。<strong>代码应在解决问题的基础上以简洁、优雅、易懂为好。</strong></p><h2 id="四、设计模式系列文章"><a href="#四、设计模式系列文章" class="headerlink" title="四、设计模式系列文章"></a>四、设计模式系列文章</h2><p><a href="http://muchstudy.com/2016/11/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%80%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">设计模式系列之一单例模式</a><br><a href="http://muchstudy.com/2016/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%8C%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/">设计模式系列之二策略模式</a><br><a href="http://muchstudy.com/2016/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%89%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/">设计模式系列之三观察者模式</a><br><a href="http://muchstudy.com/2016/12/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%9B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/">设计模式系列之四装饰者模式</a><br><a href="http://muchstudy.com/2016/12/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%94%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/">设计模式系列之五工厂模式</a><br><a href="http://muchstudy.com/2016/12/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%85%AD%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/">设计模式系列之六命令模式</a><br><a href="http://muchstudy.com/2016/12/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%83%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/">设计模式系列之七适配器模式</a><br><a href="http://muchstudy.com/2016/12/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%85%AB%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/">设计模式系列之八外观模式</a><br><a href="http://muchstudy.com/2016/12/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B9%9D%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/">设计模式系列之九模板方法模式</a><br><a href="http://muchstudy.com/2016/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/">设计模式系列之十迭代器模式</a><br><a href="http://muchstudy.com/2016/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E4%B8%80%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/">设计模式系列之十一组合模式</a><br><a href="http://muchstudy.com/2016/12/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E4%BA%8C%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/">设计模式系列之十二状态模式</a><br><a href="http://muchstudy.com/2016/12/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E4%B8%89%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/">设计模式系列之十三代理模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;看完《Head First设计模式》一书，本篇算是对设计模式做一个简单的总结。&lt;/p&gt;
&lt;h2 id=&quot;一、为什么要使用设计模式&quot;&gt;&lt;a href=&quot;#一、为什么要使用设计模式&quot; class=&quot;headerlink&quot; title=&quot;一、为什么要使用设
      
    
    </summary>
    
      <category term="设计模式" scheme="http://muchstudy.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>解决正确配置Servlet async-supported参数报错问题</title>
    <link href="http://muchstudy.com/2016/12/28/%E8%A7%A3%E5%86%B3%E6%AD%A3%E7%A1%AE%E9%85%8D%E7%BD%AEServlet-async-supported%E5%8F%82%E6%95%B0%E8%80%8C%E4%B8%8D%E5%A5%BD%E4%BD%BF%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://muchstudy.com/2016/12/28/解决正确配置Servlet-async-supported参数而不好使的问题/</id>
    <published>2016-12-28T09:44:17.000Z</published>
    <updated>2016-12-28T09:59:57.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、描述"><a href="#一、描述" class="headerlink" title="一、描述"></a>一、描述</h2><p>环境：</p><blockquote><p>JDK 1.7<br>Servlet 3.0<br>tomcat 7</p></blockquote><p>&emsp;&emsp;Servlet 3.0新增异步处理支持，配置servlet参数<code>&lt;async-supported&gt;true&lt;/async-supported&gt;</code>，或通过注解方式启用<code>@WebServlet(urlPatterns = &quot;/demo&quot;,asyncSupported = true)</code>。当正确配置后，发现照例报如下错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: A filter or servlet of the current chain does not support asynchronous operations.</span><br><span class="line">org.apache.catalina.connector.Request.startAsync(Request.java:1660)</span><br><span class="line">org.apache.catalina.connector.Request.startAsync(Request.java:1653)</span><br><span class="line">org.apache.catalina.connector.RequestFacade.startAsync(RequestFacade.java:1022)</span><br></pre></td></tr></table></figure></p><h2 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h2><p>&emsp;&emsp;找了一圈，所有的解决办法都在说可能是参数配置未配置正确，或者是需要在server.xml上配置。最后，在<a href="http://stackoverflow.com/questions/10970829/async-servlet-exception" target="_blank" rel="noopener">StackOverflow</a>上找到了如下答案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setAttribute(<span class="string">"org.apache.catalina.ASYNC_SUPPORTED"</span>, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><h2 id="三、其它"><a href="#三、其它" class="headerlink" title="三、其它"></a>三、其它</h2><p>Servlet 3.0 新特性详解：<a href="https://www.ibm.com/developerworks/cn/java/j-lo-servlet30/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-lo-servlet30/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、描述&quot;&gt;&lt;a href=&quot;#一、描述&quot; class=&quot;headerlink&quot; title=&quot;一、描述&quot;&gt;&lt;/a&gt;一、描述&lt;/h2&gt;&lt;p&gt;环境：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JDK 1.7&lt;br&gt;Servlet 3.0&lt;br&gt;tomcat 7&lt;/p&gt;
      
    
    </summary>
    
      <category term="Java" scheme="http://muchstudy.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式系列之十三代理模式</title>
    <link href="http://muchstudy.com/2016/12/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E4%B8%89%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://muchstudy.com/2016/12/25/设计模式系列之十三代理模式/</id>
    <published>2016-12-25T07:40:12.000Z</published>
    <updated>2016-12-25T10:16:12.099Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;代理模式可以理解为通过一个中间者来访问数据，比如我们通过代理来访问互联网，通过代理商购买游戏点卡等。这些都属于代理模式的设计思想。</p><img src="/2016/12/25/设计模式系列之十三代理模式/proxy.png"><p>&emsp;&emsp;上图为代理模式的一般数据交互逻辑。在Java后台开发中，使用RMI调用远程数据既采用了代理模式。</p><p>&emsp;&emsp;在我的实际开发中，以个人开发经验，使用代理模式最主要是为了解决如下两个问题:</p><blockquote><ol><li>封装访问远程数据的具体实现逻辑。即客户端只需调用Proxy提供的方法即可，不关心数据从哪里取，本地or远程。</li><li>提供一个统一的口径实现过滤。</li></ol></blockquote><p>&emsp;&emsp;下面分享一个使用到代理模式设计思想的代码样例。需求是这样的，前后端分离，前端统一使用<code>$.ajax</code>来请求后端提供的RESTFULL服务。需要在框架层面做到系统级的异常处理，即开发人员不需再关心系统级的异常，只需要关注业务逻辑。<br>&emsp;&emsp;针对于该需求，明显是需要一个Proxy，通过一个Proxy来转发前后端的交互。或者说叫做数据请求过滤器的东西，来劫持所有的前端数据请求。最终的实现样例代码如下所示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ajax方法clone</span></span><br><span class="line">    <span class="keyword">var</span> _ajax = $.ajax;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里相当于劫持了原生的$.ajax方法，通过劫持实现对请求的过滤，系统级异常的捕获</span></span><br><span class="line">    $.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//ajax deferred promise 保持原有promise操作</span></span><br><span class="line">        <span class="keyword">var</span> promise;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> _param = $.extend(&#123;&#125;, &#123;<span class="attr">autoWrap</span> : <span class="literal">true</span>&#125;, param);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果不需要默认的封装:autoWrap = false;</span></span><br><span class="line">        <span class="keyword">if</span> (!_param.autoWrap) &#123;</span><br><span class="line">            promise = _ajax(_param);</span><br><span class="line">            <span class="comment">//直接返回</span></span><br><span class="line">            <span class="keyword">return</span> promise;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//default ajax options</span></span><br><span class="line">        <span class="keyword">var</span> defaultOpts = &#123;</span><br><span class="line">            type: <span class="string">"POST"</span>,</span><br><span class="line">            dataType: <span class="string">"json"</span>,</span><br><span class="line">            cache: <span class="literal">false</span>,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                <span class="string">"CSRFToken"</span> : getCSRFToken()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//deep extend</span></span><br><span class="line">        _param = $.extend(<span class="literal">true</span>, defaultOpts, _param);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add timestamp</span></span><br><span class="line">        <span class="keyword">if</span> (!_param.cache) &#123;</span><br><span class="line">            <span class="keyword">var</span> _url = _param.url || <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">var</span> stamp = <span class="string">"T="</span>+ <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">            (_url.indexOf(<span class="string">"?"</span>) == <span class="number">-1</span>) ?( _url += <span class="string">"?"</span>+stamp):( _url += <span class="string">"&amp;"</span>+stamp);</span><br><span class="line">            _param.url = _url;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (_param.success) &#123;</span><br><span class="line">            _param.callback = _param.success;</span><br><span class="line">            <span class="keyword">delete</span> _param.success;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        promise = _ajax($.extend(&#123;</span><br><span class="line">            success:<span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> code = response.status || response.code || <span class="string">"200"</span>;</span><br><span class="line">                <span class="comment">//如果是整形，转换为字符串</span></span><br><span class="line">                <span class="keyword">typeof</span>(code)==<span class="string">"number"</span> &amp;&amp; (code=code+<span class="string">""</span>);</span><br><span class="line">                <span class="comment">//状态码控制</span></span><br><span class="line">                <span class="keyword">switch</span>(code)&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"200"</span>:</span><br><span class="line">                        <span class="comment">//数据转发</span></span><br><span class="line">                        <span class="keyword">if</span> (_param.callback) &#123;</span><br><span class="line">                             _param.callback(response);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"401"</span>:</span><br><span class="line">                        <span class="comment">//需要认证：登录超时或未登录.Session超时，弹出登陆框，登录成功后继续业务逻辑。</span></span><br><span class="line">                        ReLogin(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                            $.ajax(param);</span><br><span class="line">                        &#125;);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"400"</span>:</span><br><span class="line">                        alert(<span class="string">"请求异常！"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"403"</span>:</span><br><span class="line">                        alert(<span class="string">"请求的资源未授权！"</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">"500"</span>:</span><br><span class="line">                        alert(<span class="string">"&lt;code&gt;500:&lt;/code&gt;服务器端异常,请联系管理员.&lt;br/&gt;"</span>+(response.msg || response.message));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span> :</span><br><span class="line">                        alert(<span class="string">"&lt;code&gt;"</span>+code+<span class="string">":&lt;/code&gt;服务器端异常,请联系管理员.&lt;br/&gt;"</span>+(response.msg || response.message));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            error:<span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest, textStatus, errorThrown</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"ajax error:"</span> + textStatus);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, _param));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>上一篇：<a href="http://muchstudy.com/2016/12/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E4%BA%8C%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/">设计模式系列之十二状态模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;代理模式可以理解为通过一个中间者来访问数据，比如我们通过代理来访问互联网，通过代理商购买游戏点卡等。这些都属于代理模式的设计思想。&lt;/p&gt;
&lt;img src=&quot;/2016/12/25/设计模式系列之十三代理模式/proxy.png&quot;&gt;
&lt;p&gt;&amp;ems
      
    
    </summary>
    
      <category term="设计模式" scheme="http://muchstudy.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式系列之十二状态模式</title>
    <link href="http://muchstudy.com/2016/12/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E4%BA%8C%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://muchstudy.com/2016/12/24/设计模式系列之十二状态模式/</id>
    <published>2016-12-24T03:03:28.000Z</published>
    <updated>2016-12-24T08:17:19.620Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;举一个自动取款机的场景来说明状态模式的使用。去自动提款机取钱首先得有插卡的动作，最后还会有取卡的动作。对应两个状态，一个是无卡状态，另外一个是有卡状态。</p><h2 id="一、代码实现"><a href="#一、代码实现" class="headerlink" title="一、代码实现"></a>一、代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ATM</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> NO_CARD = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> HAVE_CARD  = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//提款机初始状态为无卡</span></span><br><span class="line"><span class="keyword">int</span> state = NO_CARD;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插卡</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCard</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(state==NO_CARD)&#123;</span><br><span class="line">System.out.println(<span class="string">"插入卡片"</span>);</span><br><span class="line"><span class="comment">//设置状态为有卡状态</span></span><br><span class="line">setState(HAVE_CARD);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(state==HAVE_CARD)&#123;</span><br><span class="line">System.out.println(<span class="string">"已插入银行卡"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取卡</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quitCard</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(state==NO_CARD)&#123;</span><br><span class="line">System.out.println(<span class="string">"你没有插入银行卡"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(state==HAVE_CARD)&#123;</span><br><span class="line">System.out.println(<span class="string">"退出卡片"</span>);</span><br><span class="line"><span class="comment">//设置状态为无卡状态</span></span><br><span class="line">setState(NO_CARD);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = state;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从上面的代码可以预见到，如果再增加状态，那么对应的操作里面就需要增加一组if-else，越到后面代码将越来越难以维护。</p><h2 id="二、使用状态模式改造"><a href="#二、使用状态模式改造" class="headerlink" title="二、使用状态模式改造"></a>二、使用状态模式改造</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//状态接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"><span class="comment">//插入卡片</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCard</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//取出卡片</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quitCard</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无卡状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoCard</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line">NewATM atm;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NoCard</span><span class="params">(NewATM newATM)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.atm = newATM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"插入卡片"</span>);</span><br><span class="line">atm.setState(NewATM.HAVE_CARD);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quitCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"你没有插入银行卡"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有卡状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HaveCard</span> <span class="keyword">implements</span> <span class="title">State</span></span>&#123;</span><br><span class="line">NewATM atm;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HaveCard</span><span class="params">(NewATM newATM)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.atm = newATM;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"已插入银行卡"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quitCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"退出卡片"</span>);</span><br><span class="line">atm.setState(NewATM.NO_CARD);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用状态模式改造后的业务代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewATM</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> State  NO_CARD;</span><br><span class="line"><span class="keyword">static</span> State HAVE_CARD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> State state = NO_CARD;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NewATM</span><span class="params">()</span></span>&#123;</span><br><span class="line">NO_CARD = <span class="keyword">new</span> NoCard(<span class="keyword">this</span>);</span><br><span class="line">HAVE_CARD = <span class="keyword">new</span> HaveCard(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插卡</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertCard</span><span class="params">()</span></span>&#123;</span><br><span class="line">state.insertCard();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取卡</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quitCard</span><span class="params">()</span></span>&#123;</span><br><span class="line">state.quitCard();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.state = state;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;经过改造，彻底干掉了繁琐的if-else状态判断。当有业务变更，或是新状态加入时可灵活的调整代码。</p><p><strong>系列文章：</strong><br><a href="http://muchstudy.com/2016/11/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%80%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">设计模式系列之一单例模式</a><br><a href="http://muchstudy.com/2016/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%8C%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/">设计模式系列之二策略模式</a><br><a href="http://muchstudy.com/2016/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%89%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/">设计模式系列之三观察者模式</a><br><a href="http://muchstudy.com/2016/12/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%9B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/">设计模式系列之四装饰者模式</a><br><a href="http://muchstudy.com/2016/12/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%94%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/">设计模式系列之五工厂模式</a><br><a href="http://muchstudy.com/2016/12/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%85%AD%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/">设计模式系列之六命令模式</a><br><a href="http://muchstudy.com/2016/12/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%85%AB%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/">设计模式系列之八外观模式</a><br><a href="http://muchstudy.com/2016/12/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%83%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/">设计模式系列之七适配器模式</a><br><a href="http://muchstudy.com/2016/12/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B9%9D%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/">设计模式系列之九模板方法模式</a><br><a href="http://muchstudy.com/2016/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/">设计模式系列之十迭代器模式</a><br><a href="http://muchstudy.com/2016/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E4%B8%80%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/">设计模式系列之十一组合模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;举一个自动取款机的场景来说明状态模式的使用。去自动提款机取钱首先得有插卡的动作，最后还会有取卡的动作。对应两个状态，一个是无卡状态，另外一个是有卡状态。&lt;/p&gt;
&lt;h2 id=&quot;一、代码实现&quot;&gt;&lt;a href=&quot;#一、代码实现&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="设计模式" scheme="http://muchstudy.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Maven私服Nexus3.x权限配置</title>
    <link href="http://muchstudy.com/2016/12/23/Maven%E7%A7%81%E6%9C%8DNexus3-x%E6%9D%83%E9%99%90%E9%85%8D%E7%BD%AE/"/>
    <id>http://muchstudy.com/2016/12/23/Maven私服Nexus3-x权限配置/</id>
    <published>2016-12-23T09:31:01.000Z</published>
    <updated>2017-01-14T13:09:19.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、禁用匿名访问权限"><a href="#一、禁用匿名访问权限" class="headerlink" title="一、禁用匿名访问权限"></a>一、禁用匿名访问权限</h2><img src="/2016/12/23/Maven私服Nexus3-x权限配置/1.jpg"><h2 id="二、角色创建"><a href="#二、角色创建" class="headerlink" title="二、角色创建"></a>二、角色创建</h2><img src="/2016/12/23/Maven私服Nexus3-x权限配置/2.jpg"><h2 id="三、人员创建"><a href="#三、人员创建" class="headerlink" title="三、人员创建"></a>三、人员创建</h2><img src="/2016/12/23/Maven私服Nexus3-x权限配置/3.jpg"><h2 id="四、代理配置"><a href="#四、代理配置" class="headerlink" title="四、代理配置"></a>四、代理配置</h2><p>&emsp;&emsp;通过该配置可以使得两个Nexus服务器相关联。</p><h3 id="1-配置地址"><a href="#1-配置地址" class="headerlink" title="1.配置地址"></a>1.配置地址</h3><img src="/2016/12/23/Maven私服Nexus3-x权限配置/4.jpg"><h3 id="2-配置用户"><a href="#2-配置用户" class="headerlink" title="2.配置用户"></a>2.配置用户</h3><img src="/2016/12/23/Maven私服Nexus3-x权限配置/5.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、禁用匿名访问权限&quot;&gt;&lt;a href=&quot;#一、禁用匿名访问权限&quot; class=&quot;headerlink&quot; title=&quot;一、禁用匿名访问权限&quot;&gt;&lt;/a&gt;一、禁用匿名访问权限&lt;/h2&gt;&lt;img src=&quot;/2016/12/23/Maven私服Nexus3-x权限配置
      
    
    </summary>
    
      <category term="Maven" scheme="http://muchstudy.com/categories/Maven/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式系列之十一组合模式</title>
    <link href="http://muchstudy.com/2016/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E4%B8%80%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://muchstudy.com/2016/12/21/设计模式系列之十一组合模式/</id>
    <published>2016-12-21T12:50:20.000Z</published>
    <updated>2016-12-24T08:21:00.601Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>组合模式：</strong>允许将对象组合成树型结构来表现“整体/部分”层次结构。组合能让一致的方式处理个别对象以及对象组合。</p></blockquote><p>&emsp;&emsp;接上一篇<strong><a href="http://muchstudy.com/2016/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/">设计模式系列之十迭代器模式</a></strong>的业务逻辑，现在集团公司业务扩张，新增了湖南分公司，那么采用迭代器模式可以很方便的打印出湖南分公司的所有部门。</p><h2 id="一、新需求实现"><a href="#一、新需求实现" class="headerlink" title="一、新需求实现"></a>一、新需求实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//湖南分公司</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HNBranch</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Dept&gt; depts;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HNBranch</span><span class="params">()</span></span>&#123;</span><br><span class="line">depts = <span class="keyword">new</span> ArrayList&lt;Dept&gt;();</span><br><span class="line"><span class="comment">//添加部门</span></span><br><span class="line">depts.add(<span class="keyword">new</span> Dept(<span class="string">"湖南-财务部"</span>));</span><br><span class="line">depts.add(<span class="keyword">new</span> Dept(<span class="string">"湖南-开发部"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里不再使用自定义实现的Iterator接口，而是使用Java原生集合对象的Iterator</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">createrIterator</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> HNBranchIterator(depts);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//湖南分公司的部门迭代器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HNBranchIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span>&#123;</span><br><span class="line">ArrayList&lt;Dept&gt; depts;</span><br><span class="line"><span class="keyword">int</span> position= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HNBranchIterator</span><span class="params">(ArrayList&lt;Dept&gt; depts)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.depts = depts;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(position&gt;=depts.size() || depts.get(position)==<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Dept dept = depts.get(position);</span><br><span class="line">position  = position + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> dept;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNew</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Iterator BJ = <span class="keyword">new</span> BJBranch().createrIterator();</span><br><span class="line">Iterator SH = <span class="keyword">new</span> SHBranch().createrIterator();</span><br><span class="line">Iterator HN = <span class="keyword">new</span> HNBranch().createrIterator();</span><br><span class="line"></span><br><span class="line">printDeptName(BJ);</span><br><span class="line">printDeptName(SH);</span><br><span class="line"><span class="comment">//打印新设立的湖南分公司的所有部门</span></span><br><span class="line">printDeptName(HN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDeptName</span><span class="params">(Iterator iterator)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">Dept dept = (Dept) iterator.next();</span><br><span class="line">System.out.println(dept.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;依次类推，如果再设立其它省份的分公司一样的可以很快增加上去。但是，如果需要在湖南分公司下<strong>再设立下隶属于湖南分公司的长沙分公司</strong>呢？此时，整个结构变为一棵树型结构。</p><img src="/2016/12/21/设计模式系列之十一组合模式/Composite.png"><h2 id="二、组合模式使用"><a href="#二、组合模式使用" class="headerlink" title="二、组合模式使用"></a>二、组合模式使用</h2><p>&emsp;&emsp;可使用组合模式来表现“整体/部分”层次结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不管是分子机构，还是分支机构下的部门对象都需要继承组件对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="comment">//不管是父节点还是叶子节点都有该方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//叶子节点可以没有该方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分支机构，即父节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Branch</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">ArrayList&lt;Component&gt; components;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Branch</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">components = <span class="keyword">new</span> ArrayList&lt;Component&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component component)</span></span>&#123;</span><br><span class="line">components.add(component);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(getName());</span><br><span class="line">System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line"><span class="comment">//打印子节点，这里既可以是叶子节点也可以是父节点。通过这里实现了递归</span></span><br><span class="line"><span class="keyword">for</span>(Component com:components)&#123;</span><br><span class="line">com.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//机构中的部门对象，即叶子节点</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name= name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(getName());</span><br><span class="line">System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//下面的为同级</span></span><br><span class="line">Component BJBranch = <span class="keyword">new</span> Branch(<span class="string">"北京分公司"</span>);</span><br><span class="line">BJBranch.add(<span class="keyword">new</span> Dept(<span class="string">"北京-财务部"</span>));</span><br><span class="line">Component SHBranch = <span class="keyword">new</span> Branch(<span class="string">"上海分公司"</span>);</span><br><span class="line">SHBranch.add(<span class="keyword">new</span> Dept(<span class="string">"上海-财务部"</span>));</span><br><span class="line">Component HNBranch = <span class="keyword">new</span> Branch(<span class="string">"湖南分公司"</span>);</span><br><span class="line">HNBranch.add(<span class="keyword">new</span> Dept(<span class="string">"湖南-财务部"</span>));</span><br><span class="line"><span class="comment">//下面的为子级</span></span><br><span class="line">Component CS = <span class="keyword">new</span> Branch(<span class="string">"长沙子公司"</span>);</span><br><span class="line">CS.add(<span class="keyword">new</span> Dept(<span class="string">"长沙-财务部"</span>));</span><br><span class="line">HNBranch.add(CS);</span><br><span class="line"></span><br><span class="line">Component root = <span class="keyword">new</span> Branch(<span class="string">"集团公司"</span>);</span><br><span class="line">root.add(BJBranch);</span><br><span class="line">root.add(SHBranch);</span><br><span class="line">root.add(HNBranch);</span><br><span class="line"><span class="comment">//这里会递归遍历下去，直至所有节点遍历完毕</span></span><br><span class="line">root.print();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从上面的代码中可以看出，核心在于父节点与叶子节点都属于<code>Component</code>，才能组合在一起，实现递归打印。</p><p>上一篇：<a href="http://muchstudy.com/2016/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/">设计模式系列之十迭代器模式</a><br>下一篇：<a href="http://muchstudy.com/2016/12/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E4%BA%8C%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/">设计模式系列之十二状态模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;组合模式：&lt;/strong&gt;允许将对象组合成树型结构来表现“整体/部分”层次结构。组合能让一致的方式处理个别对象以及对象组合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;接上一篇&lt;strong&gt;&lt;a href
      
    
    </summary>
    
      <category term="设计模式" scheme="http://muchstudy.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux下搭建Maven私服Nexus3.X</title>
    <link href="http://muchstudy.com/2016/12/21/Linux%E4%B8%8B%E6%90%AD%E5%BB%BAMaven%E7%A7%81%E6%9C%8DNexus3-X/"/>
    <id>http://muchstudy.com/2016/12/21/Linux下搭建Maven私服Nexus3-X/</id>
    <published>2016-12-21T09:29:37.000Z</published>
    <updated>2017-01-14T13:09:25.744Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;操作系统为中标麒麟6，安装的Nexus版本为<code>nexus-3.2.0-01-unix.tar.gz</code></p><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><ol><li>从官网 <a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="noopener">https://www.sonatype.com/download-oss-sonatype</a> 下载最新版本的资源</li><li><code>Nexus 3.x.x</code>的JDK环境要求为1.8</li></ol><h2 id="二、安装配置"><a href="#二、安装配置" class="headerlink" title="二、安装配置"></a>二、安装配置</h2><p>&emsp;&emsp;下载下来<code>nexus-3.2.0-01-unix.tar.gz</code>后，我使用<code>SecureFX</code>把资源上传到了<code>/opt</code>目录下。<code>SecureFX</code>是一个客户端工具，通过UI界面就能对Linux上的文件做操作。</p><img src="/2016/12/21/Linux下搭建Maven私服Nexus3-X/1.jpg"><p>&emsp;&emsp;接下来使用<code>SecureCRT</code>连接上Linux服务器，在命令行输入如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 切换到opt目录</span><br><span class="line">$ cd /opt</span><br><span class="line"></span><br><span class="line"># 解压tar文件</span><br><span class="line">$ tar xvzf nexus-3.2.0-01-unix.tar.gz</span><br><span class="line"></span><br><span class="line"># 先切换到bin目录</span><br><span class="line">$ cd nexus-3.2.0-01/bin/</span><br><span class="line"># 启动服务器，同时还有stop，restart</span><br><span class="line">$ ./nexus start</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;默认端口为8081，此时可通过<code>http://yourIp:8081</code>访问Nexus服务器。默认用户名与密码为<code>admin/admin123</code>.</p><p>&emsp;&emsp;如果要修改默认端口，可以到安装目录下找到<code>etc/nexus-default.properties</code>，修改<code>application-port</code>项，然后restart即可。</p><p>&emsp;&emsp;如果要卸载，使用<code>rm -rf nexus-3.2.0-01</code>删除掉安装目录即可。-r为子目录一起删，f为不用一一提示。</p><h2 id="三、其它"><a href="#三、其它" class="headerlink" title="三、其它"></a>三、其它</h2><p>&emsp;&emsp;在安装完修改端口为8083后，在浏览器中输入地址发现无法访问。</p><p>&emsp;&emsp;首先在Linux服务器上查看8083端口是否启用，通过<code>netstat -lnp</code>命令即可。</p><p>&emsp;&emsp;确认端口已正在使用服务器没问题后，在客户端的CMD中通过<code>telnet yourIp 8083</code>,发现客户端无法连接。</p><p>&emsp;&emsp;最后排查防火墙，在防火墙中设置允许8083端口的HTTP访问解决问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;操作系统为中标麒麟6，安装的Nexus版本为&lt;code&gt;nexus-3.2.0-01-unix.tar.gz&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、准备&quot;&gt;&lt;a href=&quot;#一、准备&quot; class=&quot;headerlink&quot; title=&quot;一、准
      
    
    </summary>
    
      <category term="Maven" scheme="http://muchstudy.com/categories/Maven/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式系列之十迭代器模式</title>
    <link href="http://muchstudy.com/2016/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://muchstudy.com/2016/12/20/设计模式系列之十迭代器模式/</id>
    <published>2016-12-20T13:50:54.000Z</published>
    <updated>2016-12-24T08:21:31.595Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>迭代器模式：</strong>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p></blockquote><p>&emsp;&emsp;有这样的一个需求。一家集团公司在北京和上海分别有一家子公司，每家公司内部有自己的部门，且自己提供了打印部门的方法。其中一个子公司以数组来保存部门列表，另外一个以ArrayList来保存。现在需要打印所有的部门。</p><h2 id="一、原始实现"><a href="#一、原始实现" class="headerlink" title="一、原始实现"></a>一、原始实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部门对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name= name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//北京分公司</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJBranch</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Dept&gt; depts;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BJBranch</span><span class="params">()</span></span>&#123;</span><br><span class="line">depts = <span class="keyword">new</span> ArrayList&lt;Dept&gt;();</span><br><span class="line"><span class="comment">//添加部门</span></span><br><span class="line">depts.add(<span class="keyword">new</span> Dept(<span class="string">"北京-财务部"</span>));</span><br><span class="line">depts.add(<span class="keyword">new</span> Dept(<span class="string">"北京-研发部"</span>));</span><br><span class="line">depts.add(<span class="keyword">new</span> Dept(<span class="string">"北京-开发部"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ArrayList&lt;Dept&gt; <span class="title">getDepts</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> depts;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上海分公司</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SHBranch</span> </span>&#123;</span><br><span class="line">Dept[] depts;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SHBranch</span><span class="params">()</span></span>&#123;</span><br><span class="line">depts = <span class="keyword">new</span> Dept[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//添加部门</span></span><br><span class="line">depts[<span class="number">0</span>] = <span class="keyword">new</span> Dept(<span class="string">"上海-财务部"</span>);</span><br><span class="line">depts[<span class="number">1</span>] = <span class="keyword">new</span> Dept(<span class="string">"上海-研发部"</span>);</span><br><span class="line">depts[<span class="number">2</span>] = <span class="keyword">new</span> Dept(<span class="string">"上海-开发部"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Dept[] getDepts()&#123;</span><br><span class="line"><span class="keyword">return</span> depts;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">BJBranch BJ = <span class="keyword">new</span> BJBranch();</span><br><span class="line">ArrayList&lt;Dept&gt; BJDepts = BJ.getDepts();</span><br><span class="line">SHBranch SH = <span class="keyword">new</span> SHBranch();</span><br><span class="line">Dept[] SHDepts = SH.getDepts();</span><br><span class="line"><span class="comment">//遍历两家子公司的所有部门</span></span><br><span class="line"><span class="comment">/** 由于类型不同，需要两次循环 **/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;BJDepts.size();i++)&#123;</span><br><span class="line">System.out.println(BJDepts.get(i).getName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SHDepts.length;i++)&#123;</span><br><span class="line">System.out.println(SHDepts[<span class="number">0</span>].getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从上面的代码中可以看出，由于两家子公司的实现方式不一样，造成循环遍历时自能使用对应的方式来遍历，造成相当大的不便。</p><h2 id="二、使用迭代器模式来解决问题"><a href="#二、使用迭代器模式来解决问题" class="headerlink" title="二、使用迭代器模式来解决问题"></a>二、使用迭代器模式来解决问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代器接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//北京分公司的部门迭代器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJBranchIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span>&#123;</span><br><span class="line">ArrayList&lt;Dept&gt; depts;</span><br><span class="line"><span class="keyword">int</span> position= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BJBranchIterator</span><span class="params">(ArrayList&lt;Dept&gt; depts)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.depts = depts;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(position&gt;=depts.size() || depts.get(position)==<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Dept dept = depts.get(position);</span><br><span class="line">position  = position + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> dept;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改造后的北京分公司</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJBranch</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Dept&gt; depts;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BJBranch</span><span class="params">()</span></span>&#123;</span><br><span class="line">depts = <span class="keyword">new</span> ArrayList&lt;Dept&gt;();</span><br><span class="line"><span class="comment">//添加部门</span></span><br><span class="line">depts.add(<span class="keyword">new</span> Dept(<span class="string">"北京-财务部"</span>));</span><br><span class="line">depts.add(<span class="keyword">new</span> Dept(<span class="string">"北京-研发部"</span>));</span><br><span class="line">depts.add(<span class="keyword">new</span> Dept(<span class="string">"北京-开发部"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*public ArrayList&lt;Dept&gt; getDepts()&#123;</span></span><br><span class="line"><span class="comment">return depts;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//改造为返回Iterator对象，而不是ArrayList</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">createrIterator</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BJBranchIterator(depts);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//上海分公司的部门迭代器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SHBranchIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span></span>&#123;</span><br><span class="line">Dept[] depts;</span><br><span class="line"><span class="keyword">int</span> position= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SHBranchIterator</span><span class="params">(Dept[] depts)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.depts = depts;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(position&gt;=depts.length|| depts[position]==<span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Dept dept = depts[position];</span><br><span class="line">position  = position + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> dept;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//改造后的上海分公司</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SHBranch</span> </span>&#123;</span><br><span class="line">Dept[] depts;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SHBranch</span><span class="params">()</span></span>&#123;</span><br><span class="line">depts = <span class="keyword">new</span> Dept[<span class="number">3</span>];</span><br><span class="line"><span class="comment">//添加部门</span></span><br><span class="line">depts[<span class="number">0</span>] = <span class="keyword">new</span> Dept(<span class="string">"上海-财务部"</span>);</span><br><span class="line">depts[<span class="number">1</span>] = <span class="keyword">new</span> Dept(<span class="string">"上海-研发部"</span>);</span><br><span class="line">depts[<span class="number">2</span>] = <span class="keyword">new</span> Dept(<span class="string">"上海-开发部"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*public Dept[] getDepts()&#123;</span></span><br><span class="line"><span class="comment">return depts;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//改造为返回Iterator对象，而不是数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">createrIterator</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SHBranchIterator(depts);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用迭代器模式后的代码实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNew</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Iterator BJ = <span class="keyword">new</span> BJBranch().createrIterator();</span><br><span class="line">Iterator SH = <span class="keyword">new</span> SHBranch().createrIterator();</span><br><span class="line"></span><br><span class="line">printDeptName(BJ);</span><br><span class="line">printDeptName(SH);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printDeptName</span><span class="params">(Iterator iterator)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">Dept dept = (Dept) iterator.next();</span><br><span class="line">System.out.println(dept.getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从改造后的代码中可以看出，使用迭代器模式改造后，成功的屏蔽了北京与上海分公司遍历的差异。</p><p>&emsp;&emsp;在Java中使用<code>Iterator</code>去遍历<code>ArrayList</code>应该大部分人都知道,实际上这个<code>Iterator</code>就是迭代器模式的实现。如果不使用迭代器模式，可以试想一下<code>HasTable</code>、<code>HashSet</code>、<code>HashMap</code>等类型，每一个都得按对应的方式去循环遍历，相当的不方便。</p><p>上一篇：<a href="http://muchstudy.com/2016/12/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B9%9D%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/">设计模式系列之九模板方法模式</a><br>下一篇：<a href="http://muchstudy.com/2016/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E4%B8%80%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/">设计模式系列之十一组合模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;迭代器模式：&lt;/strong&gt;提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;有这样的一个需求。一家集团公司在北京和上海分别有一家子公司，每家
      
    
    </summary>
    
      <category term="设计模式" scheme="http://muchstudy.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>坚持一年背英语单词的总结</title>
    <link href="http://muchstudy.com/2016/12/18/%E5%9D%9A%E6%8C%81%E4%B8%80%E5%B9%B4%E8%83%8C%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://muchstudy.com/2016/12/18/坚持一年背英语单词的总结/</id>
    <published>2016-12-18T04:49:12.000Z</published>
    <updated>2016-12-18T10:19:26.655Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/12/18/坚持一年背英语单词的总结/打卡日历.jpg"><p>&emsp;&emsp;上图为前几天百词斩给我推送的本年度的年终总结。看完这个总结，感觉有必要把在这个过程中的所思所想整理分享出来。</p><h2 id="01-为什么要学英语"><a href="#01-为什么要学英语" class="headerlink" title="01 为什么要学英语"></a>01 为什么要学英语</h2><p>&emsp;&emsp;作为一个已经离开大学很多年的人，平时工作中也是地道的中文环境。年近三十，不禁要问，在这个年纪为什么还要学英文？</p><p>&emsp;&emsp;在知乎上看到过这样一个问题：“知乎跟Quora的区别是怎样的？”，有一个答案是这样回答的：“如果把知乎比喻为一个小水潭，那么Quora就是一片汪洋大海”。在这里解释一下，知乎是国内的一个问答社区，用户基本为国内用户。Quora是国外的一个问答社区，他们的模式基本一样，唯一的区别是Quora的用户分布在世界各地，相互之间以英文沟通交流，在Quora上经常可以看到不同地区、不同语言、不同文化环境之间的语言交锋。</p><p>&emsp;&emsp;我希望通过对英语的掌握，开启另外一扇窗。<strong>世界那么大，我想去看看</strong>。  </p><h2 id="02-关于英语学习的感悟"><a href="#02-关于英语学习的感悟" class="headerlink" title="02 关于英语学习的感悟"></a>02 关于英语学习的感悟</h2><p>&emsp;&emsp;英语一向是我的弱项，上学时的英语成绩也一向是在及格线上挣扎。坚持完一年后，关于英语的学习有一些自己的感受。</p><p>&emsp;&emsp;关于单词的拼写。曾经记不住几个单词，正确的拼写出完整的单词相当的困难。现在，发现拼写单词相当的简单。很多复杂的单词往往都是由简单的单词构成，只需要记住简单单词的拼写即可。另外，记住一个单词的正确发音后，通过正确的发音也能帮助单词的拼写。</p><p>&emsp;&emsp;关于单词的发音。曾经见到生僻的单词基本不知道怎么念，怕念。现在，基本上能根据单词的拼写知道单词该如何念，虽然经常出错，但是已经有了念的底气。</p><p>&emsp;&emsp;当单词量到一定程度，发现语感、语法变得尤为的重要。双十一打折在一堆技术书籍中夹杂了一本《英语语法实践指南》第九版，这是一本高中的复习用书，当把到货的书单发到朋友圈后，很多人感到很诧异……</p><p>&emsp;&emsp;对于这一块，我觉得量变引起了质变。当认识的单词数量上来了之后，所有的一切在不知不觉间似乎变得容易了许多。</p><h2 id="03-关于坚持"><a href="#03-关于坚持" class="headerlink" title="03 关于坚持"></a>03 关于坚持</h2><p>&emsp;&emsp;今年一整年大概背了200多天的单词，每天15个。可能有人认为我是一个有毅力的人，可惜，错了。</p><p>&emsp;&emsp;曾经看到过一个故事，说的是一个大学生在大学里生活相当有计划，每天都准时准点的按照计划执行，相当的有毅力。很多人都以为他生活中也是这样一个人。可是一到暑假，他的节奏完全被打乱了，跟在学校时的他判若两人。可能很多人在上学时都有过这样的经历，每个周末放假前就计划好周末要看什么书，要复习哪些功课。然后，就带了很厚一摞书回家。到了周一上学的路上，一顿悔恨，感觉这一堆书都白带了，因为根本就没有看！~</p><p>&emsp;&emsp;从打卡日历中可以看到，没有圈的部分大多集中在非工作日。所以，周末魔咒对于我也是适用的。</p><p>&emsp;&emsp;在这里，我不想引出周末魔咒这一个话题。恰恰相反，我想分享的是<strong>为什么在工作日的时候能一直坚持下去？</strong></p><p>&emsp;&emsp;<strong>原因在于”习惯”</strong>。从家到公司大概一个多小时，每天到地铁准备上地铁时戴上耳塞准备背单词，到下地铁时刚好背完。我觉得在工作日能一直不间断坚持下去的原因在于每天都有一个上班的一小时，而且养成了在这一小时里背单词的习惯。</p><p>&emsp;&emsp;所以，我认为对于坚持干一件事毅力固然重要，而习惯的养成也起很大的作用。每天上地铁时固定的提醒，每天雷打不动的地铁一小时为坚持营造了良好的条件。</p><p>&emsp;&emsp;最后，我还想说的是这一条件是可以创造的。比如下班回家的一小时可以用来在kindle中看书；比如中饭到下午上班之间的时间可以用来扫订阅的RSS；比如晚饭后到睡觉这一段时间可以用来看电影；<strong>开吃晚饭就同时触发电视的开关，这样一种习惯相比于毅力来得更加的轻松自然。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2016/12/18/坚持一年背英语单词的总结/打卡日历.jpg&quot;&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;上图为前几天百词斩给我推送的本年度的年终总结。看完这个总结，感觉有必要把在这个过程中的所思所想整理分享出来。&lt;/p&gt;
&lt;h2 id=&quot;01-为什么要学英语&quot;&gt;
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式系列之九模板方法模式</title>
    <link href="http://muchstudy.com/2016/12/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B9%9D%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://muchstudy.com/2016/12/17/设计模式系列之九模板方法模式/</id>
    <published>2016-12-17T09:23:23.000Z</published>
    <updated>2016-12-20T15:40:48.404Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>模板方法模式：</strong>在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p></blockquote><p>&emsp;&emsp;有一个泡茶和冲咖啡的业务，他们都有差不多相似的流程。</p><h2 id="一、不使用设计模式"><a href="#一、不使用设计模式" class="headerlink" title="一、不使用设计模式"></a>一、不使用设计模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> </span>&#123;</span><br><span class="line"><span class="comment">//泡茶流程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">boilWater();</span><br><span class="line">steepTeaBag();</span><br><span class="line">pourInCup();</span><br><span class="line">addLemon();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"烧水"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">steepTeaBag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"泡茶"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"倒进杯子"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLemon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"加柠檬"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> </span>&#123;</span><br><span class="line"><span class="comment">//冲咖啡流程</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">boilWater();</span><br><span class="line">brewCoffeeGrinds();</span><br><span class="line">pourInCup();</span><br><span class="line">addSugarAndMilk();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"烧水"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brewCoffeeGrinds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"冲咖啡"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"倒进杯子"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addSugarAndMilk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"加牛奶和糖"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、模板方法模式的使用"><a href="#二、模板方法模式的使用" class="headerlink" title="二、模板方法模式的使用"></a>二、模板方法模式的使用</h2><p>&emsp;&emsp;下面以一个代码样例来说明模板方法模式的使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义模板方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateMethod</span> </span>&#123;</span><br><span class="line"><span class="comment">//冲咖啡和泡茶的模板，注意这里的final,意味着该方法不可修改，即模板中方法的先后顺序被固定</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">template</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//烧水</span></span><br><span class="line">boilWater();</span><br><span class="line"><span class="comment">//冲泡：用沸水"浸泡"茶叶/用沸水"冲泡"咖啡</span></span><br><span class="line">brew();</span><br><span class="line"><span class="comment">//把泡好的饮料倒进杯子</span></span><br><span class="line">pourInCup();</span><br><span class="line"><span class="comment">//加调料</span></span><br><span class="line">addCondiments();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**这两个方法交给子类去实现**/</span></span><br><span class="line"><span class="comment">//茶应该"浸泡"，咖啡应该"冲泡"</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//茶加柠檬，咖啡加牛奶和糖</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**这两个方法属于公用方法**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"烧水"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"倒进杯子"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tea</span> <span class="keyword">extends</span> <span class="title">TemplateMethod</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"浸泡"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"加柠檬"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">TemplateMethod</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"冲泡"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"加糖和牛奶"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Tea tea = <span class="keyword">new</span> Tea();</span><br><span class="line">Coffee coffee = <span class="keyword">new</span> Coffee();</span><br><span class="line"><span class="comment">//泡茶</span></span><br><span class="line">tea.template();</span><br><span class="line"><span class="comment">//冲咖啡</span></span><br><span class="line">coffee.template();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、使用钩子-hook-来做一些其它操作"><a href="#三、使用钩子-hook-来做一些其它操作" class="headerlink" title="三、使用钩子(hook)来做一些其它操作"></a>三、使用钩子(hook)来做一些其它操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义模板方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TemplateMethodWithHook</span> </span>&#123;</span><br><span class="line"><span class="comment">//冲咖啡和泡茶的模板，注意这里的final,意味着该方法不可修改，即模板中方法的先后顺序被固定</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">template</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//烧水</span></span><br><span class="line">boilWater();</span><br><span class="line"><span class="comment">//冲泡：用沸水"浸泡"茶叶/用沸水"冲泡"咖啡</span></span><br><span class="line">brew();</span><br><span class="line"><span class="comment">//把泡好的饮料倒进杯子</span></span><br><span class="line">pourInCup();</span><br><span class="line"><span class="comment">//加调料</span></span><br><span class="line"><span class="keyword">if</span> (customerWantsCondiments()) &#123;</span><br><span class="line">addCondiments();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**这两个方法交给子类去实现**/</span></span><br><span class="line"><span class="comment">//茶应该"浸泡"，咖啡应该"冲泡"</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//茶加柠檬，咖啡加牛奶和糖</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**这两个方法属于公用方法**/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">boilWater</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"烧水"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pourInCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"倒进杯子"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里是个钩子，子类可决定是否需要加调料。也就是说子类可通过这个hook控制模板定义的逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">customerWantsCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeaWithHook</span> <span class="keyword">extends</span> <span class="title">TemplateMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"浸泡"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"加柠檬"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">customerWantsCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//不需要加柠檬</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeWithHook</span> <span class="keyword">extends</span> <span class="title">TemplateMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"冲泡"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"加糖和牛奶"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">customerWantsCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//需要加糖和牛奶</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHook</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">TeaWithHook teaHook = <span class="keyword">new</span> TeaWithHook();</span><br><span class="line">CoffeeWithHook coffeeHook = <span class="keyword">new</span> CoffeeWithHook();</span><br><span class="line"><span class="comment">//泡茶，不加柠檬</span></span><br><span class="line">teaHook.template();</span><br><span class="line"><span class="comment">//冲咖啡，加糖和牛奶</span></span><br><span class="line">coffeeHook.template();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、比较"><a href="#四、比较" class="headerlink" title="四、比较"></a>四、比较</h2><table><thead><tr><th>不使用设计模式</th><th style="text-align:center">使用模板方法模式</th></tr></thead><tbody><tr><td>Coffee和Tea主导一切；它们控制了算法</td><td style="text-align:center">TemplateMethod控制了一切，它拥有算法，并且<strong>保护这个算法</strong></td></tr><tr><td>Coffee和Tea之间存在着重复的代码</td><td style="text-align:center">通过TemplateMethod类实现了代码的复用</td></tr><tr><td>如果算法变了，需要修改Coffee和Tea类</td><td style="text-align:center">新增算法或调整顺序只需要修改TemplateMethod类</td></tr><tr><td>由于类的组织不具有弹性，新加入第三种类型时需要完全重写一份</td><td style="text-align:center">由于有模板存在，只需要实现差异化的逻辑即可</td></tr><tr><td>算法的知识和它的实现会分散在许多类中</td><td style="text-align:center">TemplateMethod类专注在算法本身，而由子类提供完整的实现</td></tr></tbody></table><p>上一篇：<a href="http://muchstudy.com/2016/12/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%85%AB%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/">设计模式系列之八外观模式</a><br>下一篇：<a href="http://muchstudy.com/2016/12/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%8D%81%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/">设计模式系列之十迭代器模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;模板方法模式：&lt;/strong&gt;在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;有
      
    
    </summary>
    
      <category term="设计模式" scheme="http://muchstudy.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式系列之八外观模式</title>
    <link href="http://muchstudy.com/2016/12/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%85%AB%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://muchstudy.com/2016/12/17/设计模式系列之八外观模式/</id>
    <published>2016-12-17T07:46:21.000Z</published>
    <updated>2016-12-20T15:38:16.476Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>外观模式：</strong>提供了一个统一的接口，用来访问子系统的一群接口。外观定义了一个高层接口，让子系统更容易使用。</p></blockquote><p>&emsp;&emsp;下面通过一个图来说明外观模式的使用，此图来自于《Head First设计模式》一书。</p><img src="/2016/12/17/设计模式系列之八外观模式/外观模式.jpg"><p>&emsp;&emsp;从上图中可以看到，通过一个统一的Facade来调用复杂的子系统的类。</p><p>&emsp;&emsp;按我的理解，外观模式实际上就是抽取一些公共的业务逻辑封装起来，以统一的方法来调用。使代码结构更加清晰，易于维护，避免流水代码。</p><p>&emsp;&emsp;举一个简单的例子，下班回家三件事：开门、开灯、开电视。上班出门要干三件事：关电视、关灯、关门。</p><h3 id="流水线似的写法"><a href="#流水线似的写法" class="headerlink" title="流水线似的写法"></a>流水线似的写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Door</span> </span>&#123;</span><br><span class="line"><span class="comment">//开门</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关门</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line"><span class="comment">//开灯</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关灯</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TV</span> </span>&#123;</span><br><span class="line"><span class="comment">//开电视</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关电视</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOld</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Light light = <span class="keyword">new</span> Light();</span><br><span class="line">Door door = <span class="keyword">new</span> Door();</span><br><span class="line">TV tv = <span class="keyword">new</span> TV();</span><br><span class="line"><span class="comment">//回家的业务逻辑</span></span><br><span class="line">door.open();</span><br><span class="line">light.on();</span><br><span class="line">tv.on();</span><br><span class="line"><span class="comment">//出门的业务逻辑</span></span><br><span class="line">tv.off();</span><br><span class="line">light.off();</span><br><span class="line">door.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用外观模式进行封装"><a href="#使用外观模式进行封装" class="headerlink" title="使用外观模式进行封装"></a>使用外观模式进行封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//外观模式的实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">TV tv;</span><br><span class="line">Light light;</span><br><span class="line">Door door;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Facade</span><span class="params">(Door door,Light light,TV tv)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.tv= tv;</span><br><span class="line"><span class="keyword">this</span>.light = light;</span><br><span class="line"><span class="keyword">this</span>.door = door;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装回家的业务逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goHome</span><span class="params">()</span></span>&#123;</span><br><span class="line">door.open();</span><br><span class="line">light.on();</span><br><span class="line">tv.on();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装出门的业务逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goOut</span><span class="params">()</span></span>&#123;</span><br><span class="line">tv.off();</span><br><span class="line">light.off();</span><br><span class="line">door.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNew</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">Light light = <span class="keyword">new</span> Light();</span><br><span class="line">Door door = <span class="keyword">new</span> Door();</span><br><span class="line">TV tv = <span class="keyword">new</span> TV();</span><br><span class="line">Facade facade = <span class="keyword">new</span> Facade(door,light,tv);</span><br><span class="line"><span class="comment">/* 1.对于后期的运维人员，只需要知道这两个方法要干的事情即可，而不需要点开看里面的具体实现逻辑</span></span><br><span class="line"><span class="comment"> * 2.如果是流水线的写法，则需要完完整整的把所有逻辑从头看到尾</span></span><br><span class="line"><span class="comment"> * 3.这样的写法让代码结构更清晰</span></span><br><span class="line"><span class="comment"> * 4.如果业务逻辑有变更，只需要修改对应的封装即可，而不需要去修改散落着各处的代码</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="comment">//回家逻辑</span></span><br><span class="line">facade.goHome();</span><br><span class="line"><span class="comment">//出门逻辑</span></span><br><span class="line">facade.goOut();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上一篇：<a href="http://muchstudy.com/2016/12/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%83%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/">设计模式系列之七适配器模式</a><br>下一篇：<a href="http://muchstudy.com/2016/12/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B9%9D%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/">设计模式系列之九模板方法模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;外观模式：&lt;/strong&gt;提供了一个统一的接口，用来访问子系统的一群接口。外观定义了一个高层接口，让子系统更容易使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;下面通过一个图来说明外观模式的使用，此图来自
      
    
    </summary>
    
      <category term="设计模式" scheme="http://muchstudy.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>文章推荐:《独家回应:陈天桥与加州理工的1亿美元》</title>
    <link href="http://muchstudy.com/2016/12/16/%E6%96%87%E7%AB%A0%E6%8E%A8%E8%8D%90-%E3%80%8A%E7%8B%AC%E5%AE%B6%E5%9B%9E%E5%BA%94-%E9%99%88%E5%A4%A9%E6%A1%A5%E4%B8%8E%E5%8A%A0%E5%B7%9E%E7%90%86%E5%B7%A5%E7%9A%841%E4%BA%BF%E7%BE%8E%E5%85%83%E3%80%8B/"/>
    <id>http://muchstudy.com/2016/12/16/文章推荐-《独家回应-陈天桥与加州理工的1亿美元》/</id>
    <published>2016-12-16T04:48:12.000Z</published>
    <updated>2016-12-16T05:05:17.648Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;在微信公众号<strong>知识分子</strong>上看到了这篇文章，对文中的这一段印象深刻。</p><p>&emsp;&emsp;在一次访谈中陈天桥被问到“<strong>为什么会产生支持脑科学研究的想法？</strong>”</p><p>他给出的答案如下：</p><blockquote><p>&emsp;&emsp;十七年前我们创立第一个游戏式虚拟社区，五年后就已经有千万人同时在线，十七年的商业运营让我们积累了财富，积累了对世界的认知，也积累了迷思，比如<strong>为什么虚拟世界的种种虚拟成就或痛苦会如同真实世界一样深刻地影响每个参与者，甚至促使其做出种种匪夷所思的决定等等。</strong>对于这些迷思，过去这么多年我们试图从哲学、宗教、科学多个角度来解释，但思考的结果往往是带来更多的迷惑。</p><p>&emsp;&emsp;这些问题既重大、严肃又充满无尽的想象空间。它吸引我们如同回到十七年前创业之初一样，从零开始研究各个可投入的社会领域，从零开始构画各种发展策略。所幸的是，我们比起十七年前拥有更多智慧而坦诚的朋友和师长。他们鼓励并支持我们以最大的勇气和最坚定的信念来继续探寻上述我们包括所有人都迷惑的问题。因此我们把<strong>这个理想定义为——全力支持人类在对大脑认知领域的无尽探索。</strong></p><p>&emsp;&emsp;脑科学作为人类现有知识体系里最为复杂而困难的课题之一，既充满魅力又让人望而却步。我们深知支持脑科学研究的决定将带来两个必然的挑战：巨大的付出和漫长的等待。对于前者，<strong>我们的回答是：全力以赴，对于后者，我们的回答是：永不止步。</strong></p></blockquote><p>&emsp;&emsp;看完这个回答，给我也带来了无尽的迷思……另外，有益于全人类的理想以及面对困难的全力以赴与永不止步使人由.衷的敬佩。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;在微信公众号&lt;strong&gt;知识分子&lt;/strong&gt;上看到了这篇文章，对文中的这一段印象深刻。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在一次访谈中陈天桥被问到“&lt;strong&gt;为什么会产生支持脑科学研究的想法？&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;他
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式系列之七适配器模式</title>
    <link href="http://muchstudy.com/2016/12/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%83%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://muchstudy.com/2016/12/14/设计模式系列之七适配器模式/</id>
    <published>2016-12-14T13:37:23.000Z</published>
    <updated>2016-12-17T09:14:49.373Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>适配器模式：</strong>将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。</p></blockquote><p>&emsp;&emsp;对于适配器模式，实际上就是一个转接口的概念。比如iphone7的耳塞必须通过转接才能适配，比如水货笔记本的插头必须通过一个转接口才能适配国内的插座等。下面通过代码来具体认识一下适配器模式。</p><h3 id="原始接口"><a href="#原始接口" class="headerlink" title="原始接口"></a>原始接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原始接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OldInterface</span> </span>&#123;</span><br><span class="line"><span class="comment">//原始方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">oldWay</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OldWay</span> <span class="keyword">implements</span> <span class="title">OldInterface</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">oldWay</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"This is old way."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="新接口"><a href="#新接口" class="headerlink" title="新接口"></a>新接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目前的新接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NewInterface</span> </span>&#123;</span><br><span class="line"><span class="comment">//以新方法去干一件事情</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newWay</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用适配器适配原始接口"><a href="#使用适配器适配原始接口" class="headerlink" title="使用适配器适配原始接口"></a>使用适配器适配原始接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过适配器，使用新接口去调用老接口的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">implements</span> <span class="title">NewInterface</span></span>&#123;</span><br><span class="line">OldInterface old;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Adapter</span><span class="params">(OldInterface old)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.old = old;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newWay</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">old.oldWay();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">OldWay old = <span class="keyword">new</span> OldWay();</span><br><span class="line"><span class="comment">//通过适配，使用新接口去调用老接口</span></span><br><span class="line">Adapter adapter = <span class="keyword">new</span> Adapter(old);</span><br><span class="line"><span class="comment">//打印：This is old way.</span></span><br><span class="line">adapter.newWay();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过上述代码，可以很清晰的理解适配器模式的核心思想。适配器模式大量存在与新旧代码兼容，以及如今的前后端分离中的数据接口对接部分。</p><p>上一篇：<a href="http://muchstudy.com/2016/12/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%85%AD%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/">设计模式系列之六命令模式</a><br>下一篇：<a href="http://muchstudy.com/2016/12/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%85%AB%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/">设计模式系列之八外观模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;适配器模式：&lt;/strong&gt;将一个类的接口，转换成客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;对于适配器模式，实际上就是一个转接口的概念。比如i
      
    
    </summary>
    
      <category term="设计模式" scheme="http://muchstudy.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>读《巨流河》有感</title>
    <link href="http://muchstudy.com/2016/12/12/%E8%AF%BB%E3%80%8A%E5%B7%A8%E6%B5%81%E6%B2%B3%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <id>http://muchstudy.com/2016/12/12/读《巨流河》有感/</id>
    <published>2016-12-12T14:42:38.000Z</published>
    <updated>2016-12-13T02:13:36.190Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/12/12/读《巨流河》有感/巨流河.gif" title="《巨流河》-齐邦媛"><p>&emsp;&emsp;这本书是一位八十多岁的老太太所写的自传。从小学、初中、高中一直到大学的抗战时期到横渡海峡后的台湾时期。以一个历史见证人的角度，徐徐讲述了在那波澜壮阔的历史背景下，她所遇见的人与经历的事。通过本书，可以深切体会到作为一个解放后迁往台湾的异乡人那种复杂的感情。本书十分值得一读，尤其是<strong>台版</strong>。</p><h2 id="关于国家"><a href="#关于国家" class="headerlink" title="关于国家"></a>关于国家</h2><p>&emsp;&emsp;《巨流河》的开篇写道“献给──所有为国家献身的人。”，看了作者讲述的张大飞以及作者的父亲的一生，算是真正理解了这句话的含义。</p><p>&emsp;&emsp;父母被日本人所杀的张大飞刚满十八岁即参军，为了保卫国家成为一名飞行员。抗战胜利前夕壮烈牺牲，二十多岁正值青春年华即走完自己的一生。对比如今的和平时代，跟他年龄相仿的人估计才刚刚大学毕业，懵懵懂懂的进入社会，一些人可能还在啃老。而张大飞为了保家卫国，此时已在蓝天中与日本人的战斗机战斗了无数个回合。而这一切，是真实发生在距今六七十年前的事。</p><p>&emsp;&emsp;齐邦媛的父亲留学德国，回国后参加郭松龄的改革兵变失败而被迫流亡。而后，抗日战争爆发，积极与日本人做斗争。在这之前，只知道那时的国民党腐败横行，各种无能。看完了齐邦媛讲述父亲的事迹，发现不能一概而论。她的父亲为了整个国家民族，为了东北，为了沦陷区的父老乡亲而呕心沥血。在那个时代背景下的人们，同仇敌忾，把民族大义放在首位，不计个人得失共同抵御外敌。</p><p>&emsp;&emsp;站在国家的角度，应当摒弃政党的偏见，像这些为了国家而牺牲的人不应被遗忘，值得永远铭记。</p><h2 id="关于文学"><a href="#关于文学" class="headerlink" title="关于文学"></a>关于文学</h2><p>&emsp;&emsp;大学时，齐邦媛原本选择的是哲学，后来转为英语文学，师从朱光潜。书中有两个关于朱光潜的轶事。</p><p>&emsp;&emsp;其一：“一日，一学生见朱光潜的院子里满地落叶，相帮老师打扫一下，朱老师立刻阻止他说，我等了好久才存了这么多层落叶，晚上在书房看书，可以听见雨落下来，风卷起的声音。这个记忆，比赞许多秋天境界的诗更为生动、深刻。”；</p><p>&emsp;&emsp;其二：“朱老师读到”the fowls of heaven have wings，……chains tie us down by land and sea”（天上的鸟儿有翅膀，链紧我们的是大地和海洋），说中国古诗有相似的风云有鸟路，江汉限无梁”之句，此时竟然语带便咽，稍微停顿又继续念下去，念“if any chance to heave a sign”（若有人为我叹息，）“they pity me，and not my grief.”（他们怜悯的是我,不是我的悲苦。）老师取下了眼镜，眼泪流下双颊，突然把书合上，快步走出教室，留下满室愕然，却无人开口说话。也许，在那样一个艰困的时代，坦率表现感情是一件奢侈的事，对于仍然崇拜偶的大学三年级学生来说，这是一件难于评论的意外，甚至是感到荣幸的事，能看到文学名师至情的眼泪。”</p><p>&emsp;&emsp;上面的轶事中，文学的美让一位老师在众目睽睽之下而流泪。有这样一位老师，沉浸在文学的海洋中应当有无穷的乐趣。</p><p>&emsp;&emsp;书中讲到了英诗，知道了雪莱的《云雀之歌》、济慈的《夜莺颂》，通过作者的介绍而真切感受到了英诗的美妙。后来作者到美国进修，那种对知识的渴望，对文学的追求令人心生敬佩。</p><h2 id="关于人生"><a href="#关于人生" class="headerlink" title="关于人生"></a>关于人生</h2><p>&emsp;&emsp;看完了《巨流河》，只觉得人生是何其的短暂。</p><p>&emsp;&emsp;作者在八十岁高龄时回忆起少年往事恍若隔世。两岸开放探亲后，相隔半个世纪回到大陆。见到曾经的大学同学，印象中个个花枝招展，此时此刻都变成了老太太。大家都变了模样，各自经历了自己的人生而到了暮年。慢慢的，收到曾经大学同学一个个去逝的消息，半个世纪相隔两岸没有交集，只依稀记得同学时期的故事，给人一种快速来到这个世界上然后又快速离开的错觉。</p><p>&emsp;&emsp;人生短暂，更显得每一天、每时每刻都更加珍贵。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2016/12/12/读《巨流河》有感/巨流河.gif&quot; title=&quot;《巨流河》-齐邦媛&quot;&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;这本书是一位八十多岁的老太太所写的自传。从小学、初中、高中一直到大学的抗战时期到横渡海峡后的台湾时期。以一个历史见证人的角度，徐徐讲
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
      <category term="随笔" scheme="http://muchstudy.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>jQuery validator addMethod 动态提示信息</title>
    <link href="http://muchstudy.com/2016/12/12/jQuery-validator-addMethod-%E5%8A%A8%E6%80%81%E6%8F%90%E7%A4%BA%E4%BF%A1%E6%81%AF/"/>
    <id>http://muchstudy.com/2016/12/12/jQuery-validator-addMethod-动态提示信息/</id>
    <published>2016-12-12T07:22:19.000Z</published>
    <updated>2016-12-12T07:30:33.268Z</updated>
    
    <content type="html"><![CDATA[<p>关于jQuery validator addMethod自定义验证规则网络上大部分都是这样写的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.validator.addMethod(<span class="string">'PD_password'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value, element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = value.length;</span><br><span class="line">    <span class="keyword">if</span>(len&lt;<span class="number">6</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(len&gt;<span class="number">15</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;, <span class="string">"密码必须在6-15位之间"</span>);</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;现在，我想要更具体的提示信息，即能准确的提示到底是大于15位还是小于6位。在中文网页搜了一圈都没找到答案，最后在stackoverflow上找到了答案。想了想，感觉有必要把如何实现该需求分享一下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.validator.addMethod(<span class="string">'PD_password'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value, element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = value.length;</span><br><span class="line">    <span class="keyword">if</span>(len&lt;<span class="number">6</span>)&#123;</span><br><span class="line">        $(element).data(<span class="string">'error-msg'</span>,<span class="string">'长度不能少于6位'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(len&gt;<span class="number">15</span>)&#123;</span><br><span class="line">        $(element).data(<span class="string">'error-msg'</span>,<span class="string">'长度不能大于15位'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">params, element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $(element).data(<span class="string">'error-msg'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于jQuery validator addMethod自定义验证规则网络上大部分都是这样写的&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://muchstudy.com/categories/FrontEnd/"/>
    
    
  </entry>
  
  <entry>
    <title>Gulp合并requirejs并MD5文件</title>
    <link href="http://muchstudy.com/2016/12/11/Gulp%E5%90%88%E5%B9%B6requirejs%E5%B9%B6MD5%E6%96%87%E4%BB%B6/"/>
    <id>http://muchstudy.com/2016/12/11/Gulp合并requirejs并MD5文件/</id>
    <published>2016-12-11T08:46:51.000Z</published>
    <updated>2016-12-11T12:42:46.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h2><img src="/2016/12/11/Gulp合并requirejs并MD5文件/目录结构.jpg" title="目录结构"><p>可以从<a href="https://github.com/muchstudy/GulpDemo" target="_blank" rel="noopener">https://github.com/muchstudy/GulpDemo</a> 这里下载样例代码，求Star!  </p><p>说明：  </p><ol><li>js的的依赖关系为<code>main.build.js</code>–&gt;<code>three.js</code>–&gt;<code>two.js</code>–&gt;<code>one.js</code></li><li><code>main-build.js</code>为构建的入口</li><li>从github上拿下来的项目是可以直接运行的。可执行<code>gulp clean</code>与<code>gulp</code>观察结果。</li></ol><h2 id="文件合并"><a href="#文件合并" class="headerlink" title="文件合并"></a>文件合并</h2><ol><li>在requirejs目录下运行<code>npm init</code>，初始化package.json</li><li>运行<code>npm install gulp --save-dev</code>、<code>npm install gulp-requirejs-optimize --save-dev</code>、<code>`npm install gulp-rename --save-dev</code></li></ol><p>文件合并代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp            = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> reqOptimize     = <span class="built_in">require</span>(<span class="string">'gulp-requirejs-optimize'</span>);   <span class="comment">//- requireJs文件合并所需模块，选择该模块的原因为相对于其它模块活跃度较高</span></span><br><span class="line"><span class="keyword">var</span> rename          = <span class="built_in">require</span>(<span class="string">"gulp-rename"</span>);               <span class="comment">//- 文件重命名</span></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"optimize"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">"app/main-build.js"</span>)</span><br><span class="line">        .pipe(reqOptimize(&#123;</span><br><span class="line">            optimize:<span class="string">"none"</span>,                                <span class="comment">//- none为不压缩资源</span></span><br><span class="line">            <span class="comment">//findNestedDependencies: true,                 //- 解析嵌套中的require</span></span><br><span class="line">            paths:&#123;</span><br><span class="line">                <span class="string">"PDAppDir"</span>:<span class="string">""</span>,                              <span class="comment">//- 所有文件的路径都相对于main-build.js，所以这里为空即可</span></span><br><span class="line">                <span class="string">"jquery"</span>:<span class="string">"empty:"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(rename(<span class="string">"main.min.js"</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'app'</span>));                            <span class="comment">//- 映射文件输出目录</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>说明：  </p><ol><li>运行<code>gulp optimize</code>即可把<code>main-build.js</code>所依赖的文件合并到<code>main.min.js</code>中。</li><li>在代码中有一个<code>findNestedDependencies</code>参数，意思是代码中如果是使用<code>require</code>方式而不是<code>define</code>方式依赖文件，默认不解析</li><li><code>:empty</code>代表忽略该文件</li><li>reqOptimize的详细参数见requirejs的<a href="https://github.com/requirejs/r.js/blob/master/build/example.build.js" target="_blank" rel="noopener">官方文档</a></li></ol><h2 id="文件md5"><a href="#文件md5" class="headerlink" title="文件md5"></a>文件md5</h2><p>运行：<code>npm install gulp-rev --save-dev</code></p><h3 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h3><p>文件MD5代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">"md5"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">"app/main-build.js"</span>)</span><br><span class="line">        .pipe(reqOptimize(&#123;</span><br><span class="line">            optimize:<span class="string">"none"</span>,                                <span class="comment">//- none为不压缩资源</span></span><br><span class="line">            <span class="comment">//findNestedDependencies: true,                 //- 解析嵌套中的require</span></span><br><span class="line">            paths:&#123;</span><br><span class="line">                <span class="string">"PDAppDir"</span>:<span class="string">""</span>,                              <span class="comment">//- 所有文件的路径都相对于main-build.js，所以这里为空即可</span></span><br><span class="line">                <span class="string">"jquery"</span>:<span class="string">"empty:"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(rev())                                        <span class="comment">//- 文件名加MD5后缀</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">"app"</span>))                             <span class="comment">//- 生成MD5后的文件</span></span><br><span class="line">        .pipe(rev.manifest(&#123;<span class="attr">merge</span>:<span class="literal">true</span>&#125;))                   <span class="comment">//- 生成一个rev-manifest.json</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">''</span>))                                <span class="comment">//- 映射文件输出目录</span></span><br><span class="line">        .on(<span class="string">'end'</span>, cb);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>运行<code>gulp md5</code>，此时就会生成类似于这样的文件<code>main-min-c144065c18.js</code>。现在问题就来了，文件名变了，就需要动态替换首页上的引用文件名。</p><h3 id="路径替换"><a href="#路径替换" class="headerlink" title="路径替换"></a>路径替换</h3><p>运行：<code>mpn install gulp-rev-collector --save-dev</code>、<code>npm install through2 --save-dev</code><br>代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">modify</span>(<span class="params">modifier</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> through2.obj(<span class="function"><span class="keyword">function</span>(<span class="params">file, encoding, done</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> content = modifier(<span class="built_in">String</span>(file.contents));</span><br><span class="line">        file.contents = <span class="keyword">new</span> Buffer(content);</span><br><span class="line">        <span class="keyword">this</span>.push(file);</span><br><span class="line">        done();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceSuffix</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> data.replace(<span class="regexp">/\.js/gmi</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//去掉.js后缀，因为requirejs的引用一般都不带后缀</span></span><br><span class="line">gulp.task(<span class="string">"replaceSuffix"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    gulp.src([<span class="string">'rev-manifest.json'</span>])</span><br><span class="line">        .pipe(modify(replaceSuffix))            <span class="comment">//- 去掉.js后缀</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">''</span>))</span><br><span class="line">        .on(<span class="string">'end'</span>, cb);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"replaceHomePath"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    gulp.src([<span class="string">'rev-manifest.json'</span>, <span class="string">'index-build.html'</span>])</span><br><span class="line">        .pipe(revCollector())                   <span class="comment">//- 替换为MD5后的文件名</span></span><br><span class="line">        .pipe(rename(<span class="string">"index.html"</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">''</span>))</span><br><span class="line">        .on(<span class="string">'end'</span>, cb);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>依次运行<code>gulp replaceSuffix</code>、<code>gulp replaceHomePath</code>即可生成可运行的首页。相对于原始首页，依赖的文件路径为md5后的路径。</p><h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><p>从上面可以看到，这一套下来需要运行一系列的task，而且这些task的运行还有先后顺序。下面尝试使用一个task来完成整个任务。由于gulp的task都是异步运行的，所以需要使用到<code>run-sequence</code><br>安装<code>npm install gulp-clean --save-dev</code>、<code>npm install run-sequence --save-dev</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除掉上一次构建时创建的资源</span></span><br><span class="line">gulp.task(<span class="string">"clean"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([</span><br><span class="line">        <span class="string">'rev-manifest.json'</span>,</span><br><span class="line">        <span class="string">'**/*-build-*.js'</span>,</span><br><span class="line">        <span class="string">'index.html'</span></span><br><span class="line">    ]).pipe(clean());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建总入口</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    runSequence(</span><br><span class="line">        <span class="string">"clean"</span>,                <span class="comment">//- 上一次构建的结果清空</span></span><br><span class="line">        <span class="string">"md5"</span>,                  <span class="comment">//- 文件合并与md5</span></span><br><span class="line">        <span class="string">"replaceSuffix"</span>,        <span class="comment">//- 替换.js后缀</span></span><br><span class="line">        <span class="string">"replaceHomePath"</span>,      <span class="comment">//- 首页路径替换为md5后的路径</span></span><br><span class="line">        callback);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>说明:  </p><ol><li>可以看到上面的task中最后都有一句<code>.on(&#39;end&#39;, cb)</code>这个是为了解决task任务异步运行的问题</li><li>此时，只需要运行<code>gulp</code>即可完成所有的构建任务。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;项目目录结构&quot;&gt;&lt;a href=&quot;#项目目录结构&quot; class=&quot;headerlink&quot; title=&quot;项目目录结构&quot;&gt;&lt;/a&gt;项目目录结构&lt;/h2&gt;&lt;img src=&quot;/2016/12/11/Gulp合并requirejs并MD5文件/目录结构.jpg&quot; tit
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://muchstudy.com/categories/FrontEnd/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式系列之六命令模式</title>
    <link href="http://muchstudy.com/2016/12/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%85%AD%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://muchstudy.com/2016/12/10/设计模式系列之六命令模式/</id>
    <published>2016-12-10T02:50:54.000Z</published>
    <updated>2016-12-14T14:36:26.509Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>命令模式：</strong>将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也可支持可撤销的操作。</p></blockquote><p>&emsp;&emsp;有一个这样的业务逻辑，在客厅的进门处有一个开关面板，该面板上有两个开关，第一个开关是打开客厅的灯，第二个开关是打开客厅的电视。下面就来具体实现一下。  </p><p>首先实现电视与灯:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line">String location = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Light</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.location = location;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打开"</span>+location+<span class="string">"的灯"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"关闭"</span>+location+<span class="string">"的灯"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Television</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"打开电视"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"关闭电视"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="硬编码的方式实现开关面板功能"><a href="#硬编码的方式实现开关面板功能" class="headerlink" title="硬编码的方式实现开关面板功能"></a>硬编码的方式实现开关面板功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开关控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchControlOld</span> </span>&#123;</span><br><span class="line">Light light = <span class="keyword">new</span> Light(<span class="string">"客厅"</span>);</span><br><span class="line">Television television = <span class="keyword">new</span> Television();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonWasPressed</span><span class="params">(<span class="keyword">int</span> solt)</span> </span>&#123;</span><br><span class="line"><span class="comment">//打开第一个开关</span></span><br><span class="line"><span class="keyword">if</span>(solt==<span class="number">0</span>)&#123;</span><br><span class="line">light.on();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(solt==<span class="number">1</span>)&#123;</span><br><span class="line">television.open();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offButtonWasPressed</span><span class="params">(<span class="keyword">int</span> solt)</span> </span>&#123;</span><br><span class="line"><span class="comment">//关闭第一个开关</span></span><br><span class="line"><span class="keyword">if</span>(solt==<span class="number">0</span>)&#123;</span><br><span class="line">light.off();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(solt==<span class="number">1</span>)&#123;</span><br><span class="line">television.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从上面可以看到，实现得十分的不友好，如果开关面板上再加个开关按钮就必须得再加一组判断。而且，开关控制面板跟具体的电器开关逻辑强耦合。</p><h3 id="使用命令模式重新实现该逻辑"><a href="#使用命令模式重新实现该逻辑" class="headerlink" title="使用命令模式重新实现该逻辑"></a>使用命令模式重新实现该逻辑</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以理解为这里为转接口的定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="comment">//运行</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//回退</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开灯命令</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">Light light;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(Light light)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.light = light;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">light.on();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">light.off();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关灯命令</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">Light light;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LightOffCommand</span><span class="params">(Light light)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.light = light;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">light.off();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">light.on();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打开电视</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TelevisionOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">Television television;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TelevisionOnCommand</span><span class="params">(Television television)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.television = television;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">television.open();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">television.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭电视</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TelevisionOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">Television television;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TelevisionOffCommand</span><span class="params">(Television television)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.television = television;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">television.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">television.open();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用命令模式实现的开关控制器"><a href="#使用命令模式实现的开关控制器" class="headerlink" title="使用命令模式实现的开关控制器"></a>使用命令模式实现的开关控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开关控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchControl</span> </span>&#123;</span><br><span class="line">Command[] onCommands = <span class="keyword">new</span> Command[<span class="number">2</span>];</span><br><span class="line">Command[] offCommands = <span class="keyword">new</span> Command[<span class="number">2</span>];</span><br><span class="line"><span class="comment">//把开关与具体要干的事情关联起来</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(<span class="keyword">int</span> solt,Command onCommand,Command offCommand)</span> </span>&#123;</span><br><span class="line">onCommands[solt] = onCommand;</span><br><span class="line">offCommands[solt] = offCommand;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按下开关</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonWasPressed</span><span class="params">(<span class="keyword">int</span> solt)</span> </span>&#123;</span><br><span class="line">onCommands[solt].execute();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//回退</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offButtonWasPressed</span><span class="params">(<span class="keyword">int</span> solt)</span> </span>&#123;</span><br><span class="line">onCommands[solt].undo();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//有两个开关的开关控制器</span></span><br><span class="line">SwitchControl control = <span class="keyword">new</span> SwitchControl();</span><br><span class="line"><span class="comment">//把电灯逻辑绑定到第一个开关上</span></span><br><span class="line">Light light = <span class="keyword">new</span> Light(<span class="string">"客厅"</span>);</span><br><span class="line">control.setCommand(<span class="number">0</span>,<span class="keyword">new</span> LightOnCommand(light),<span class="keyword">new</span> LightOffCommand(light));</span><br><span class="line">control.onButtonWasPressed(<span class="number">0</span>);<span class="comment">//- 打印：打开客厅的灯</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把电视逻辑绑定到第二个开关上</span></span><br><span class="line">Television television = <span class="keyword">new</span> Television();</span><br><span class="line">control.setCommand(<span class="number">1</span>,<span class="keyword">new</span> TelevisionOnCommand(television),<span class="keyword">new</span> TelevisionOffCommand(television));</span><br><span class="line">control.onButtonWasPressed(<span class="number">1</span>);<span class="comment">//- 打印：打开电视</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从上面的代码中可以看到，对于开关控制面板来讲，它只需要按下开关并执行命令的<code>execute</code>方法，不需要知道每个电器的具体实现。  </p><p>&emsp;&emsp;通过使用命令模式对代码的改造，让开关控制器跟具体电器的开/关彻底的解耦。如果想要在控制器上增加新的按钮，可以很方便的增加上去。使得代码更加清晰，易于扩展与维护。</p><p>&emsp;&emsp;从命令模式的特性中可以看出，如果此时的需求变为按下一个开关需要同时打开灯与电视，那么只需要一个<code>command数组</code>即可。把<code>LightOnCommand</code>和<code>TelevisionOnCommand</code>放入其中，遍历调用<code>execute</code>。</p><p>&emsp;&emsp;另外，在队列请求中大量的用到了命令模式。一个个的请求依次而来，接收端不需要知道每个请求的具体逻辑，只需要依次调用请求的<code>execute</code>方法即可完成请求的处理。  </p><p>上一篇：<a href="http://muchstudy.com/2016/12/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%94%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/">设计模式系列之五工厂模式</a><br>下一篇：<a href="http://muchstudy.com/2016/12/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%83%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/">设计模式系列之七适配器模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;命令模式：&lt;/strong&gt;将“请求”封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也可支持可撤销的操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;有一个这样的业务逻辑，在客厅的进门
      
    
    </summary>
    
      <category term="设计模式" scheme="http://muchstudy.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式系列之五工厂模式</title>
    <link href="http://muchstudy.com/2016/12/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%94%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://muchstudy.com/2016/12/06/设计模式系列之五工厂模式/</id>
    <published>2016-12-06T15:14:42.000Z</published>
    <updated>2016-12-10T15:24:17.245Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>&emsp;&emsp;简单工厂应该是最简单的工厂方法了，也是最常见的。下面，通过代码就知道为什么这么说了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimplePizzaFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (type.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"pepperoni"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> PepperoniPizza();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"clam"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> ClamPizza();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equals(<span class="string">"veggie"</span>)) &#123;</span><br><span class="line">pizza = <span class="keyword">new</span> VeggiePizza();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">SimplePizzaFactory factory;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PizzaStore</span><span class="params">(SimplePizzaFactory factory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.factory = factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">Pizza pizza;</span><br><span class="line"><span class="comment">//通过简单工厂创建不同类型的披萨</span></span><br><span class="line">pizza = factory.createPizza(type);</span><br><span class="line"></span><br><span class="line">pizza.prepare();</span><br><span class="line">pizza.bake();</span><br><span class="line">pizza.cut();</span><br><span class="line">pizza.box();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过简单工厂方法，有效的把<code>new Object()</code>解耦了出来。在实际的业务中，不用再去关心如何去创建对象。特别是对象的创建与初始化很复杂，且有很多地方都需要用到该对象时，就不用每个地方都去显示的new一下，要修改初始化条件时，也只需要修改工厂方法即可。</p><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>定义：</p><blockquote><p><strong>工厂方法模式：</strong>定义了一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体如何创建披萨交由子类去实现（注意对比这里跟简单工厂的区别）</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String item)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Pizza <span class="title">orderPizza</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">Pizza pizza = createPizza(type);</span><br><span class="line">System.out.println(<span class="string">"--- Making a "</span> + pizza.getName() + <span class="string">" ---"</span>);</span><br><span class="line">pizza.prepare();</span><br><span class="line">pizza.bake();</span><br><span class="line">pizza.cut();</span><br><span class="line">pizza.box();</span><br><span class="line"><span class="keyword">return</span> pizza;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//纽约风格的披萨</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NYPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Pizza <span class="title">createPizza</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (item.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> NYStyleCheesePizza();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">"veggie"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> NYStyleVeggiePizza();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">"clam"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> NYStyleClamPizza();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">"pepperoni"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> NYStylePepperoniPizza();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//芝加哥风格的披萨</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChicagoPizzaStore</span> <span class="keyword">extends</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">Pizza <span class="title">createPizza</span><span class="params">(String item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (item.equals(<span class="string">"cheese"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ChicagoStyleCheesePizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">"veggie"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ChicagoStyleVeggiePizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">"clam"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ChicagoStyleClamPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.equals(<span class="string">"pepperoni"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ChicagoStylePepperoniPizza();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>&emsp;&emsp;在所有的工厂模式中，还有一种叫抽象工厂模式。不过一直无法理解抽象工厂模式的具体使用场景，所以这部分留着今后对抽象工厂模式理解深刻了再来总结吧。</p><h2 id="Javascript实现"><a href="#Javascript实现" class="headerlink" title="Javascript实现"></a>Javascript实现</h2><h3 id="简单工厂-1"><a href="#简单工厂-1" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>&emsp;&emsp;举一个如下的业务场景：需要开发一个表单生成器，需要做到表单元素的自动生成。那么，可以采用简单工厂来创建表单元素对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">SampleFormFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    SampleFormFactory.fn = SampleFormFactory.prototype;</span><br><span class="line">    SampleFormFactory.fn.getFormElement = <span class="function"><span class="keyword">function</span> (<span class="params">type</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Input"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Input();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Select"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Select();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Textarea"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Textarea();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Radio"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Radio();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"Checkbox"</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Checkbox();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*****************标准表单对象*****************/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Input</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Select</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Textarea</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Radio</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Checkbox</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用简单工厂创建表单元素</span></span><br><span class="line">    <span class="keyword">var</span> factory = <span class="keyword">new</span> SampleFormFactory();</span><br><span class="line">    <span class="keyword">var</span> element = factory.getFormElement(<span class="string">"Input"</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;至于在javascript中工厂方法模式的使用，一时想不到使用场景，感觉有点为了用设计模式而设计模式，所以这里就不再举例了。  </p><p>上一篇：<a href="http://muchstudy.com/2016/12/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%9B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/">设计模式系列之四装饰者模式</a><br>下一篇：<a href="http://muchstudy.com/2016/12/10/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%85%AD%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/">设计模式系列之六命令模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java实现&quot;&gt;&lt;a href=&quot;#Java实现&quot; class=&quot;headerlink&quot; title=&quot;Java实现&quot;&gt;&lt;/a&gt;Java实现&lt;/h2&gt;&lt;h3 id=&quot;简单工厂&quot;&gt;&lt;a href=&quot;#简单工厂&quot; class=&quot;headerlink&quot; title=&quot;简
      
    
    </summary>
    
      <category term="设计模式" scheme="http://muchstudy.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式系列之四装饰者模式</title>
    <link href="http://muchstudy.com/2016/12/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%9B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://muchstudy.com/2016/12/02/设计模式系列之四装饰者模式/</id>
    <published>2016-12-02T15:31:10.000Z</published>
    <updated>2016-12-08T15:45:25.004Z</updated>
    
    <content type="html"><![CDATA[<p>装饰者模式的定义：</p><blockquote><p><strong>装饰者模式：</strong>动态的将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。</p></blockquote><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><p>&emsp;&emsp;借用《Head First设计模式》 中的咖啡店卖咖啡的样例。便于说明，这里简洁一下。假如我要写一个咖啡点单计价的软件。业务逻辑是这样的，一杯咖啡10元，如果加糖另外加1元，如果加奶另外加两元。实际来讲，采用硬编码的方式我可以写三个类来实现该需求：1.咖啡单买；2.咖啡+糖；3.咖啡+奶。然后就完事儿，任务完成。但是如果哪一天，老板打算卖即加糖又加奶的咖啡的话，就得再增加一个类来实现该类型咖啡的计价。这还好说，假如我有多种类型的咖啡呢？而且每种类型的咖啡都可以加奶或者糖，这样排列组合下去，我估计要写吐血…..</p><p>下面，我们就使用装饰者模式来解决该问题。</p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p> 首先来一个咖啡的抽象类<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbsCoffee</span> </span>&#123;</span><br><span class="line"><span class="comment">//咖啡描述</span></span><br><span class="line">String description = <span class="string">"Unknown Type"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> description;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//咖啡加个</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 接下来两种咖啡的实现<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MochaCoffee</span> <span class="keyword">extends</span> <span class="title">AbsCoffee</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MochaCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">description = <span class="string">"摩卡咖啡"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//摩卡咖啡10元一杯</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LatteCoffee</span> <span class="keyword">extends</span> <span class="title">AbsCoffee</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LatteCoffee</span><span class="params">()</span> </span>&#123;</span><br><span class="line">description = <span class="string">"拿铁咖啡"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//拿铁咖啡15元一杯</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//装饰器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">AbsCoffee</span> </span>&#123;</span><br><span class="line"><span class="comment">//强制装饰者增加自己的描述信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>两个装饰类，这里分别为咖啡的调调：糖、牛奶<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sugar</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">AbsCoffee coffee;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sugar</span><span class="params">(AbsCoffee coffee)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.coffee = coffee;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> coffee.getDescription()+<span class="string">"+糖"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> coffee.cost()+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">AbsCoffee coffee;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(AbsCoffee coffee)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.coffee = coffee;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> coffee.getDescription()+<span class="string">"+牛奶"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> coffee.cost()+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">//摩卡咖啡</span></span><br><span class="line">AbsCoffee coffee = <span class="keyword">new</span> MochaCoffee();</span><br><span class="line"><span class="comment">//打印：摩卡咖啡=10.0</span></span><br><span class="line">System.out.println(coffee.getDescription()+<span class="string">"="</span>+coffee.cost());</span><br><span class="line"><span class="comment">//摩卡+糖+牛奶</span></span><br><span class="line">coffee = <span class="keyword">new</span> Milk(<span class="keyword">new</span> Sugar(coffee));</span><br><span class="line"><span class="comment">//打印：摩卡咖啡+糖+牛奶=13.0</span></span><br><span class="line">System.out.println(coffee.getDescription()+<span class="string">"="</span>+coffee.cost());</span><br><span class="line"><span class="comment">/*同理，可以把不同类型的咖啡与不同类型的调料任意组合，解决了硬编码时一种组合就需要对应写一套逻辑的尴尬*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="java-io中的装饰者模式"><a href="#java-io中的装饰者模式" class="headerlink" title="java.io中的装饰者模式"></a>java.io中的装饰者模式</h3><p>这里的代码样例来自与《Head First设计模式》一书，演示了<code>FileInputStream</code>中装饰者模式的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现字符的大小写转换</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowerCaseInputStream</span> <span class="keyword">extends</span> <span class="title">FilterInputStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LowerCaseInputStream</span><span class="params">(InputStream in)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(in);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">int</span> c = in.read();</span><br><span class="line"><span class="keyword">return</span> (c == -<span class="number">1</span> ? c : Character.toLowerCase((<span class="keyword">char</span>)c));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> offset, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = in.read(b, offset, len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = offset; i &lt; offset+result; i++) &#123;</span><br><span class="line">b[i] = (<span class="keyword">byte</span>)Character.toLowerCase((<span class="keyword">char</span>)b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//层层装饰，最终输入大写字符</span></span><br><span class="line">InputStream in =</span><br><span class="line"><span class="keyword">new</span> LowerCaseInputStream(</span><br><span class="line"><span class="keyword">new</span> BufferedInputStream(</span><br><span class="line"><span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>((c = in.read()) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">System.out.print((<span class="keyword">char</span>)c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">in.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Javascript实现"><a href="#Javascript实现" class="headerlink" title="Javascript实现"></a>Javascript实现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MochaCoffee</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.description = <span class="string">"摩卡咖啡"</span></span><br><span class="line">    &#125;</span><br><span class="line">    MochaCoffee.prototype.cost = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    MochaCoffee.prototype.getDescription = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.description;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调料：糖</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Sugar</span>(<span class="params">coffee</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.coffee         = coffee;</span><br><span class="line">        <span class="keyword">this</span>.description    = <span class="string">"糖"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Sugar.prototype.cost = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.coffee.cost()+<span class="number">1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    Sugar.prototype.getDescription = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.coffee.getDescription()+<span class="string">"+"</span>+<span class="keyword">this</span>.description</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//调料：牛奶</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Milk</span>(<span class="params">coffee</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.coffee         = coffee;</span><br><span class="line">        <span class="keyword">this</span>.description    = <span class="string">"牛奶"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Milk.prototype.cost = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.coffee.cost()+<span class="number">2</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    Milk.prototype.getDescription = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.coffee.getDescription()+<span class="string">"+"</span>+<span class="keyword">this</span>.description</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*************************测试代码*************************/</span></span><br><span class="line">    <span class="keyword">var</span> coffee  = <span class="keyword">new</span> MochaCoffee();</span><br><span class="line">    <span class="comment">//这里将打印：摩卡咖啡=10</span></span><br><span class="line">    <span class="built_in">console</span>.log(coffee.getDescription()+<span class="string">"="</span>+coffee.cost());</span><br><span class="line">    coffee      = <span class="keyword">new</span> Milk(<span class="keyword">new</span> Sugar(coffee));</span><br><span class="line">    <span class="comment">//这里将打印：摩卡咖啡+糖+牛奶=13</span></span><br><span class="line">    <span class="built_in">console</span>.log(coffee.getDescription()+<span class="string">"="</span>+coffee.cost());</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>上一篇：<a href="http://muchstudy.com/2016/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%89%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/">设计模式系列之三观察者模式</a><br>下一篇：<a href="http://muchstudy.com/2016/12/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%94%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/">设计模式系列之五工厂模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;装饰者模式的定义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;装饰者模式：&lt;/strong&gt;动态的将责任附加到对象上。若要扩展功能，装饰者提供了比继承更有弹性的替代方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Java实现&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="设计模式" scheme="http://muchstudy.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式系列之三观察者模式</title>
    <link href="http://muchstudy.com/2016/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%89%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://muchstudy.com/2016/11/29/设计模式系列之三观察者模式/</id>
    <published>2016-11-29T13:01:37.000Z</published>
    <updated>2016-12-05T15:18:22.480Z</updated>
    
    <content type="html"><![CDATA[<p>先来看看观察者模式的定义</p><blockquote><p><strong>观察者模式：</strong>定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。</p></blockquote><h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><p>下面以消息中心的需求作为例子。有一个消息中心，当消息中心收到新消息时，动态通知所有的收听者。</p><h3 id="消息中心部分"><a href="#消息中心部分" class="headerlink" title="消息中心部分"></a>消息中心部分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"><span class="comment">//- 注册收听者</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line"><span class="comment">//- 移除收听者</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span></span>;</span><br><span class="line"><span class="comment">//- 通知收听者</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageCenter</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;Observer&gt; observers;</span><br><span class="line"><span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MessageCenter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//- 保存所有的收听者</span></span><br><span class="line">observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line">observers.add(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer o)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = observers.indexOf(o);</span><br><span class="line"><span class="keyword">if</span> (i &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">observers.remove(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通知所有人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">observer.printMessage(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 收到新消息触发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">newMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">notifyObservers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模拟收到消息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.message = message;</span><br><span class="line">newMessage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="收听者部分"><a href="#收听者部分" class="headerlink" title="收听者部分"></a>收听者部分</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserOne</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Subject messageCenter;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserOne</span><span class="params">(Subject messageCenter)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.messageCenter = messageCenter;</span><br><span class="line"><span class="keyword">this</span>.messageCenter.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"UserOne:"</span>+message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTwo</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Subject messageCenter;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserTwo</span><span class="params">(Subject messageCenter)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.messageCenter = messageCenter;</span><br><span class="line"><span class="keyword">this</span>.messageCenter.registerObserver(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"UserTwo:"</span>+message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MessageCenter messageCenter = <span class="keyword">new</span> MessageCenter();</span><br><span class="line">UserOne one = <span class="keyword">new</span> UserOne(messageCenter);</span><br><span class="line">UserTwo two = <span class="keyword">new</span> UserTwo(messageCenter);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里One和Two都能收到消息</span></span><br><span class="line">messageCenter.setMessage(<span class="string">"First Message!"</span>);</span><br><span class="line"><span class="comment">//移除用户One</span></span><br><span class="line">messageCenter.removeObserver(one);</span><br><span class="line"><span class="comment">//这里就只有UserTwo能收到消息了</span></span><br><span class="line">messageCenter.setMessage(<span class="string">"Second Message!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h2><p>在javascript中，最常见的例子就是jquery中的自定义事件,当事件触发时，会通知所有的事件收听者。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"ButtonID"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../jquery/jquery-2.1.3.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> $btn = $(<span class="string">"#ButtonID"</span>);</span></span><br><span class="line"><span class="javascript">    $btn.bind(<span class="string">"CustomEvent"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">event,param</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"我是收听者One"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(param);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    $btn.bind(<span class="string">"CustomEvent"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">event,param</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"我是收听者Two"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(param);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="comment">//执行此段代码，触发事件。在控制台上可以看到One和Two同时被打印出来了</span></span></span><br><span class="line"><span class="javascript">    $btn.trigger(<span class="string">"CustomEvent"</span>,<span class="string">"给收听者的通知"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MessageCenter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers  = &#123;&#125;;</span><br><span class="line">        <span class="keyword">this</span>.newMessage = <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    MessageCenter.fn = MessageCenter.prototype;</span><br><span class="line">    <span class="comment">//注册收听者</span></span><br><span class="line">    MessageCenter.fn.registerObserver = <span class="function"><span class="keyword">function</span> (<span class="params">id,observer</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers[id] = observer;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//移除收听者</span></span><br><span class="line">    MessageCenter.fn.removeObserver = <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> <span class="keyword">this</span>.observers[id];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//通知所有收听者</span></span><br><span class="line">    MessageCenter.fn.notifyObservers = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> <span class="keyword">this</span>.observers)&#123;</span><br><span class="line">            <span class="keyword">this</span>.observers[key].apply(<span class="keyword">this</span>,[<span class="keyword">this</span>.newMessage]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//模拟收到新消息</span></span><br><span class="line">    MessageCenter.fn.setMessage = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.newMessage = msg;</span><br><span class="line">        <span class="keyword">this</span>.notifyObservers();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收听者UserOne</span></span><br><span class="line"><span class="comment">     * @param subject</span></span><br><span class="line"><span class="comment">     * @constructor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">UserOne</span>(<span class="params">subject</span>) </span>&#123;</span><br><span class="line">        subject.registerObserver(<span class="string">"UserOne"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"我是UserOne，我收到的消息是:"</span>+msg);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收听者UserTwo</span></span><br><span class="line"><span class="comment">     * @param subject</span></span><br><span class="line"><span class="comment">     * @constructor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">UserTwo</span>(<span class="params">subject</span>) </span>&#123;</span><br><span class="line">        subject.registerObserver(<span class="string">"UserTwo"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"我是UserTwo，我收到的消息是:"</span>+msg);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试代码</span></span><br><span class="line">    <span class="keyword">var</span> msgCenter = <span class="keyword">new</span> MessageCenter();</span><br><span class="line">    <span class="keyword">new</span> UserOne(msgCenter);</span><br><span class="line">    <span class="keyword">new</span> UserTwo(msgCenter);</span><br><span class="line">    <span class="comment">//这里One和Two都能收到消息</span></span><br><span class="line">    msgCenter.setMessage(<span class="string">"First Message!"</span>);</span><br><span class="line">    <span class="comment">//移除UserOne</span></span><br><span class="line">    msgCenter.removeObserver(<span class="string">"UserOne"</span>);</span><br><span class="line">    <span class="comment">//这里就只有UserTwo能收到消息了</span></span><br><span class="line">    msgCenter.setMessage(<span class="string">"Second Message!"</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>上一篇：<a href="http://muchstudy.com/2016/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%8C%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/">设计模式系列之二策略模式</a><br>下一篇：<a href="http://muchstudy.com/2016/12/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%9B%9B%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/">设计模式系列之四装饰者模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先来看看观察者模式的定义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;观察者模式：&lt;/strong&gt;定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Java实
      
    
    </summary>
    
      <category term="设计模式" scheme="http://muchstudy.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式系列之二策略模式</title>
    <link href="http://muchstudy.com/2016/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%8C%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://muchstudy.com/2016/11/28/设计模式系列之二策略模式/</id>
    <published>2016-11-28T15:50:40.000Z</published>
    <updated>2016-12-01T07:06:16.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><p> 有如下需求，明天周一，需要去公司上班，目前从家里到公司有两种策略，一种是公交，一种是地铁。下面就来实现一下  </p><h3 id="定义具体策略"><a href="#定义具体策略" class="headerlink" title="定义具体策略"></a>定义具体策略</h3> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IStrategy</span> </span>&#123;</span><br><span class="line"><span class="comment">//对策略的描述</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">description</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bus</span> <span class="keyword">implements</span> <span class="title">IStrategy</span></span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">description</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"乘公交去上班"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subway</span> <span class="keyword">implements</span> <span class="title">IStrategy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">description</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"乘地铁去上班"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最简单的策略调用"><a href="#最简单的策略调用" class="headerlink" title="最简单的策略调用"></a>最简单的策略调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoToWork</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myStrategy</span><span class="params">(String strategy)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"bus"</span>.equals(strategy))&#123;</span><br><span class="line"><span class="keyword">new</span> Bus().description();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"subway"</span>.endsWith(strategy))&#123;</span><br><span class="line"><span class="keyword">new</span> Subway().description();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">GoToWork gotowork = <span class="keyword">new</span> GoToWork();</span><br><span class="line">gotowork.myStrategy(<span class="string">"bus"</span>);</span><br><span class="line">gotowork.myStrategy(<span class="string">"subway"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>从上面的代码中可以看出，通过<code>if else</code>的使用实现了简单的策略模式。但是，假如有一天我买车了，可以自己开车去上班了。这个时候就需要对<code>GoToWork</code>类做修改，需要再加一个<code>else if</code>判断来实现需求。这样就造成了代码的紧耦合。那么，有没有办法解耦，不但能让我开车，甚至开飞机上班都不用修改<code>GoToWork</code>类呢？</p></blockquote><h3 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoToWork</span> </span>&#123;</span><br><span class="line"><span class="comment">//保存策略的引用</span></span><br><span class="line"><span class="keyword">private</span> IStrategy strategy;</span><br><span class="line"><span class="comment">//可动态设置策略</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(IStrategy strategy)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myStrategy</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//这里实现了对策略的动态调用</span></span><br><span class="line"><span class="keyword">this</span>.strategy.description();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">GoToWork work = <span class="keyword">new</span> GoToWork();</span><br><span class="line"><span class="comment">//乘公交上班</span></span><br><span class="line">work.setStrategy(<span class="keyword">new</span> Bus());</span><br><span class="line">work.myStrategy();</span><br><span class="line"><span class="comment">//乘地铁上班</span></span><br><span class="line">work.setStrategy(<span class="keyword">new</span> Subway());</span><br><span class="line">work.myStrategy();</span><br><span class="line">    <span class="comment">//开车上班</span></span><br><span class="line">    <span class="comment">//work.setStrategy(new Car());</span></span><br><span class="line">    <span class="comment">//work.myStrategy();</span></span><br><span class="line">    <span class="comment">/*.....还可增加任意策略.....*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，对<code>GoToWork</code>类做完改造后，即满足了我们的需求。</p></blockquote><h2 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h2><p> 之前写表格组件，有一个表格行可编辑的需求。开发人员在使用表格组件时可选择单元格的编辑类型：文本框、下拉框、单选按钮等。并且，为了灵活性，还需要能够让开发人员自定义类型，比如在表格的单元格中日期选择、弹出框选择等。针对该需求，策略模式派上了用场。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">W</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> singleton  = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Grid</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = &#123;</span><br><span class="line">            pagination:<span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">        init(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//表格初始化</span></span><br><span class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span> (<span class="params">G</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $table = $(<span class="string">"&lt;table&gt;&lt;/table&gt;"</span>);</span><br><span class="line">        G.$Container = $(<span class="string">"#"</span>+<span class="keyword">this</span>.placeAt).empty().append($table);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//设置表格配置</span></span><br><span class="line">    Grid.prototype.setConfig = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = $.extend(<span class="keyword">this</span>.config,config);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//添加行</span></span><br><span class="line">    Grid.prototype.addRow = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $tr = $(<span class="string">"&lt;tr&gt;&lt;/tr&gt;"</span>);</span><br><span class="line">        <span class="keyword">var</span> len = <span class="keyword">this</span>.config.layout.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> $td = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>);</span><br><span class="line">            <span class="keyword">new</span> Cell($td,<span class="keyword">this</span>.config.layout[i]);</span><br><span class="line">            $tr.append($td);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.$Container.append($tr);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//删除行</span></span><br><span class="line">    Grid.prototype.deleteRow = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//单例模式使用</span></span><br><span class="line">    W.Grid.getInstance = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton===<span class="literal">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Grid();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单元格对象</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span>  <span class="title">Cell</span>(<span class="params">$container,config</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$Container = $container;</span><br><span class="line">        <span class="keyword">this</span>.config     = config;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line">    Cell.fn = Cell.prototype;</span><br><span class="line"></span><br><span class="line">    Cell.fn.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.config.editor)&#123;</span><br><span class="line">            <span class="keyword">this</span>._editor = <span class="keyword">this</span>.edit();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>._editor = <span class="keyword">this</span>.read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//单元格只读</span></span><br><span class="line">    Cell.fn.read = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//使用默认策略渲染单元格</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Forms[<span class="string">"Span"</span>](<span class="keyword">this</span>.$Container,<span class="string">""</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//单元格自定义与已有表单对象渲染</span></span><br><span class="line">    Cell.fn.edit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> formObj = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> type    = <span class="keyword">this</span>.config.editor.type;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span>(type)==<span class="string">"function"</span>)&#123;</span><br><span class="line">            <span class="comment">//开发人员自定义的策略</span></span><br><span class="line">            formObj = <span class="keyword">new</span> type(<span class="keyword">this</span>.$Container,<span class="string">""</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span>(type)==<span class="string">"string"</span>)&#123;</span><br><span class="line">            <span class="comment">//首字母大写转换</span></span><br><span class="line">            type    =  type.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase() + type.substring(<span class="number">1</span>,type.length);</span><br><span class="line">            <span class="comment">//动态选择已有策略</span></span><br><span class="line">            formObj = <span class="keyword">new</span> Forms[type](<span class="keyword">this</span>.$Container,<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> formObj;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*******************************策略定义*****************************/</span></span><br><span class="line">    <span class="keyword">var</span> Forms = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认 只读</span></span><br><span class="line"><span class="comment">     * @param $container</span></span><br><span class="line"><span class="comment">     * @param value</span></span><br><span class="line"><span class="comment">     * @constructor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Forms.Span = <span class="function"><span class="keyword">function</span>(<span class="params">$container,value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent = $container;</span><br><span class="line">        <span class="keyword">this</span>._value = value;</span><br><span class="line">        <span class="keyword">this</span>.$Dom   = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">this</span>._init();</span><br><span class="line">    &#125;;</span><br><span class="line">    Forms.Span.prototype._init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$Dom   = $(<span class="string">'&lt;span&gt;&lt;/span&gt;'</span>).append(<span class="keyword">this</span>._value);</span><br><span class="line">        <span class="keyword">this</span>.parent.append(<span class="keyword">this</span>.$Dom);</span><br><span class="line">    &#125;;</span><br><span class="line">    Forms.Span.prototype.setValue = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$Dom.html(value);</span><br><span class="line">    &#125;;</span><br><span class="line">    Forms.Span.prototype.getValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._value;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文本框</span></span><br><span class="line"><span class="comment">     * @param $container</span></span><br><span class="line"><span class="comment">     * @param value</span></span><br><span class="line"><span class="comment">     * @constructor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Forms.Text = <span class="function"><span class="keyword">function</span>(<span class="params">$container,value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parent     = $container;</span><br><span class="line">        <span class="keyword">this</span>._value     = value;</span><br><span class="line">        <span class="keyword">this</span>.$Dom       = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>._init();</span><br><span class="line">    &#125;;</span><br><span class="line">    Forms.Text.prototype._init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$Dom   = $(<span class="string">'&lt;input type="text" style="width:100%"&gt;'</span>);</span><br><span class="line">        <span class="keyword">this</span>.parent.append(<span class="keyword">this</span>.$Dom);</span><br><span class="line">        <span class="keyword">this</span>.setValue(<span class="keyword">this</span>._value);</span><br><span class="line">    &#125;;</span><br><span class="line">    Forms.Text.prototype.setValue = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.$Dom.val(value);</span><br><span class="line">    &#125;;</span><br><span class="line">    Forms.Text.prototype.getValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.$Dom.val();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">/*自定义对象只需要同样实现set和get方法即可*/</span></span><br><span class="line"></span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用策略模式动态渲染表格行中的单元格</span></span><br><span class="line"><span class="keyword">var</span> grid = Grid.getInstance();</span><br><span class="line">grid.setConfig(&#123;</span><br><span class="line">    placeAt:<span class="string">"GridContainer"</span>,</span><br><span class="line">    layout:[</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"姓名"</span>,<span class="attr">field</span>:<span class="string">"Name"</span>,<span class="attr">sort</span>:<span class="literal">true</span>,<span class="attr">locked</span>:<span class="literal">true</span>,<span class="attr">editor</span>:&#123;<span class="attr">type</span>:<span class="string">"Text"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"性别"</span>,<span class="attr">field</span>:<span class="string">"Sex"</span>,<span class="attr">sort</span>:<span class="literal">true</span>,<span class="attr">editor</span>:&#123;<span class="attr">type</span>:<span class="string">"radio"</span>,<span class="attr">options</span>:[&#123;<span class="attr">name</span>:<span class="string">"男"</span>,<span class="attr">value</span>:<span class="string">"1"</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">"女"</span>,<span class="attr">value</span>:<span class="string">"0"</span>&#125;]&#125;&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"电话"</span>,<span class="attr">field</span>:<span class="string">"Phone"</span>,<span class="attr">editor</span>:&#123;<span class="attr">type</span>:<span class="string">"Text"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"邮件"</span>,<span class="attr">field</span>:<span class="string">"Email"</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">name</span>:<span class="string">"地址"</span>,<span class="attr">field</span>:<span class="string">"Address"</span>,<span class="attr">format</span>:<span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;&#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line">grid.addRow();</span><br></pre></td></tr></table></figure><p>上一篇：<a href="http://muchstudy.com/2016/11/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%80%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">设计模式系列之一单例模式</a><br>下一篇：<a href="http://muchstudy.com/2016/11/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%89%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/">设计模式系列之三观察者模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java实现&quot;&gt;&lt;a href=&quot;#Java实现&quot; class=&quot;headerlink&quot; title=&quot;Java实现&quot;&gt;&lt;/a&gt;Java实现&lt;/h2&gt;&lt;p&gt; 有如下需求，明天周一，需要去公司上班，目前从家里到公司有两种策略，一种是公交，一种是地铁。下面就来实现一下
      
    
    </summary>
    
      <category term="设计模式" scheme="http://muchstudy.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式系列之一单例模式</title>
    <link href="http://muchstudy.com/2016/11/27/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B8%80%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://muchstudy.com/2016/11/27/设计模式系列之一单例模式/</id>
    <published>2016-11-27T08:16:14.000Z</published>
    <updated>2016-11-28T16:00:39.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h2><h3 id="不考虑线程安全的写法"><a href="#不考虑线程安全的写法" class="headerlink" title="不考虑线程安全的写法"></a>不考虑线程安全的写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> uniqueInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// other useful methods here</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"I'm a classic Singleton!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这种写法的问题在于非线程安全，当两个线程同时进入if判断，且新对象还未创建时，就会产生两个不同的对象。可以通过<code>synchronized</code>来解决此问题</p></blockquote><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line"><span class="comment">// other useful instance variables here</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> uniqueInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// other useful methods here</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"I'm a thread safe Singleton!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此种写法解决了线程安全问题，但是，由于多线程状态时，需要排队获取单例对象，所以存在性能问题。</p></blockquote><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> uniqueInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// other useful methods here</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"I'm a statically initialized Singleton!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此种方式线程安全且不会出现多线程状态下的性能问题。但是，问题在于即使代码中不会用到该对象，在jvm中也会创建一个，还是不够完美。</p></blockquote><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Danger!  This implementation of Singleton not</span></span><br><span class="line"><span class="comment">// guaranteed to work prior to Java 5</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton uniqueInstance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (uniqueInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">uniqueInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> uniqueInstance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此种方式完美解决了多线程问题且能根据需要动态创建单例对象。唯一缺点为<code>volatile</code>关键字在jdk1.5以上才支持。</p></blockquote><p>两篇介绍<code>volatile</code>关键字的资料：</p><ol><li><a href="http://www.infoq.com/cn/articles/ftf-java-volatile" target="_blank" rel="noopener">http://www.infoq.com/cn/articles/ftf-java-volatile</a></li><li><a href="http://www.ibm.com/developerworks/cn/java/j-jtp06197.html" target="_blank" rel="noopener">http://www.ibm.com/developerworks/cn/java/j-jtp06197.html</a></li></ol><h2 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h2><h3 id="方式一-1"><a href="#方式一-1" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = <span class="string">"YiYing"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> User();</span><br><span class="line">    <span class="keyword">this</span>.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = Singleton.getInstance();</span><br></pre></td></tr></table></figure><blockquote><p>此种方式跟上面Java实现的<code>方式二</code>很像，不管用不用，一上来直接创建一个对象，如果代码中不使用就会使得创建的对象冗余。</p></blockquote><h3 id="方式二-1"><a href="#方式二-1" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(user === <span class="literal">null</span>)&#123;</span><br><span class="line">            user = <span class="keyword">new</span> User();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此种方式实现了动态创建单例对象，相对与上一种更优。</p></blockquote><h3 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h3><p>假如一个表单上只能允许一个表格存在，现在需要提供一个表格组件给开发人员使用。此时，不希望开发人员创建多个表格对象，可以考虑这样实现<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表格组件实现部分</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">W</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> singleton  = <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Grid</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pagination = <span class="literal">true</span>;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    Grid.prototype.addRow = <span class="function"><span class="keyword">function</span> (<span class="params">row</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    Grid.prototype.deleteRow = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    W.Grid.getInstance = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton===<span class="literal">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> Grid();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"><span class="comment">//使用部分</span></span><br><span class="line"><span class="keyword">var</span> grid = Grid.getInstance();</span><br><span class="line">grid.addRow();</span><br></pre></td></tr></table></figure></p><p>下一篇：<a href="http://muchstudy.com/2016/11/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E4%BA%8C%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/">设计模式系列之二策略模式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java实现&quot;&gt;&lt;a href=&quot;#Java实现&quot; class=&quot;headerlink&quot; title=&quot;Java实现&quot;&gt;&lt;/a&gt;Java实现&lt;/h2&gt;&lt;h3 id=&quot;不考虑线程安全的写法&quot;&gt;&lt;a href=&quot;#不考虑线程安全的写法&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="设计模式" scheme="http://muchstudy.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Gulp实践</title>
    <link href="http://muchstudy.com/2016/11/25/Gulp%E5%AE%9E%E8%B7%B5/"/>
    <id>http://muchstudy.com/2016/11/25/Gulp实践/</id>
    <published>2016-11-25T15:25:49.000Z</published>
    <updated>2016-11-27T08:07:15.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="NodeJS安装"><a href="#NodeJS安装" class="headerlink" title="NodeJS安装"></a>NodeJS安装</h3><p>在官方网址下载下载安装包即可：<a href="https://nodejs.org。" target="_blank" rel="noopener">https://nodejs.org。</a><br>windows环境下只需要step by step，完成后在CMD中输入<code>node -v</code> 查看是否安装成功</p><h3 id="npm安装"><a href="#npm安装" class="headerlink" title="npm安装"></a>npm安装</h3><p><a href="https://github.com/nodejs-tw/nodejs-wiki-book/blob/master/zh-tw/node_npm.rst" target="_blank" rel="noopener">https://github.com/nodejs-tw/nodejs-wiki-book/blob/master/zh-tw/node_npm.rst</a></p><h3 id="Gulp安装"><a href="#Gulp安装" class="headerlink" title="Gulp安装"></a>Gulp安装</h3><p>入门指南：<a href="http://www.gulpjs.com.cn/docs/getting-started/" target="_blank" rel="noopener">http://www.gulpjs.com.cn/docs/getting-started/</a></p><h2 id="使用Gulp构建项目"><a href="#使用Gulp构建项目" class="headerlink" title="使用Gulp构建项目"></a>使用Gulp构建项目</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>在目前的项目中使用Gulp来对前端资源进行构建，在过程当中牵涉到如下几点：</p><ul><li>文件删除</li><li>RequireJS文件合并。<a href="https://github.com/requirejs/r.js/blob/master/build/example.build.js" target="_blank" rel="noopener">API</a>，需要过一遍原文，因为很多中文翻译内容翻译得不完全</li><li>文件MD5</li><li>LESS文件编译</li><li>文件内容中的字符替换。去掉requirejs中config.js里的<code>.js</code>后缀</li><li>文件压缩</li><li>文件重命名</li><li>Gulp任务顺序处理，解决task异步执行问题</li></ul><h3 id="代码样例"><a href="#代码样例" class="headerlink" title="代码样例"></a>代码样例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp            = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> rename          = <span class="built_in">require</span>(<span class="string">"gulp-rename"</span>);               <span class="comment">//- 文件重命名</span></span><br><span class="line"><span class="keyword">var</span> concat          = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);               <span class="comment">//- 多个文件合并为一个</span></span><br><span class="line"><span class="keyword">var</span> rev             = <span class="built_in">require</span>(<span class="string">'gulp-rev'</span>);                  <span class="comment">//- 对文件名加MD5后缀</span></span><br><span class="line"><span class="keyword">var</span> revCollector    = <span class="built_in">require</span>(<span class="string">'gulp-rev-collector'</span>);        <span class="comment">//- 路径替换</span></span><br><span class="line"><span class="keyword">var</span> reqOptimize     = <span class="built_in">require</span>(<span class="string">'gulp-requirejs-optimize'</span>);   <span class="comment">//- requireJs文件合并</span></span><br><span class="line"><span class="keyword">var</span> through2        = <span class="built_in">require</span>(<span class="string">'through2'</span>);                  <span class="comment">//- 文件内容操作</span></span><br><span class="line"><span class="keyword">var</span> clean           = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>);                <span class="comment">//- 删除文件</span></span><br><span class="line"><span class="keyword">var</span> runSequence     = <span class="built_in">require</span>(<span class="string">'run-sequence'</span>);              <span class="comment">//- 同步执行任务</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> less            = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>);                 <span class="comment">//- less文件编译</span></span><br><span class="line"><span class="keyword">var</span> minifycss       = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);           <span class="comment">//- css文件压缩</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">modify</span>(<span class="params">modifier</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> through2.obj(<span class="function"><span class="keyword">function</span>(<span class="params">file, encoding, done</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> content = modifier(<span class="built_in">String</span>(file.contents));</span><br><span class="line">        file.contents = <span class="keyword">new</span> Buffer(content);</span><br><span class="line">        <span class="keyword">this</span>.push(file);</span><br><span class="line">        done();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceSuffix</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> data.replace(<span class="regexp">/\.js/gmi</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除掉上一次构建时创建的资源</span></span><br><span class="line">gulp.task(<span class="string">"clean"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> gulp.src([</span><br><span class="line">       <span class="string">'rev-manifest.json'</span>,</span><br><span class="line">       <span class="string">'**/*-build-*.js'</span>,</span><br><span class="line">       <span class="string">'**/*-build-*.css'</span>,</span><br><span class="line">       <span class="string">'static/core/page/login/login.jsp'</span>,</span><br><span class="line">       <span class="string">'static/core/page/home/home.jsp'</span>,</span><br><span class="line">       <span class="string">'static/core/page/home/subHome.jsp'</span></span><br><span class="line">    ]).pipe(clean());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首页框架相关资源构建</span></span><br><span class="line"><span class="comment"> * 合并了如下资源</span></span><br><span class="line"><span class="comment"> * - home-build.js</span></span><br><span class="line"><span class="comment"> * - PDCoreDir/corePath</span></span><br><span class="line"><span class="comment"> * - PDGlobalDir/base</span></span><br><span class="line"><span class="comment"> * - PDHomeDir/js/homeApp</span></span><br><span class="line"><span class="comment"> *   - PDUtilDir/tabs</span></span><br><span class="line"><span class="comment"> *   - PDCoreDir/directive</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">gulp.task(<span class="string">"home-build"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">"static/core/page/home/js/home-build.js"</span>)</span><br><span class="line">        .pipe(reqOptimize(&#123;</span><br><span class="line">            <span class="comment">//optimize:"none",                              //- none为不压缩资源</span></span><br><span class="line">            <span class="comment">//findNestedDependencies: true,                 //- 解析嵌套中的require</span></span><br><span class="line">            paths:&#123;</span><br><span class="line">                <span class="string">"PDCoreDir"</span>:<span class="string">"../../../"</span>,                    <span class="comment">//- 相对于home-build.js往上3级</span></span><br><span class="line">                <span class="string">"PDGlobalDir"</span>:<span class="string">"../../../../global"</span>,</span><br><span class="line">                <span class="string">"PDHomeDir"</span>:<span class="string">"../"</span>,</span><br><span class="line">                <span class="string">"PDUtilDir"</span>:<span class="string">"../../../../modules/util"</span>,</span><br><span class="line">                <span class="comment">//"PDUtilDir/dialog":"empty:",</span></span><br><span class="line">                <span class="string">"Ace-build"</span>:<span class="string">"empty:"</span>,                       <span class="comment">//- 指明需忽略的文件</span></span><br><span class="line">                <span class="comment">//"jqValidate-build":"empty:",</span></span><br><span class="line">                <span class="comment">/*"JQuery.validate":"empty:",</span></span><br><span class="line"><span class="comment">                "JQuery.validate.message":"empty:",</span></span><br><span class="line"><span class="comment">                "JQuery.validate.extra":"empty:",*/</span></span><br><span class="line">                <span class="string">"Angular"</span>:<span class="string">"empty:"</span>,</span><br><span class="line">                <span class="string">"Angular-ui-router"</span>:<span class="string">"empty:"</span>,</span><br><span class="line">                <span class="string">"PDAppDir/appPath"</span>:<span class="string">"empty:"</span>,</span><br><span class="line">                <span class="string">"PDAppDir/directive"</span>:<span class="string">"empty:"</span>,</span><br><span class="line">                <span class="string">"PDUtilDir/util"</span>:<span class="string">"empty:"</span>,</span><br><span class="line">                <span class="string">"Bootstrap"</span>:<span class="string">"empty:"</span>,</span><br><span class="line">                <span class="string">"jquery"</span>:<span class="string">"empty:"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(rev())                                        <span class="comment">//- 文件名加MD5后缀</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">"static/core/page/home/js"</span>))        <span class="comment">//- 生成MD5后的文件</span></span><br><span class="line">        .pipe(rev.manifest(&#123;<span class="attr">merge</span>:<span class="literal">true</span>&#125;))                   <span class="comment">//- 生成一个rev-manifest.json</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">''</span>))                                <span class="comment">//- 映射文件输出目录</span></span><br><span class="line">        .on(<span class="string">'end'</span>, cb);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首页框架相关资源构建</span></span><br><span class="line"><span class="comment"> * 合并了如下资源</span></span><br><span class="line"><span class="comment"> * - subHome-build.js</span></span><br><span class="line"><span class="comment"> * - PDCoreDir/corePath</span></span><br><span class="line"><span class="comment"> * - PDGlobalDir/base</span></span><br><span class="line"><span class="comment"> * - PDHomeDir/js/subHomeApp</span></span><br><span class="line"><span class="comment"> *   - PDCoreDir/directive</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">gulp.task(<span class="string">"subHome-build"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">"static/core/page/home/js/subHome-build.js"</span>)</span><br><span class="line">        .pipe(reqOptimize(&#123;</span><br><span class="line">            <span class="comment">//optimize:"none",</span></span><br><span class="line">            <span class="comment">//findNestedDependencies: true,                 //- 解析嵌套中的require</span></span><br><span class="line">            paths:&#123;</span><br><span class="line">                <span class="string">"PDCoreDir"</span>:<span class="string">"../../../"</span>,                  <span class="comment">//相对于home-build.js往上3级</span></span><br><span class="line">                <span class="string">"PDGlobalDir"</span>:<span class="string">"../../../../global"</span>,</span><br><span class="line">                <span class="string">"PDHomeDir"</span>:<span class="string">"../"</span>,</span><br><span class="line">                <span class="string">"PDUtilDir"</span>:<span class="string">"../../../../modules/util"</span>,</span><br><span class="line">                <span class="string">"jqValidate-build"</span>:<span class="string">"empty:"</span>,</span><br><span class="line">                <span class="comment">/*"JQuery.validate":"empty:",</span></span><br><span class="line"><span class="comment">                 "JQuery.validate.message":"empty:",</span></span><br><span class="line"><span class="comment">                 "JQuery.validate.extra":"empty:",*/</span></span><br><span class="line">                <span class="string">"Angular"</span>:<span class="string">"empty:"</span>,</span><br><span class="line">                <span class="string">"PDAppDir/appPath"</span>:<span class="string">"empty:"</span>,</span><br><span class="line">                <span class="string">"PDAppDir/directive"</span>:<span class="string">"empty:"</span>,</span><br><span class="line">                <span class="string">"PDUtilDir/util"</span>:<span class="string">"empty:"</span>,</span><br><span class="line">                <span class="string">"Bootstrap"</span>:<span class="string">"empty:"</span>,</span><br><span class="line">                <span class="string">"jquery"</span>:<span class="string">"empty:"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(rev())                                        <span class="comment">//- 文件名加MD5后缀</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">"static/core/page/home/js"</span>))        <span class="comment">//- 生成MD5后的文件</span></span><br><span class="line">        .pipe(rev.manifest(&#123;<span class="attr">merge</span>:<span class="literal">true</span>&#125;))                   <span class="comment">//- 生成一个rev-manifest.json</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">''</span>))                                <span class="comment">//- 映射文件输出目录</span></span><br><span class="line">        .on(<span class="string">'end'</span>, cb);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ACE文件合并</span></span><br><span class="line">gulp.task(<span class="string">"ace-build"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">"static/modules/ace/dist/js/ace-build.js"</span>)</span><br><span class="line">        .pipe(reqOptimize(&#123;</span><br><span class="line">            <span class="comment">//optimize:"none",</span></span><br><span class="line">            <span class="comment">//mainConfigFile: 'static/global/config-build.js',</span></span><br><span class="line">            paths:&#123;</span><br><span class="line">                <span class="string">"Ace"</span>:<span class="string">"ace.min"</span>,</span><br><span class="line">                <span class="string">"Ace-extra"</span>:<span class="string">"ace-extra.min"</span>,</span><br><span class="line">                <span class="string">"Ace-element"</span>:<span class="string">"ace-elements.min"</span>,</span><br><span class="line">                <span class="string">"Bootstrap"</span>:<span class="string">"empty:"</span>,</span><br><span class="line">                <span class="string">"jquery"</span>:<span class="string">"empty:"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            shim:&#123;</span><br><span class="line">                <span class="string">"Ace"</span>:[<span class="string">"Bootstrap"</span>, <span class="string">"jquery"</span>],</span><br><span class="line">                <span class="string">"Ace-element"</span>:[<span class="string">"Ace"</span>],</span><br><span class="line">                <span class="string">"Ace-extra"</span>:[<span class="string">"Ace"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(rev())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'static/modules/ace/dist/js/'</span>))</span><br><span class="line">        .pipe(rev.manifest(&#123;<span class="attr">merge</span>:<span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">''</span>))</span><br><span class="line">        .on(<span class="string">'end'</span>, cb);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jquery.validate.min.js、messages_zh.js、additional-methods.js合并为一个文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">gulp.task(<span class="string">"jqValidate-build"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dir = <span class="string">"static/modules/jquery/plugins/validate"</span>;</span><br><span class="line">    gulp.src(dir+<span class="string">"/jqValidate-build.js"</span>)</span><br><span class="line">        .pipe(reqOptimize(&#123;</span><br><span class="line">            <span class="comment">//optimize:"none",</span></span><br><span class="line">            <span class="comment">//findNestedDependencies: true,</span></span><br><span class="line">            paths:&#123;</span><br><span class="line">                <span class="string">"JQuery.validate"</span>:<span class="string">"jquery.validate.min"</span>,</span><br><span class="line">                <span class="string">"JQuery.validate.message"</span>:<span class="string">"localization/messages_zh"</span>,</span><br><span class="line">                <span class="string">"JQuery.validate.extra"</span>:<span class="string">"additional-methods"</span>,</span><br><span class="line">                <span class="string">"jquery"</span>:<span class="string">"empty:"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            wrapShim:<span class="literal">true</span>,</span><br><span class="line">            shim:&#123;</span><br><span class="line">                <span class="string">"JQuery.validate.message"</span>:[<span class="string">"JQuery.validate"</span>],</span><br><span class="line">                <span class="string">"JQuery.validate.extra"</span>:[<span class="string">"JQuery.validate"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(rev())</span><br><span class="line">        .pipe(gulp.dest(dir))</span><br><span class="line">        .pipe(rev.manifest(&#123;<span class="attr">merge</span>:<span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">''</span>))</span><br><span class="line">        .on(<span class="string">'end'</span>, cb);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//util目录下util.js文件合并压缩</span></span><br><span class="line">gulp.task(<span class="string">"util-build"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    gulp.src([<span class="string">'static/modules/util/util-build.js'</span>])</span><br><span class="line">        .pipe(reqOptimize(&#123;</span><br><span class="line">            <span class="comment">//optimize:"none",</span></span><br><span class="line">            <span class="comment">//findNestedDependencies: true,                 //- 解析嵌套中的require</span></span><br><span class="line">            paths:&#123;</span><br><span class="line">                <span class="string">"PDUtilDir"</span>:<span class="string">""</span>,</span><br><span class="line">                <span class="comment">//"PDUtilDir/dialog":"empty:",</span></span><br><span class="line">                <span class="comment">//"Bootstrap":"empty:",</span></span><br><span class="line">                <span class="string">"jquery"</span>:<span class="string">"empty:"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(rev())                                        <span class="comment">//- 文件名加MD5后缀</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">"static/modules/util"</span>))</span><br><span class="line">        <span class="comment">//.pipe(rename(&#123;extname: ""&#125;))                      //- 映射文件中去掉后缀</span></span><br><span class="line">        .pipe(rev.manifest(&#123;<span class="attr">merge</span>:<span class="literal">true</span>&#125;))                   <span class="comment">//- 生成一个rev-manifest.json</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">''</span>))                                <span class="comment">//- 映射文件输出目录</span></span><br><span class="line">        .on(<span class="string">'end'</span>, cb);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//config文件中路径替换</span></span><br><span class="line">gulp.task(<span class="string">"replaceConfigPathTemp"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    gulp.src([<span class="string">'rev-manifest.json'</span>, <span class="string">'static/global/config-build.js'</span>])</span><br><span class="line">        .pipe(revCollector())</span><br><span class="line">        .pipe(rev())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'static/global'</span>))</span><br><span class="line">        .pipe(rev.manifest(&#123;<span class="attr">merge</span>:<span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">''</span>))</span><br><span class="line">        .on(<span class="string">'end'</span>, cb);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换掉config-build-md5.js文件中的所有js文件后缀</span></span><br><span class="line">gulp.task(<span class="string">"replaceConfigPath"</span>,[<span class="string">"replaceConfigPathTemp"</span>],<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    gulp.src([<span class="string">'static/global/config-build-*.js'</span>])</span><br><span class="line">        .pipe(modify(replaceSuffix))            <span class="comment">//- 去掉.js后缀</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">"static/global"</span>))</span><br><span class="line">        <span class="comment">//.pipe(rename("config.js"))              //- 生成一份不带MD5的config文件</span></span><br><span class="line">        <span class="comment">//.pipe(gulp.dest("static/global"))</span></span><br><span class="line">        .on(<span class="string">'end'</span>, cb);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * - 首页路径替换</span></span><br><span class="line"><span class="comment"> * - 替换config-build.js、home-build.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">gulp.task(<span class="string">"replaceHomePath"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src([<span class="string">'rev-manifest.json'</span>, <span class="string">'static/core/page/home/home-build.jsp'</span>])</span><br><span class="line">        .pipe(revCollector())</span><br><span class="line">        .pipe(rename(<span class="string">"home.jsp"</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'static/core/page/home'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * - SubHome中的路径替换</span></span><br><span class="line"><span class="comment"> * - 替换config-build.js、subHome-build.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">gulp.task(<span class="string">"replaceSubHomePath"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src([<span class="string">'rev-manifest.json'</span>, <span class="string">'static/core/page/home/subHome-build.jsp'</span>])</span><br><span class="line">        .pipe(revCollector())</span><br><span class="line">        .pipe(rename(<span class="string">"subHome.jsp"</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'static/core/page/home'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"replaceLoginFormPath"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src([<span class="string">'rev-manifest.json'</span>, <span class="string">'static/core/page/login/login-build.jsp'</span>])</span><br><span class="line">        .pipe(revCollector())</span><br><span class="line">        .pipe(rename(<span class="string">"login.jsp"</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'static/core/page/login'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//构建总入口</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    runSequence(</span><br><span class="line">        <span class="string">"clean"</span>,                <span class="comment">//- 上一次构建的结果清空</span></span><br><span class="line">        <span class="string">"home-build"</span>,           <span class="comment">//- 首页相关资源合并</span></span><br><span class="line">        <span class="string">"subHome-build"</span>,        <span class="comment">//- SubHome相关</span></span><br><span class="line">        <span class="string">"ace-build"</span>,            <span class="comment">//- ace相关资源合并</span></span><br><span class="line">        <span class="string">"jqValidate-build"</span>,     <span class="comment">//- 语言包与验证插件合并为一个</span></span><br><span class="line">        <span class="string">"util-build"</span>,           <span class="comment">//- 把loading、slidebar合并到util中</span></span><br><span class="line">        <span class="string">"replaceConfigPath"</span>,    <span class="comment">//- config.js中路径处理</span></span><br><span class="line">        <span class="comment">//- 需先编译css再替换相关页面路径</span></span><br><span class="line">        <span class="string">"component-less"</span>,</span><br><span class="line">        <span class="string">"home-less"</span>,</span><br><span class="line">        <span class="string">"login-less"</span>,</span><br><span class="line">        <span class="comment">//- 可并行处理</span></span><br><span class="line">        [<span class="string">"replaceHomePath"</span>,<span class="string">"replaceSubHomePath"</span>,<span class="string">"replaceLoginFormPath"</span>],</span><br><span class="line">        callback);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//文件内容变更动态构建</span></span><br><span class="line">gulp.task(<span class="string">"start"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">"static/**"</span>,[<span class="string">"default"</span>])</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************LESS文件编译***********************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * - 登录页面相关</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">gulp.task(<span class="string">"login-less"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dir = <span class="string">"static/core/page/login/theme"</span>;</span><br><span class="line">    gulp.src(dir+<span class="string">"/login-build.less"</span>)</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(rev())</span><br><span class="line">        .pipe(gulp.dest(dir))</span><br><span class="line">        .pipe(rev.manifest(&#123;<span class="attr">merge</span>:<span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">''</span>))</span><br><span class="line">        .on(<span class="string">'end'</span>, cb);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * - util下的所有产品组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">gulp.task(<span class="string">"component-less"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dir = <span class="string">"static/modules/util/css"</span>;</span><br><span class="line">    gulp.src(dir+<span class="string">"/components-build.less"</span>)</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(rev())</span><br><span class="line">        .pipe(gulp.dest(dir))</span><br><span class="line">        .pipe(rev.manifest(&#123;<span class="attr">merge</span>:<span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">''</span>))</span><br><span class="line">        .on(<span class="string">'end'</span>, cb);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * - 首页相关</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">gulp.task(<span class="string">"home-less"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dir = <span class="string">"static/core/page/home/css"</span>;</span><br><span class="line">    gulp.src(dir+<span class="string">"/home-build.less"</span>)</span><br><span class="line">        .pipe(less())</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(rev())</span><br><span class="line">        .pipe(gulp.dest(dir))</span><br><span class="line">        .pipe(rev.manifest(&#123;<span class="attr">merge</span>:<span class="literal">true</span>&#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">''</span>))</span><br><span class="line">        .on(<span class="string">'end'</span>, cb);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;h3 id=&quot;NodeJS安装&quot;&gt;&lt;a href=&quot;#NodeJS安装&quot; class=&quot;headerlink&quot; title=&quot;N
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://muchstudy.com/categories/FrontEnd/"/>
    
    
  </entry>
  
  <entry>
    <title>登录模块的设计</title>
    <link href="http://muchstudy.com/2016/11/20/%E7%99%BB%E5%BD%95%E6%A8%A1%E5%9D%97%E7%9A%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://muchstudy.com/2016/11/20/登录模块的设计/</id>
    <published>2016-11-20T11:09:27.000Z</published>
    <updated>2016-11-21T01:24:27.977Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/11/20/登录模块的设计/登录.jpg"><p>&emsp;&emsp;最近做完系统登录模块的重构，登录这块的核心在于安全的控制。下面通过本文来总结一下登录模块的设计实现，以及哪些方面需要注意。</p><h2 id="用户创建"><a href="#用户创建" class="headerlink" title="用户创建"></a>用户创建</h2><ul><li>密码保存需要做不可逆加密。即密码不能明文保存且即使是内部技术人员也无法得到真实密码，常见的加密方法有MD5，SHA系列算法，如果对加密算法不太了解的可以移步<a href="http://muchstudy.com/2016/09/04/%E5%AE%89%E5%85%A8%E7%AE%97%E6%B3%95%E6%A2%B3%E7%90%86/">这里</a>。</li><li>密码强度限制。不允许使用弱口令，比如跟用户生日相等。</li><li>手机、邮箱验证。方便后续找回密码。</li></ul><h2 id="用户登录"><a href="#用户登录" class="headerlink" title="用户登录"></a>用户登录</h2><h3 id="需要注意的问题"><a href="#需要注意的问题" class="headerlink" title="需要注意的问题"></a>需要注意的问题</h3><ul><li>使用验证码。增加暴力破解的成本。</li><li>登录错误次数限制，一定时间后自动解锁，彻底堵死暴力破解。</li><li>关键cookie设置HTTPOnly属性，防止xss盗取用户cookie。</li><li>保证密码在网络传输中的安全。启用HTTPS，或使用RAS加密。请求登录界面时，生成公钥与私钥，私钥放在服务器端，密码传输前，使用公钥加密，服务器端收到密文后使用私钥解密密文得到用户输入的真实密码。</li><li>集群状态下，采用session共享的方式实现SSO时，在session上记录的登录状态信息需要可序列化。</li><li>页面跳转时使用服务器端跳转，<code>request.getRequestDispatcher().forward()</code>。尽量不要使用<code>response.sendRedirect()</code>,因为每次redirect都会触发客户端304，重新再次发起一次HTTP请求。</li></ul><h3 id="记住密码"><a href="#记住密码" class="headerlink" title="记住密码"></a>记住密码</h3><p>可以考虑这样去实现记住密码功能：cookie中需要保存如下3个值<br>username：用户的登录名<br>token：使用公钥加密过的用户密码<br>sequence：登录序列（防重放攻击。如果自动登录的该字段与服务器的不相符时，则证明用户在其他地方登录过。）  </p><p>&emsp;&emsp;当勾选记住密码登录时，在服务器端保存当前的私钥、生成一个随机的登录序列（UUID）保存起来。同时，把用户名、登录传输过来的已经用公钥加密的密文、新生成的sequence保存到cookie中。下次用户请求登录页面时，从cookie中取得用户名放到用户名的输入框中，任意字符串放到密码框中，继续勾选上记住密码框。这个时候只需要输入验证码即可点击登录按钮。服务器端，判断出本次登录是记住密码登录，首先验证cookie中的sequence是否跟服务保存的一致，如果不一致，则登录失败。一致时，取出私钥解密从cookie中拿到的token，得到真实密码，接着按照常规登录流程完成登录验证。</p><h2 id="密码变更"><a href="#密码变更" class="headerlink" title="密码变更"></a>密码变更</h2><ul><li>修改密码需要提供原始密码</li><li>相关信息在网络传输中需保证加密传输</li><li>找回密码功能可以考虑使用手机验证码，邮件链接实现。另外，还可考虑提供用户在本系统中的留痕供用户选择（比如什么时候注册、最近做了什么操作等），从而识别出真正的用户。</li></ul><h2 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h2><ul><li>记录用户的登录日志。可记录下登录时间、退出时间、IP等信息，分析过往日志，甄别出异常登录并提醒用户。</li><li>记录用户登录失败日志。限制登录失败重试次数，防止暴力破解。</li></ul><h2 id="服务器相关"><a href="#服务器相关" class="headerlink" title="服务器相关"></a>服务器相关</h2><p>&emsp;&emsp;有时应用的安全部分做得再好，也抵不住服务器直接被攻破，所以运行应用的服务器的安全也需要特别注意。</p><ul><li>服务器访问日志（建议开启）</li><li>可疑用户</li><li>可疑进程</li><li>可疑服务</li><li>操作系统日志（日志最大大小） 定期备份</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2016/11/20/登录模块的设计/登录.jpg&quot;&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;最近做完系统登录模块的重构，登录这块的核心在于安全的控制。下面通过本文来总结一下登录模块的设计实现，以及哪些方面需要注意。&lt;/p&gt;
&lt;h2 id=&quot;用户创建&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Programmer" scheme="http://muchstudy.com/categories/Programmer/"/>
    
    
  </entry>
  
  <entry>
    <title>每一个优秀的人，都有一段默默努力的时光</title>
    <link href="http://muchstudy.com/2016/11/19/%E6%AF%8F%E4%B8%80%E4%B8%AA%E4%BC%98%E7%A7%80%E7%9A%84%E4%BA%BA%EF%BC%8C%E9%83%BD%E6%9C%89%E4%B8%80%E6%AE%B5%E9%BB%98%E9%BB%98%E5%8A%AA%E5%8A%9B%E7%9A%84%E6%97%B6%E5%85%89/"/>
    <id>http://muchstudy.com/2016/11/19/每一个优秀的人，都有一段默默努力的时光/</id>
    <published>2016-11-19T08:29:13.000Z</published>
    <updated>2019-12-01T04:07:59.080Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/11/19/每一个优秀的人，都有一段默默努力的时光/努力时光.jpg" title="努力时光"><p>&emsp;&emsp;“每一个优秀的人，都有一段默默努力的时光。”，在上班的地铁上，打开百词斩，这句话第一时间映入眼帘。</p><p>&emsp;&emsp;还记得高中时，有一哥们儿经常被大家喷，什么原因呢？是这样的，这哥们儿各科成绩很好，另外，大家都知道这哥们儿很勤奋努力，每天晚自习回家都要背一下单词，复习一下第二天要学习的新知识点才睡觉。喜欢运动，一有空就叫人一起去篮球场打球。作业少，较轻松的时候，大家当然都很乐意跟他一起去投投篮什么的。当作业堆成小山的时候，这哥们儿每叫一次就会被喷一次，被喷的核心内容在于他自己的事情干完了就开始勾引其他人了……</p><p>&emsp;&emsp;回想起当年高中时的日子，算得上是人生当中的一段努力时光。</p><p>&emsp;&emsp;到了大学，高中时肩上那种沉重压力灰飞烟灭。放下担子，一路轻快的飞奔，沉醉在那自由自在的欢快时光中，无法自拔。然而，一个不经意间就到了毕业季……</p><p>&emsp;&emsp;刚工作时，什么都不懂，觉得周围的人都是大神，感觉离他们之间有相当遥远的距离，可望而不可及。</p><p>&emsp;&emsp;一次出差，到外地培训公司新招的实习生，在当地的讲师队伍中有一位喜欢吹牛逼讲师。他在给还没毕业的学弟学妹的讲课当中，常常吹嘘自己看了多少书，吹嘘自己看过市面上的所有心理学书籍，看过所有的关于超级记忆的书籍。听到“所有”这两字，我就呵呵了，不由得就跟“吹牛”划上了等号。在后来的慢慢接触当中，渐渐发现他思维开阔，懂的东西特别的多，不管什么内容不仅能扩展开了泛泛而谈，而且能深入直达本质。另外，他的确喜欢读书，经常看到他收快递，十有八九都是书。深入了解后，从他的口中了解到，他曾经喜欢研究心理学，所以才把市面上所有经典的心理学书籍都买来看，为了帮助小孩儿学英语，把市面上的所有关于超级记忆的书都买来看了一遍！了解到这些，不由得一阵惊叹！然后不理解的再问了一个问题，“也没必要把所有相关的书都买了吧？”，他给我的答案是：“<strong>在这个世界上，书是最廉价的东西，只要这本书中有一句话影响到你，对你有益。那么，这本书就没有白买，这种益处还是终生的！想想就觉得相当的赚。</strong>”。听到这个回答，再次被惊着，世界观被颠覆。</p><p>&emsp;&emsp;在这次出差当中，正巧一位集团的副总裁在这边，顺便叫了过来给新招的实习生做一下分享，顺便让大家见见今后的领导。对于当时也属于新兵的我来说，这位领导如在云端，遥不可及。他从他的读书生涯讲起，讲他的高中时光，讲他的大学时光，讲他是怎么样从高中走进了清华的校园，然后怎么样从清华校园到出国学习，接着工作，然后一直到目前上市公司副总裁的位置。讲完他的人生履历，他总结道，其实，他并不聪明，只是比别人更努力而已。曾经由于期末成绩不好，在暑假发狠重学上学期的所有功课，周末一人泡在自习室，别人在尽情欢乐的时候他却泡在图书馆。<strong>因为没办法，没别人聪明，那就只有靠努力来补</strong>。最后，他希望大家都成为一个努力的人。听完他的分享，觉得他其实跟大家一样，都站在地上，并没有想象的那么遥远。</p><p>&emsp;&emsp;在工作的这些年中，不乏一些名牌大学毕业、一些工作很多年头的同事。一些同事的确很聪明，经验很丰富。但另一些同事你会明显感觉到他过去的丰富履历跟目前工作能力不相符。而零星的一些过去履历不怎么闪耀的同事反而工作能力出众，他们的实际能力远远超出了过去平淡履历的客观印象。一个能够解释其中原因的逻辑为，一些人在很久以前即达到了人生的顶峰，然后慢慢的往下走。而另外一些人慢慢从波谷走出来，不断往顶峰攀登。大家上班的时间都是差不多的，在上班时间都需要为公司创造价值，很少有自己的时间。因此，可以肯定，在工作之外，那些不断向前的人应当远远不止一段默默努力的时光。</p><p>&emsp;&emsp;曾经在知乎上回答过一个跟逆袭相关的问题，当时我的回答是，<strong>逆袭并不是一个偶然事件，而是一个量变产生质变的事件</strong>。本来就不聪明当然要比聪明的人下更多的功夫。聪明是天生优势，如果停止不前也是很容易被笨蛋超越的。知乎上面，还有一句广泛被大众所知的一句话：“以大多数人的努力程度，远远还没到拼天赋的时候！”</p><p>&emsp;&emsp;最后，只想对自己说：“你一直在努力的路上，你的征途是知识的星辰大海。”</p><p>作者公众号：<br><img src="http://muchstudy.com/2019/11/10/%E4%B8%80%E6%96%87%E6%90%9E%E5%AE%9AJS%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7/YIYING.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2016/11/19/每一个优秀的人，都有一段默默努力的时光/努力时光.jpg&quot; title=&quot;努力时光&quot;&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;“每一个优秀的人，都有一段默默努力的时光。”，在上班的地铁上，打开百词斩，这句话第一时间映入眼帘。&lt;/p&gt;
&lt;p&gt;&amp;e
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
      <category term="随笔" scheme="http://muchstudy.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Servlet中Cookie增、删、改、查</title>
    <link href="http://muchstudy.com/2016/11/18/Servlet%E4%B8%ADCookie%E5%A2%9E%E3%80%81%E5%88%A0%E3%80%81%E6%94%B9%E3%80%81%E6%9F%A5/"/>
    <id>http://muchstudy.com/2016/11/18/Servlet中Cookie增、删、改、查/</id>
    <published>2016-11-18T06:43:04.000Z</published>
    <updated>2016-11-19T08:32:51.962Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;整理了一个在Servlet中对Cookie增删改查的工具类，首先要注意的是在服务器端是无法对Cookie做修改的，只能做到覆盖创建。</p><p><strong>引用StackOverflow上James Sumners的<a href="http://stackoverflow.com/questions/5093250/how-do-you-update-an-existing-cookie-in-jsp" target="_blank" rel="noopener">回答</a>：</strong></p><blockquote><p>Per section 3.3.4 of <a href="http://www.ietf.org/rfc/rfc2965.txt" target="_blank" rel="noopener">RFC 2965</a>, the user agent does not include the expiration information in the cookie header that is sent to the server. Therefore, there is no way to update an existing cookie’s value while retaining the expiration date that was initially set based solely on the information associated with the cookie.</p><p>So the answer to this question is: you can’t do that.</p></blockquote><p><strong>工具类如下：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增Cookie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addCookie</span><span class="params">(HttpServletResponse response, String name,String value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//特殊字符需要编码</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(name,URLEncoder.encode(value, <span class="string">"UTF-8"</span>));</span><br><span class="line">cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>);<span class="comment">//- 单位为秒，7天有效</span></span><br><span class="line">cookie.setPath(<span class="string">"/"</span>);<span class="comment">//- 根路径</span></span><br><span class="line"><span class="comment">//JavaEE5兼容</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">cookie.setHttpOnly(<span class="keyword">true</span>);<span class="comment">//- 防XSS</span></span><br><span class="line">&#125;<span class="keyword">catch</span> (NoSuchMethodError e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除Cookie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">deleteCookie</span><span class="params">(HttpServletRequest request,HttpServletResponse response, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getCookies() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : request.getCookies()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cookie.getName().equals(name)) &#123;</span><br><span class="line">                cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">//经测试发现还需设置如下两个值,之所以这样，原理为覆盖掉Cookie，而不是常规意义中的删除</span></span><br><span class="line">cookie.setValue(<span class="string">""</span>);</span><br><span class="line">cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line">                response.addCookie(cookie);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 覆盖掉之前的cookie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">overrideCookie</span><span class="params">(HttpServletRequest request,HttpServletResponse response, String name,String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getCookies() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : request.getCookies()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cookie.getName().equals(name)) &#123;</span><br><span class="line">                cookie.setValue(value);</span><br><span class="line">cookie.setPath(<span class="string">"/"</span>);</span><br><span class="line"><span class="comment">//cookie.getMaxAge()为-1，服务器端无法获取MaxAge</span></span><br><span class="line">cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>*<span class="number">7</span>);</span><br><span class="line">response.addCookie(cookie);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Cookie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cookie <span class="title">getCookie</span><span class="params">(HttpServletRequest request, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getCookies() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : request.getCookies()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cookie.getName().equals(name)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> cookie;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Cookie对应的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getCookieValue</span><span class="params">(HttpServletRequest request, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request.getCookies() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : request.getCookies()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cookie.getName().equals(name)) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> URLDecoder.decode(cookie.getValue(), <span class="string">"UTF-8"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;整理了一个在Servlet中对Cookie增删改查的工具类，首先要注意的是在服务器端是无法对Cookie做修改的，只能做到覆盖创建。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;引用StackOverflow上James Sumners的&lt;a href=&quot;http
      
    
    </summary>
    
      <category term="Java" scheme="http://muchstudy.com/categories/Java/"/>
    
    
      <category term="工具类" scheme="http://muchstudy.com/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>关于代码质量的一点思考</title>
    <link href="http://muchstudy.com/2016/11/13/%E5%85%B3%E4%BA%8E%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
    <id>http://muchstudy.com/2016/11/13/关于代码质量的一点思考/</id>
    <published>2016-11-13T08:20:51.000Z</published>
    <updated>2016-11-13T10:19:23.227Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;最近在做基础开发框架登录模块的重构，所以来谈一谈关于代码质量的思考。<br>&emsp;&emsp;进入正题之前，先吐槽一下，看看能不能引起一点共鸣。<br>&emsp;&emsp;之所以要重构这部分的代码，原因很简单，公司的测试团队通过压力测试发现登录这块有性能问题。同时，基于另外一个使用产品基础开发框架的团队需要在登录这块进行一些业务上的扩展。怀着激动的心情打开这块的相关代码，首先第一感觉就是杂乱无章，排版糟糕。没办法，要解决问题，还是得硬着头皮看下去。接着，从前端UI界面的输入到提交看起，发现代码相当的绕，很难看懂其中的逻辑。另外，其中还有大片的冗余拖沓代码。虽然整体功能逻辑完整的实现了，但是实现细节一团糟。毫不夸张的说，很多部分的代码完全属于技术验证阶段的代码。遇到这样的代码，我想很少能有人能静下心来完完整整的看完……</p><p>下面说说我所认为的代码是怎么样的:  </p><ol><li>代码需要排版整洁干净、并且有清晰适当的注释，当打开代码源文件的瞬间，能给人一种赏心悦目的感觉。</li><li>代码要简洁，不拖沓，不能为了封装而封装，为了面向对象而面向对象。重复功能的代码尽量封装成方法，杜绝成段成段的相同代码、冗余代码。</li><li>代码的结构要清晰，让其他人能轻松的找到程序的入口，轻松摸清代码的整体脉络，并且不看每个方法中的具体内容，只需要看整个代码的骨骼即能了解程序的功能。</li><li>模块与模块的对接部分要简洁。大部分情况为沟通不彻底或者相互对对方的模块缺乏基本的了解造成。</li><li>注重代码的性能。这一块不仅需要从纯技术角度去考虑代码的性能，还需要深入的了解业务需求，往往一个灵光一闪的想法就能节约成片的代码、以简单的逻辑实现复杂的业务需求。</li></ol><p>一些思考：</p><ol><li>好的代码往往是经过不断的打磨产生的，一个精进的程序员应当具备一颗喜欢折腾代码的躁动的心。</li><li>对于框架级的代码，越早重构越好，越往后拖所带来的成本越大。</li><li>糟糕代码质量的代码后期维护成本不可估量，甚至会影响到后续新功能的开发，从这里真正能对比出一个优秀Programmer的价值。</li><li>写代码也是一门艺术。一段完美精致代码的创造过程不亚于一件艺术品的创作过程。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;最近在做基础开发框架登录模块的重构，所以来谈一谈关于代码质量的思考。&lt;br&gt;&amp;emsp;&amp;emsp;进入正题之前，先吐槽一下，看看能不能引起一点共鸣。&lt;br&gt;&amp;emsp;&amp;emsp;之所以要重构这部分的代码，原因很简单，公司的测试团队通过压力测试发现
      
    
    </summary>
    
      <category term="Programmer" scheme="http://muchstudy.com/categories/Programmer/"/>
    
    
  </entry>
  
  <entry>
    <title>《解忧杂货店》</title>
    <link href="http://muchstudy.com/2016/10/16/%E3%80%8A%E8%A7%A3%E5%BF%A7%E6%9D%82%E8%B4%A7%E5%BA%97%E3%80%8B/"/>
    <id>http://muchstudy.com/2016/10/16/《解忧杂货店》/</id>
    <published>2016-10-16T13:38:04.000Z</published>
    <updated>2016-12-15T04:28:33.577Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/10/16/《解忧杂货店》/解忧杂货店.jpg" title="《解忧杂货店》-东野圭吾"><p>&emsp;&emsp;全书共有五个章节，十一之后回来的连续五天读完，阅读时间统一为下班回家的地铁上，不由得感叹零碎时间充分的利用起来居然可以这么快的看完一本书。当然，这也离不开这是一本翻开就停不下来的书。<br>&emsp;&emsp;在这之前，看过东野圭吾的《白夜行》与《嫌疑人X的献身》。受这两部作品的影响，以为《解忧杂货店》也是一本悬疑小说，结果完全出乎意料。<br>&emsp;&emsp;书中，通过一封封的信件一个个的故事，看似杂乱，到后来都串成了一个统一的整体，作者的写作水平可见一斑。<br>&emsp;&emsp;<strong>最后的一张白纸既代表着一无所有，也代表着无限的可能。</strong><br>&emsp;&emsp;本来想整理一下全书的时间线，结果发现知乎上已经有人整理了，在<a href="https://www.zhihu.com/question/27568787" target="_blank" rel="noopener">这里</a>。  </p><p>一些标注：  </p><ul><li>但她那略带忧郁的表情吸引了克郎。在她身上，有种不属于孩子的成熟韵味。</li><li>那个女孩眼也不眨地望着他，眼神十分真挚。</li><li>他们对克郎造成强烈的刺激。这种刺激用一句话概括，就是他们对音乐的热情。他们宁可牺牲一切，也要提高自己的音乐水准。</li><li>“歌唱得跟你一样好的人多的是，如果你的声音很有特色，自然另当别论，但你没有。”</li><li>“以外行来说，是还好。”评论家淡淡地答道，“不过可惜也就这个水平了。歌的旋律总有似曾相识的感觉，没有自己的新意。”</li><li>人生中浪矢杂货店具有重要意义的人，也许出乎意料的多。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2016/10/16/《解忧杂货店》/解忧杂货店.jpg&quot; title=&quot;《解忧杂货店》-东野圭吾&quot;&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;全书共有五个章节，十一之后回来的连续五天读完，阅读时间统一为下班回家的地铁上，不由得感叹零碎时间充分的利用起来居然可以这么快
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
      <category term="读书笔记" scheme="http://muchstudy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>解决sql脚本导入Oracle重复生成check约束问题</title>
    <link href="http://muchstudy.com/2016/10/08/%E8%A7%A3%E5%86%B3sql%E8%84%9A%E6%9C%AC%E5%AF%BC%E5%85%A5Oracle%E9%87%8D%E5%A4%8D%E7%94%9F%E6%88%90check%E7%BA%A6%E6%9D%9F%E9%97%AE%E9%A2%98/"/>
    <id>http://muchstudy.com/2016/10/08/解决sql脚本导入Oracle重复生成check约束问题/</id>
    <published>2016-10-08T08:06:38.000Z</published>
    <updated>2017-01-21T10:33:16.997Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;之前一位细心的同事发现产品的全量sql脚本中有一些重复的check约束检查，就像下图这样的</p><img src="/2016/10/08/解决sql脚本导入Oracle重复生成check约束问题/重复脚本.jpg" title="重复脚本"><p>怪异之处还在于，每次执行一遍该脚本，然后导出脚本，在导出脚本中重复的次数就会增加一遍。通过navicat，最终确认每导入一次就会新增加一条重复的check约束，如下图所示  </p><img src="/2016/10/08/解决sql脚本导入Oracle重复生成check约束问题/navicat.jpg" title="navicat"><p>&emsp;&emsp;这个全量脚本是直接从数据库中导出的，为了方便导入其他的Oracle数据库中，从产品的出货库导出时手动去掉了<code>服务名</code>、<code>双引号</code>。</p><p>&emsp;&emsp;通过如下步骤可复现该问题：<br><strong>1.创建表</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> PD_WEB_FILEUPLOAD_CHUNK (</span><br><span class="line"><span class="keyword">ID</span> VARCHAR2(<span class="number">32</span> <span class="keyword">BYTE</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> ,</span><br><span class="line"><span class="keyword">MD5</span> VARCHAR2(<span class="number">32</span> <span class="keyword">BYTE</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>  <span class="literal">NULL</span> ,</span><br><span class="line"><span class="keyword">CHUNK</span> <span class="built_in">NUMBER</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>  <span class="literal">NULL</span> ,</span><br><span class="line">FILE_DIR VARCHAR2(<span class="number">200</span> <span class="keyword">BYTE</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>可以看到上面的脚本中有<code>NOT NULL</code>的标识，执行完后在navicat中可以看到结果是这样的</p><img src="/2016/10/08/解决sql脚本导入Oracle重复生成check约束问题/navicatnew.jpg" title="navicat"><p>注意看，这里的check约束是带双引号的。</p><p><strong>2.执行增加check约束的脚本</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> PD_WEB_FILEUPLOAD_CHUNK <span class="keyword">ADD</span> <span class="keyword">CHECK</span> (<span class="keyword">ID</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> PD_WEB_FILEUPLOAD_CHUNK <span class="keyword">ADD</span> <span class="keyword">CHECK</span> (FILE_DIR <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>执行了两遍后，结果如图所示</p><img src="/2016/10/08/解决sql脚本导入Oracle重复生成check约束问题/navicatThree.jpg" title="navicat"><p>测试到这里，以为最终终于找到了原因，确认为双引号的问题。抱着严谨的态度，再次确认了一下  </p><p><strong>3.执行带双引号的check约束的脚本</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> PD_WEB_FILEUPLOAD_CHUNK <span class="keyword">ADD</span> <span class="keyword">CHECK</span> (<span class="string">"ID"</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> PD_WEB_FILEUPLOAD_CHUNK <span class="keyword">ADD</span> <span class="keyword">CHECK</span> (<span class="string">"FILE_DIR"</span> <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>结果如图所示：<br><img src="/2016/10/08/解决sql脚本导入Oracle重复生成check约束问题/four.jpg" title="navicat"></p><p>靠！居然还是会重复生成！  </p><p>&emsp;&emsp;验证要这里，算是找出了原因。在全量导出的脚本中，创建表的脚本中已经隐含了检查约束，如果再显示的添加检查约束就会重复生成。所以，解决办法为需要手动删除所有显示的检查约束。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;之前一位细心的同事发现产品的全量sql脚本中有一些重复的check约束检查，就像下图这样的&lt;/p&gt;
&lt;img src=&quot;/2016/10/08/解决sql脚本导入Oracle重复生成check约束问题/重复脚本.jpg&quot; title=&quot;重复脚本&quot;&gt;

      
    
    </summary>
    
      <category term="DBMS" scheme="http://muchstudy.com/categories/DBMS/"/>
    
    
  </entry>
  
  <entry>
    <title>《精进》</title>
    <link href="http://muchstudy.com/2016/10/07/%E3%80%8A%E7%B2%BE%E8%BF%9B%E3%80%8B/"/>
    <id>http://muchstudy.com/2016/10/07/《精进》/</id>
    <published>2016-10-07T13:56:26.000Z</published>
    <updated>2016-10-07T14:49:53.265Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/10/07/《精进》/精进.jpg" title="《精进》-采铜"><p>&emsp;&emsp;之所以找到这本书是因为在这之前在知乎看过作者关于学习半衰期理论的回答，受益匪浅。</p><p>&emsp;&emsp;在看本书之前，在知乎上翻了一下对本书的评价，有人认为这是一本浓浓的鸡汤。因为作者之前答案的深度，抱着试试的心态读完的全文。看完之后觉得这本书其实满满的都是学习过程中经验感悟的总结分享。</p><p>&emsp;&emsp;其实，也有看不懂的部分。但原因极有可能是没有亲自熬过鸡汤，无法理解熬制过程的曲折、经验教训与总结，无法感同身受。</p><p>下面是一些书中的摘录，整理如下：</p><ul><li><p>一个人如何对待他的时间，决定了他可以成为什么样的人。</p><blockquote><p>相同年龄的人到目前为止都拥有相同的时间，因为对时间的不同使用而成为了不同的人</p></blockquote></li><li><p>郑重是这样一种态度：不敷衍、不迟疑、不摇摆，认真地聚焦于当下的事情，自觉而专注地投入。</p></li><li><p>多采纳积极过去视角、享乐主义视角和未来视角，并且在三者中取得平衡，少采纳负面作用明显的消极过去视角和宿命论视角。</p></li><li><p>“想想五年后你会干些什么，过什么样的生活？”</p><blockquote><p>这的确是一个十分值得思考的问题，要做一个有目标、有准备的人。</p></blockquote></li><li><p>在分析一件事情值不值得去做、花多少精力去做的时候，可以从两个角度来评估：一是这件事在当下将给“我”带来的收益大小，这个收益可以是心智、情感层面的，也可以是身体、物质层面的，我称之为“收益值”；二是这项收益随时间衰减的速度，我称之为“收益半衰期”，半衰期长的事件，其影响会持续较久。</p></li><li><p>侯世达定律：“实际做事花费的时间总是比预期的要长，即使预期中考虑了侯世达定律。”</p></li><li><p>工作要快，但生活要慢。现代人的日常生活应该有快有慢，而不是一味地和时间竞赛。什么叫有快有慢？用音乐的说法就是节奏。</p></li><li><p>美学家朱光潜先生曾经说过：“做学问，做事业，在人生中都只能算是第二桩事。人生第一桩事是生活。我所谓‘生活’是‘享受’，是‘领略’，是‘培养生机’。假若为学问为事业而忘却生活，那种学问和事业在人生中便失其真正意义与价值。”</p></li><li><p>我们从闲暇中获得放松和满足的程度并不取决于闲暇时间的长度，而是取决于其质量。</p></li><li><p>人在面临选择时，通常会采用“满意原则”，而不是“最优原则”。</p></li><li><p>一个成熟的人，他的标准来自他的内心，而大多数人，却受环境所左右。</p></li><li><p>如果说在零度格局下，盲众看到的是幻象和噪声；一度格局下，逐利者看到的是自己的能力和欲望，那么理念人看到的是这个世界深处的真和美，而至善之人看到的是自我与世界、自我与整个人类之间的纽带。</p></li><li><p>正如伟大的史怀哲所说： “人不能只为他自己而活。我们必须认知所有的生命都是珍贵的，而我们和所有的生命是结合在一起的。这种认知指引了我们心灵和宇宙的关系。”</p></li><li><p>当我们在人生中遇到某个无法摆脱的僵局时，先不妨试试这三步： 1.找出潜意识中的隐含假设； 2.识别隐含假设中的不合理性，进行校正； 3.形成新的更灵活的思维框架，在此基础上思考出“可能选项”并进行尝试。</p></li><li><p>管理学大师彼得·德鲁克认为，大多数的智力劳动者，对自己的工作都有一定的掌控权和自由度，工作并不完全是由组织分配和决定的，而是具有充分的弹性。</p><blockquote><p>比如coding，有时真的看心情…</p></blockquote></li><li><p>而“改造”爱好的一个常见方法，是把对一件事情的“消费型兴趣”升级为“生产型兴趣”。</p></li><li><p>为自己设定更高的目标，就会发现更多更好的选项，做出更加完美的决定。</p></li><li><p>一件看上去繁难的事，只要开始做了，就会变得越来越容易。</p><blockquote><p>深有体会，在面对浩大代码量、复杂逻辑的程序面前，开始写出了第一行代码就成功了一半。</p></blockquote></li><li><p>从一篇短文到一篇长文，从一篇长文到一本书；从单幅的漫画到多格漫画，再从多格漫画到长篇漫画连载。如此一来，你的才能、声誉、影响力和成就感都会慢慢培育出来。</p></li><li><p>“先做好准备再上场”观念的一个致命问题是：我们永远都无法做好“完全”的准备。</p></li><li><p>正如英国作家罗根·史密斯说的：“这个宇宙上的一件古怪的事情是，虽然我们大家意见不一，我们大家却总是正确的。”</p></li><li><p>管理学大师彼得·德鲁克说：“最悲哀的，莫过于用最高效的方式去做错误的事情了。”</p></li><li><p>所以以精益创业的方式去走向人生的成功，便要做到这三点： 1. 克服“过度准备”的惯性，向前一步，把未完成的事情完成； 2. 克服“自我防卫”的心态，乐于接受反面意见并加以慎重地审视； 3. 克服“沉没成本”的固执，有勇气否定并重新构造自己的产品。</p></li><li><p>拿到一个任务后，务必要先找到那个任务的核心思考区间，找到那块硬骨头，尽全力去啃下来，而不是先去做那些周边的打扫性的工作。</p></li><li><p>作为一个读者，你总是从小说的第一句依次看到最后一句。而对一个创作者而言，小说写作的次序存在多种可能性。</p></li><li><p>写一篇好散文要经过三个台阶，一个是音乐的，这时它被构思；一个是建筑的，这时它被搭建起来；最后一个是纺织的，这时它被织成。”</p></li><li><p>牛人总是在前瞻性思维和总结性思维上都非常出色。</p><blockquote><p>正因为有这样的思维才牛</p></blockquote></li><li><p>只有最后能够作用于现实的学习，才是唯一有效的学习。</p><blockquote><p>不同意该说法</p></blockquote></li><li><p>就我自己来说，我的阅读和思考，都是在自己提出的问题的牵引之下、在因问题无法完美解答所形成的焦虑和不安的鞭策之下进行的。对问题的好奇、对答案的渴望，是驱动我学习和探索的主要动力。</p></li><li><p>本质安全是指通过设计等手段使生产设备或生产系统本身具有安全性，即使在误操作或发生故障的情况下也不会造成事故的功能”；</p></li><li><p>伟大的艺术作品，常常有很深厚的内涵和很精巧细微的技法，不论你在哪个或深或浅的层次上解读它，它都能呈现出美妙的意味，但如果你不做一番细心的努力和挖掘，就只能尝到最表层的那一小部分味道。</p></li><li><p>不只要去寻结论，还要去寻过程</p></li><li><p>一个艺术作品要能卖出大价钱，关键是“通过作品，创造出世界艺术史的脉络”，也就是说，“从该作品之后，是否开创了新的历史”。</p></li><li><p>一幅画作的价值，不在于它的线条、颜色、构图，而在于其背后所展现出的“观念”，艺术品的价值就是观念的价值。</p><blockquote><p>耳目一新</p></blockquote></li><li><p>价值体现在观念的更新</p></li><li><p>而加上这些副词以后，不仅信息量没有增加，还使读者原本可以有的对人物表情的想象，塌缩成了一个寻常的词汇。</p></li><li><p>适度的简洁，意味着更丰富的内涵</p><blockquote><p>需谨记在心</p></blockquote></li><li><p>很多研究思维和创意的学者认为，先发散后收敛的顺序是最为合理的</p></li><li><p>努力不是一场意志力的较量，而是一种需要学习的策略。</p></li><li><p>知乎名言“以大多数人的努力程度之低，根本轮不到拼天赋。”</p></li><li><p>身为音乐家，我一辈子都在追求完美，可完美总是在躲着我。所以，我有责任一次次尝试下去。</p></li><li><p>挑战是设计出来的</p></li><li><p>练大脑就像练肌肉，得科学“加量”才行。</p></li><li><p>如果我能长期坚持去做一件事，一定是这件事带给我的丰盈感和满足感超过了我的所有付出，一定是这件事日日夜夜萦绕在我的心头让我欲罢不能，一定是这件事唤起了我内心深处最强烈的兴趣。也就是说，赐予我力量的，是激情的驱动，而不是意志力的鞭策。</p></li><li><p>了解不够导致兴趣不足，而兴趣不足又无法加深对它的了解。由于了解不足而判断失误，而判断失误又妨碍了深入了解。</p></li><li><p>著名书法家启功就批评过种种学习书法的教条，认为它们误事，害人。比如毛笔怎么拿，怎么拿是对的、怎么拿是错的，有严格的标准吗？没有的。又如临什么帖，学什么体，用什么纸，有什么一定之规吗？也没有的。他直言道：“写字为什么？我把字写出来，我写的字我认得，给人看人家认得，让旁人看说写得好看，这不就得了吗！你还要怎么样才算合‘法’呢？”</p><blockquote><p>《金刚经》中有这么一段话：“一切有为法。如梦幻泡影。如露亦如电。应作如是观。”</p></blockquote></li><li><p>每一个成功者，都是唯一的 创造成功，而不是复制成功</p></li><li><p>因为你的存在，这个多元的世界又增加了一种新的可能性。</p></li><li><p>学霸选择依从，学渣选择逃避，但有一点又非常相似，就是他们都没有培养出学习的自主性，并没有回答好自己到底想学什么、怎么学好的问题。很多人参加完高考，就稀里糊涂地由着各种想象选择了一个专业，没有机会和能力来想到底适不适合，然后因为路径依赖，便将就着学下去，丧失了更好地发展自己的机会。</p></li><li><p>如果你总是在某个专业的壁垒里打转，视野就会变得越来越狭窄，即便本领域的提升也会越来越艰难，很容易就碰触到天花板。</p></li><li><p>在新思想或新技术刚刚开始兴起无人问津之时就投入进去，成为某一个新知识领域的先驱，实现知识能力的“低买高卖”。</p></li><li><p>在现实世界中思考理论问题，在理论世界中思考现实问题。</p></li><li><p>很多学者认为最好的竞争策略并不是教你如何跟其他人竞争，而是开拓出一条独一无二、罕有竞争者的道路。</p><blockquote><p>何其之难…</p></blockquote></li><li><p>当缺少可以让内心安稳下来的独立标准时，每个人只能随波逐流。</p><blockquote><p>内心的安稳来自于精神的富足</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2016/10/07/《精进》/精进.jpg&quot; title=&quot;《精进》-采铜&quot;&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;之所以找到这本书是因为在这之前在知乎看过作者关于学习半衰期理论的回答，受益匪浅。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在看本书之前，在知乎上翻了
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
      <category term="读书笔记" scheme="http://muchstudy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Excel导入导出</title>
    <link href="http://muchstudy.com/2016/09/24/Excel%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
    <id>http://muchstudy.com/2016/09/24/Excel导入导出/</id>
    <published>2016-09-24T12:56:38.000Z</published>
    <updated>2016-11-18T06:44:34.330Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>&emsp;&emsp;在后台管理系统中，常遇到Excel导入导出的需求，整理了如下两个工具类。</p></blockquote><h3 id="一、导入"><a href="#一、导入" class="headerlink" title="一、导入"></a>一、导入</h3><h4 id="导入工具类"><a href="#导入工具类" class="headerlink" title="导入工具类"></a>导入工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PushbackInputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.POIXMLDocument;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.exceptions.InvalidFormatException;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.openxml4j.opc.OPCPackage;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.poifs.filesystem.POIFSFileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.DateUtil;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Row;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Workbook;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> ch.qos.logback.classic.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelToEntityList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Logger log = (Logger) LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"><span class="keyword">private</span> BeanStorage storage = <span class="keyword">new</span> BeanStorage();</span><br><span class="line"><span class="keyword">private</span> SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"><span class="keyword">private</span> StringBuffer error = <span class="keyword">new</span> StringBuffer(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包含headMapping信息已经前端传过来的扩展信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entity  一行excel内容要转换为何种对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> excel  excel输入流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> titleToAttrkey为excel的中文title，value为该中文title对于的entity属性名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InstantiationException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvalidFormatException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span>  &lt;T&gt; <span class="function">ArrayList&lt;T&gt; <span class="title">transform</span><span class="params">(Class&lt;?&gt; entity,InputStream excel,Map&lt;String,String&gt; titleToAttr)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, InvalidFormatException</span>&#123;</span><br><span class="line">ArrayList&lt;T&gt; result = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">Workbook book = create(excel);</span><br><span class="line">Sheet sheet = book.getSheetAt(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> rowCount = sheet.getLastRowNum();</span><br><span class="line">    <span class="keyword">if</span>(rowCount &lt; <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//加载标题栏数据,以此和headMapping对应</span></span><br><span class="line">    Map&lt;Integer, String&gt; headTitle = loadHeadTitle(sheet);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=rowCount;i++)&#123;</span><br><span class="line">    Row row = sheet.getRow(i);</span><br><span class="line">    <span class="comment">//空行跳过</span></span><br><span class="line">    <span class="keyword">if</span>(row==<span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">int</span> cellCount = row.getLastCellNum();</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">T instance = (T) entity.newInstance();</span><br><span class="line"><span class="keyword">int</span> col = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(;col&lt;cellCount;col++)&#123;</span><br><span class="line">String cellValue = getCellValue(row.getCell(col));</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span>!=cellValue)&#123;</span><br><span class="line"><span class="keyword">this</span>.setEntity(entity, instance,titleToAttr.get(headTitle.get(col)), cellValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">result.add(instance);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//excel.close();</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">this</span>.error.append(<span class="string">"第"</span>+ (i+<span class="number">1</span>) +<span class="string">"行，"</span>+ headTitle.get(col)+<span class="string">"字段，数据错误，跳过！"</span>).append(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">log.error(<span class="string">"第"</span>+ (i+<span class="number">1</span>) +<span class="string">"行，"</span>+ headTitle.get(col)+<span class="string">"字段，数据错误，跳过！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    excel.close();</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载Excel的标题栏</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sheet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回列序号和对于的标题名称Map</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Map&lt;Integer,String&gt; <span class="title">loadHeadTitle</span><span class="params">(Sheet sheet)</span></span>&#123;</span><br><span class="line">Map&lt;Integer,String&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line">Row row = sheet.getRow(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> cellCount= row.getLastCellNum();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cellCount; i++)&#123;</span><br><span class="line">String value = row.getCell(i).getStringCellValue();</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span> == value)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Excel导入：标题栏不能为空！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">map.put(i, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取表格列的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cell</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getCellValue</span><span class="params">(Cell cell)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">null</span>==cell)&#123;<span class="keyword">return</span> <span class="string">""</span>;&#125;</span><br><span class="line">String value = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">switch</span> (cell.getCellType())&#123;</span><br><span class="line"><span class="keyword">case</span> XSSFCell.CELL_TYPE_BOOLEAN:</span><br><span class="line">value = String.valueOf(cell.getBooleanCellValue());</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> XSSFCell.CELL_TYPE_NUMERIC:</span><br><span class="line"><span class="comment">// 判断当前的cell是否为Date</span></span><br><span class="line"><span class="keyword">if</span> (DateUtil.isCellDateFormatted(cell))&#123;</span><br><span class="line">value = dateFormat.format(cell.getDateCellValue());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">value = String.valueOf((<span class="keyword">long</span>) cell.getNumericCellValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> XSSFCell.CELL_TYPE_STRING:</span><br><span class="line">value = cell.getStringCellValue();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> XSSFCell.CELL_TYPE_FORMULA:</span><br><span class="line">log.debug(<span class="string">"不支持函数！"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setEntity</span><span class="params">(Class&lt;?&gt; clazz, T instance, String pro, String value)</span> <span class="keyword">throws</span> SecurityException, NoSuchMethodException, Exception</span>&#123;</span><br><span class="line">String innerPro = <span class="keyword">null</span>;</span><br><span class="line">String outterPro = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (pro.contains(<span class="string">"."</span>))&#123;</span><br><span class="line">String[] pros = pro.split(<span class="string">"\\."</span>);</span><br><span class="line">outterPro = pros[<span class="number">0</span>];</span><br><span class="line">innerPro = pros[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 将成员变量的类型存储到仓库中</span></span><br><span class="line">storage.storeClass(instance.hashCode() + outterPro, clazz.getDeclaredMethod(<span class="keyword">this</span>.initGetMethod(outterPro), <span class="keyword">null</span>).getReturnType());</span><br><span class="line">&#125;</span><br><span class="line">String getMethod = <span class="keyword">this</span>.initGetMethod(outterPro!=<span class="keyword">null</span>?outterPro:pro);</span><br><span class="line">Class&lt;?&gt; type = clazz.getDeclaredMethod(getMethod, <span class="keyword">null</span>).getReturnType();</span><br><span class="line">Method method = clazz.getMethod(<span class="keyword">this</span>.initSetMethod(outterPro!=<span class="keyword">null</span>?outterPro:pro), type);</span><br><span class="line"><span class="keyword">if</span> (type == String.class)&#123;</span><br><span class="line">method.invoke(instance, value);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="keyword">int</span>.class || type == Integer.class)&#123;</span><br><span class="line">method.invoke(instance, Integer.parseInt(<span class="string">""</span>.equals(value) ? <span class="string">"0"</span> : value));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="keyword">long</span>.class || type == Long.class)&#123;</span><br><span class="line">method.invoke(instance, Long.parseLong(<span class="string">""</span>.equals(value) ? <span class="string">"0"</span> : value));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="keyword">float</span>.class || type == Float.class)&#123;</span><br><span class="line">method.invoke(instance, Float.parseFloat(<span class="string">""</span>.equals(value) ? <span class="string">"0"</span> : value));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="keyword">double</span>.class || type == Double.class)&#123;</span><br><span class="line">method.invoke(instance, Double.parseDouble(<span class="string">""</span>.equals(value) ? <span class="string">"0"</span> : value));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (type == Date.class)&#123;</span><br><span class="line">method.invoke(instance, dateFormat.parse(value));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="keyword">boolean</span>.class|| type == Boolean.class)&#123;</span><br><span class="line">method.invoke(instance, Boolean.parseBoolean(<span class="string">""</span>.equals(value) ? <span class="string">"false"</span> : value));</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="keyword">byte</span>.class|| type == Byte.class)&#123;</span><br><span class="line">method.invoke(instance, Byte.parseByte(value));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 引用类型数据</span></span><br><span class="line">Object ins = storage.getInstance(instance.hashCode() + outterPro);</span><br><span class="line"><span class="keyword">this</span>.setEntity(ins.getClass(), ins, innerPro, value);</span><br><span class="line">method.invoke(instance, ins);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">initSetMethod</span><span class="params">(String field)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"set"</span> + field.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + field.substring(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">initGetMethod</span><span class="params">(String field)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"get"</span> + field.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + field.substring(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true 存在错误，false 不存在错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasError</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> error.capacity() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">getError</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储bean中的bean成员变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanStorage</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, Object&gt; instances = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">storeClass</span><span class="params">(String key, Class&lt;?&gt; clazz)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!instances.containsKey(key))&#123;</span><br><span class="line">instances.put(key, clazz.newInstance());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> instances.get(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2003、2007兼容处理</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  Workbook <span class="title">create</span><span class="params">(InputStream inp)</span> <span class="keyword">throws</span> IOException,InvalidFormatException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!inp.markSupported()) &#123;</span><br><span class="line">        inp = <span class="keyword">new</span> PushbackInputStream(inp, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (POIFSFileSystem.hasPOIFSHeader(inp)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HSSFWorkbook(inp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (POIXMLDocument.hasOOXMLHeader(inp)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> XSSFWorkbook(OPCPackage.open(inp));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"你的excel版本目前poi解析不了"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前端部分提交excel文件与该对应关系到后端</span></span><br><span class="line"><span class="keyword">var</span> mapping = &#123;</span><br><span class="line">    <span class="string">"EntityClassName"</span>:<span class="string">"com.demo.entity.User"</span>,</span><br><span class="line">    <span class="string">"用户编号"</span>:<span class="string">"userCode"</span>,<span class="string">"用户名称"</span>:<span class="string">"userName"</span>,</span><br><span class="line">    <span class="string">"电话"</span>:<span class="string">"phone"</span>,<span class="string">"地址"</span>:<span class="string">"address"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*后端部分在servlet中接收excel与excel头与entity属性的对应关系*/</span></span><br><span class="line"><span class="comment">//接收对应关系参数</span></span><br><span class="line">HashMap&lt;String, String&gt; param = JSON.parseObject(URLDecoder.decode(request.getParameter(<span class="string">"mapping"</span>), <span class="string">"utf-8"</span>), HashMap.class);</span><br><span class="line">ExcelToEntityList excel = <span class="keyword">new</span> ExcelToEntityList();</span><br><span class="line"><span class="comment">//把excel文件内容转换为List对象</span></span><br><span class="line">ArrayList&lt;?&gt; list = excel.transform(Class.forName(param.get(<span class="string">"EntityClassName"</span>)), request.getPart(<span class="string">"file"</span>).getInputStream(), param);</span><br></pre></td></tr></table></figure><h3 id="二、导出"><a href="#二、导出" class="headerlink" title="二、导出"></a>二、导出</h3><h4 id="导入工具类-1"><a href="#导入工具类-1" class="headerlink" title="导入工具类"></a>导入工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFCell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFClientAnchor;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFComment;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFFont;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFPatriarch;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFRichTextString;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFRow;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFSheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.hssf.util.HSSFColor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EntityListToExcel</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> StringBuffer error = <span class="keyword">new</span> StringBuffer(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将实体类列表entityList转换成excel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> param 包含headMapping信息，key为属性名，value为列名&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entityList</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> excel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchMethodException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SecurityException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvocationTargetException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">transform</span><span class="params">(Map&lt;String, String&gt; param, List&lt;T&gt; entityList,OutputStream excel)</span> <span class="keyword">throws</span> NoSuchMethodException,</span></span><br><span class="line"><span class="function">SecurityException, IllegalAccessException,</span></span><br><span class="line"><span class="function">IllegalArgumentException, InvocationTargetException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 声明一个工作薄</span></span><br><span class="line">HSSFWorkbook workbook = <span class="keyword">new</span> HSSFWorkbook();</span><br><span class="line"><span class="comment">// 生成一个表格</span></span><br><span class="line">HSSFSheet sheet = workbook.createSheet();</span><br><span class="line"><span class="comment">// 设置表格默认列宽度为15个字节</span></span><br><span class="line">sheet.setDefaultColumnWidth(<span class="number">15</span>);</span><br><span class="line"><span class="comment">// 声明一个画图的顶级管理器</span></span><br><span class="line">HSSFPatriarch patriarch = sheet.createDrawingPatriarch();</span><br><span class="line"><span class="comment">// 定义注释的大小和位置,详见文档</span></span><br><span class="line">HSSFComment comment = patriarch.createComment(<span class="keyword">new</span> HSSFClientAnchor(<span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, (<span class="keyword">short</span>) <span class="number">4</span>, <span class="number">2</span>, (<span class="keyword">short</span>) <span class="number">6</span>, <span class="number">5</span>));</span><br><span class="line"><span class="comment">// 设置注释内容</span></span><br><span class="line">comment.setString(<span class="keyword">new</span> HSSFRichTextString(<span class="string">"可以在POI中添加注释！"</span>));</span><br><span class="line"><span class="comment">// 设置注释作者，当鼠标移动到单元格上是可以在状态栏中看到该内容.</span></span><br><span class="line">comment.setAuthor(<span class="string">"admin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 产生表格标题行</span></span><br><span class="line">HSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">List&lt;String&gt; proList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">HSSFFont blueFont = workbook.createFont();</span><br><span class="line">blueFont.setColor(HSSFColor.BLUE.index);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : param.entrySet()) &#123;</span><br><span class="line">HSSFCell cell = row.createCell(i);</span><br><span class="line">HSSFRichTextString text = <span class="keyword">new</span> HSSFRichTextString(entry.getValue());</span><br><span class="line">text.applyFont(blueFont);</span><br><span class="line">cell.setCellValue(text);</span><br><span class="line">proList.add(entry.getKey());</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 遍历集合数据，产生数据行</span></span><br><span class="line">Iterator&lt;T&gt; it = entityList.iterator();</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">index++;</span><br><span class="line">row = sheet.createRow(index);</span><br><span class="line">T t = (T) it.next();</span><br><span class="line"><span class="comment">// 利用反射，根据javabean属性的先后顺序，动态调用getXxx()方法得到属性值</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; proList.size(); i++) &#123;</span><br><span class="line">HSSFCell cell = row.createCell(i);</span><br><span class="line">String propertyName = proList.get(i);</span><br><span class="line">String textValue = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">textValue = <span class="keyword">this</span>.getPropertyValue(t, propertyName);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">this</span>.error.append(<span class="string">"第"</span>).append(index+<span class="number">1</span>).append(<span class="string">"行，列名："</span>).append(param.get(propertyName)).append(<span class="string">"，字段："</span>).append(propertyName).append(<span class="string">"，数据错误，跳过！"</span>).append(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 利用正则表达式判断textValue是否全部由数字组成</span></span><br><span class="line"><span class="keyword">if</span> (textValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">Pattern p = Pattern.compile(<span class="string">"^//d+(//.//d+)?$"</span>);</span><br><span class="line">Matcher matcher = p.matcher(textValue);</span><br><span class="line"><span class="keyword">if</span> (matcher.matches()) &#123;</span><br><span class="line"><span class="comment">// 是数字当作double处理</span></span><br><span class="line">cell.setCellValue(Double.parseDouble(textValue));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">HSSFRichTextString richString = <span class="keyword">new</span> HSSFRichTextString(</span><br><span class="line">textValue);</span><br><span class="line">cell.setCellValue(richString);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">workbook.write(excel);</span><br><span class="line">workbook.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取实体instance的propertyName属性的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> propertyName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchMethodException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SecurityException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalAccessException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> InvocationTargetException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">String <span class="title">getPropertyValue</span><span class="params">(T instance, String propertyName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> NoSuchMethodException, SecurityException,</span></span><br><span class="line"><span class="function">IllegalAccessException, IllegalArgumentException,</span></span><br><span class="line"><span class="function">InvocationTargetException </span>&#123;</span><br><span class="line"></span><br><span class="line">String getMethodName = <span class="keyword">this</span>.initGetMethod(propertyName);</span><br><span class="line">Class&lt;?&gt; tCls = instance.getClass();</span><br><span class="line">Method getMethod = <span class="keyword">null</span>;</span><br><span class="line">Object value = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">getMethod = tCls.getMethod(getMethodName, <span class="keyword">new</span> Class[] &#123;&#125;);</span><br><span class="line">value = getMethod.invoke(instance, <span class="keyword">new</span> Object[] &#123;&#125;);</span><br><span class="line"></span><br><span class="line">String returnType = getMethod.getReturnType().getName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断值的类型后进行强制类型转换</span></span><br><span class="line">SimpleDateFormat dateFormat=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">String textValue = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"java.util.Date"</span>.equals(returnType)) &#123;</span><br><span class="line">textValue = dateFormat.format(value);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">textValue = value.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> textValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回fiel属性的getXXX方法字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">initGetMethod</span><span class="params">(String field)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"get"</span> + field.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + field.substring(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true 存在错误，false 不存在错误</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasError</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> error.capacity() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获得错误信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">getError</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> error;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Servlet中设置返回类型</span></span><br><span class="line">response.setContentType(<span class="string">"application/vnd.ms-excel;charset=UTF-8"</span>);</span><br><span class="line"><span class="comment">//这里也可以通过前端传过来</span></span><br><span class="line">LinkedHashMap&lt;String, String&gt; header = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">header.put(<span class="string">"userCode"</span>, <span class="string">"用户编码"</span>);</span><br><span class="line">header.put(<span class="string">"userName"</span>, <span class="string">"用户名"</span>);</span><br><span class="line">header.put(<span class="string">"phone"</span>, <span class="string">"电话"</span>);</span><br><span class="line">header.put(<span class="string">"address"</span>, <span class="string">"地址"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据导出为excel</span></span><br><span class="line">EntityListToExcel excel =  = <span class="keyword">new</span> EntityListToExcel();</span><br><span class="line"><span class="comment">//这里的entityList为要转换为excel行的数据列表</span></span><br><span class="line">excel.transform(header, entityList, response.getOutputStream());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在后台管理系统中，常遇到Excel导入导出的需求，整理了如下两个工具类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、导入&quot;&gt;&lt;a href=&quot;#一、导入&quot; class=&quot;headerlink&quot; title=&quot;一
      
    
    </summary>
    
      <category term="Java" scheme="http://muchstudy.com/categories/Java/"/>
    
    
      <category term="工具类" scheme="http://muchstudy.com/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
      <category term="POI" scheme="http://muchstudy.com/tags/POI/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="http://muchstudy.com/2016/09/11/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://muchstudy.com/2016/09/11/排序算法/</id>
    <published>2016-09-11T06:53:39.000Z</published>
    <updated>2016-09-11T08:56:55.672Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近需要写一个排序算法，很久没写发现有些生疏了，抽时间用JavaScript实现了几种常用的排序算法，以备不时之需。</p></blockquote><h3 id="一、快速排序"><a href="#一、快速排序" class="headerlink" title="一、快速排序"></a>一、快速排序</h3><blockquote><p>步骤：</p><ol><li>在数据集之中，选择一个元素作为”基准”（pivot）。</li><li>所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。</li><li>对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快速排序</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> * @returns Array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> arr   = [<span class="number">55</span>,<span class="number">1</span>,<span class="number">22</span>,<span class="number">77</span>,<span class="number">99</span>,<span class="number">11</span>,<span class="number">88</span>,<span class="number">33</span>,<span class="number">66</span>,<span class="number">44</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//递推跳出</span></span><br><span class="line">    <span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> arr; &#125;</span><br><span class="line">    <span class="comment">//首先定义“基准”左右数据的数组</span></span><br><span class="line">    <span class="keyword">var</span> left    = [];</span><br><span class="line">    <span class="keyword">var</span> right   = [];</span><br><span class="line">    <span class="comment">//选择第一个元素作为基准元素(基准元素可以为任意一个元素)</span></span><br><span class="line">    <span class="keyword">var</span> pivot   = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> len     = arr.length;</span><br><span class="line">    <span class="comment">//由于取了第一个元素，所以从第二个元素开始循环</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> item = arr[i];</span><br><span class="line">        <span class="comment">//大于基准的放右边，小于基准的放左边</span></span><br><span class="line">        item&gt;pivot ? right.push(item) : left.push(item);</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归左右数组</span></span><br><span class="line">    <span class="keyword">return</span> quickSort(left).concat([pivot],quickSort(right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(quickSort(arr));</span><br><span class="line"><span class="built_in">console</span>.log(count);  <span class="comment">//21</span></span><br></pre></td></tr></table></figure><h3 id="二、插入排序"><a href="#二、插入排序" class="headerlink" title="二、插入排序"></a>二、插入排序</h3><blockquote><p>步骤：</p><ol><li>从第一个元素开始，该元素可以认为已经被排序</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li><li>如果被扫描的元素（已排序）大于新元素，将该元素后移一位</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li><li>将新元素插入到该位置后</li><li>重复步骤2~5</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> * @returns Array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> arr   = [<span class="number">55</span>,<span class="number">1</span>,<span class="number">22</span>,<span class="number">77</span>,<span class="number">99</span>,<span class="number">11</span>,<span class="number">88</span>,<span class="number">33</span>,<span class="number">66</span>,<span class="number">44</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sorted  = [];</span><br><span class="line">    <span class="comment">//把数组中的第一个元素定义为已排序元素</span></span><br><span class="line">    sorted.push(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="comment">//不断取未排序的元素插入到已排序元素中</span></span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i= <span class="number">1</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> item        = arr[i];</span><br><span class="line">        <span class="comment">//在已经排序的元素序列中从后向前扫描</span></span><br><span class="line">        <span class="keyword">var</span> flag    = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">var</span> j       = sorted.length<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(j;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line">            <span class="comment">//直到比自己小的元素，就把自己放在该元素后面</span></span><br><span class="line">            <span class="keyword">if</span>(item&gt;sorted[j])&#123;</span><br><span class="line">                <span class="comment">//插入到元素之后</span></span><br><span class="line">                sorted.splice(j+<span class="number">1</span>,<span class="number">0</span>,item);</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//自己最小，直接放到第一个位置</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;sorted.splice(<span class="number">0</span>,<span class="number">0</span>,item);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sorted;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(insertSort(arr));</span><br><span class="line"><span class="built_in">console</span>.log(count);  <span class="comment">//19</span></span><br></pre></td></tr></table></figure><p>排序演示：<br><img src="/2016/09/11/排序算法/插入排序.gif" title="插入排序"></p><h3 id="三、冒泡排序"><a href="#三、冒泡排序" class="headerlink" title="三、冒泡排序"></a>三、冒泡排序</h3><blockquote><p>步骤：</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对第0个到第n-1个数据做同样的工作。这时，最大的数就“浮”到了数组最后的位置上。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> * @param arr</span></span><br><span class="line"><span class="comment"> * @returns Array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> arr   = [<span class="number">55</span>,<span class="number">1</span>,<span class="number">22</span>,<span class="number">77</span>,<span class="number">99</span>,<span class="number">11</span>,<span class="number">88</span>,<span class="number">33</span>,<span class="number">66</span>,<span class="number">44</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">var</span> temp= [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="comment">//每一次的最后结果都是最大的元素放到了最后</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;len-i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                temp    = arr[j];</span><br><span class="line">                arr[j]  = arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>]= temp;</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bubbleSort(arr));</span><br><span class="line"><span class="built_in">console</span>.log(count);  <span class="comment">//45</span></span><br></pre></td></tr></table></figure><h3 id="四、时间复杂度"><a href="#四、时间复杂度" class="headerlink" title="四、时间复杂度"></a>四、时间复杂度</h3><blockquote><p>来自于<a href="http://wuchong.me/blog/2014/02/09/algorithm-sort-summary/" target="_blank" rel="noopener">这里<a></a></a></p></blockquote><img src="/2016/09/11/排序算法/时间复杂度.jpg" title="时间复杂度">]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近需要写一个排序算法，很久没写发现有些生疏了，抽时间用JavaScript实现了几种常用的排序算法，以备不时之需。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、快速排序&quot;&gt;&lt;a href=&quot;#一、快速排序&quot; class=&quot;header
      
    
    </summary>
    
      <category term="算法" scheme="http://muchstudy.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="排序算法" scheme="http://muchstudy.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>《黄金时代》-王小波</title>
    <link href="http://muchstudy.com/2016/09/11/%E3%80%8A%E9%BB%84%E9%87%91%E6%97%B6%E4%BB%A3%E3%80%8B-%E7%8E%8B%E5%B0%8F%E6%B3%A2/"/>
    <id>http://muchstudy.com/2016/09/11/《黄金时代》-王小波/</id>
    <published>2016-09-11T02:26:26.000Z</published>
    <updated>2016-09-11T04:17:20.885Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/09/11/《黄金时代》-王小波/黄金时代.jpg" title="《黄金时代》-王小波"><p>&emsp;&emsp;在这之前没有看过王小波的书，只闻其名。看过这本书之后，的确眼前一亮，文章原来还能这么写！<br>&emsp;&emsp;这本书是由几篇文章组合而成，但是每篇文章的都有一个叫“王二”的主人公。<br>&emsp;&emsp;另外，从某个角度看，这还是一本小黄书，不乏血液喷张的内容，笑点还很多。但深思之后就会发现那是一个混乱、无奈、扭曲的时代。一想到这，就怎么也笑不起来。  </p><p>下面放一些看书过程中的一些摘录整理：  </p><ul><li><p>那一天我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。后来我才知道，生活就是个缓慢受槌的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了槌的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也捶不了我。</p><blockquote><p>这句话应该是本书流传得最广的一句话，年轻时都有一段青葱岁月，然而始终会有挨捶地一天。</p></blockquote></li><li><p>我坐在小屋里，听着满山树叶哗哗响，终于到了物我两忘的境界。</p><blockquote><p>要达到<code>物我两忘</code>的境界很难</p></blockquote></li><li><p>仿佛在不久之前，我还是初一的学生。放学时在校门口和同学们打书包仗。我的书包打在人身上一声闷响，把人家摔出一米多远。原来我的书包里不光有书，还有一整块板砖。  </p><blockquote><p>从这句话就能看出整本书的风格了</p></blockquote></li><li><p>你一天天老下去，牛皮一天天紧起来。</p><blockquote><p>慢慢就到了挨捶地时候</p></blockquote></li><li><p>眼前就是罗得岛，我就在这里跳跃——我这么做什么都不为，这就是存在本身。</p><blockquote><p>一个哲学问题</p></blockquote></li><li><p>我要抱着草长马发情的伟大真诚去做一切事，而不是在人前羞羞答答地表演。在我看来，人都是为了要表演，失去了自己的存在。我说了很多，可一样也没照办。这就是我不肯想起那篇论文的原因。</p><blockquote><p>又一个我要成为谁的问题。</p></blockquote></li><li><p>忽然之间心底涌起强烈的渴望，前所未有：我要爱、要生活，把眼前的一世当做一百世一样。这里的道理很明白：我思故我在，既然我存在，就不能装作不存在。无论如何，我要对自己负起责任。</p><blockquote><p>生而为人，是一件很幸运的事情</p></blockquote></li><li><p>她尖叫一声，拿被子蒙上头，就在床上游仰泳。</p><blockquote><p>形象生动！</p></blockquote></li><li><p>人生是一条寂寞的路，要有一本有趣的书来消磨旅途。</p><blockquote><p>这本书就是”自己”</p></blockquote></li><li><p>我向来不怕得罪朋友，因为既是朋友。就不怕得罪，不能得罪的就不是朋友，这是我的一贯作风。由这一点你也可猜出，我的朋友为什么这么少。</p></li><li><p>他一定能体会到死亡的惨烈，也一定能体会死去时那种空前绝后的快感。</p><blockquote><p>大部分人往往不是“快感”，而是“恐惧”</p></blockquote></li><li><p>在此之前首先要解释一下什么叫似水流年。普鲁斯特写了一本书，谈到自己身上发生过的事。这些事看起来就如一个人中了邪躺在河底，眼看潺潺流水，粼粼流光，落叶，浮木，空玻璃瓶，一样一样从身上流过去。这个书名怎么译，翻译家大费周章。最近的译法是追忆似水年华。听上去普鲁斯特写书时已经死了多时，又诈了尸。</p></li><li><p>似水流年是一个人所有的一切，只有这个东西，才真正归你所有。其余的一切，都是片刻的欢娱和不幸，转眼间就已跑到那似水流年里去了。我所认识的人，都不珍视自己的似水流年。他们甚至不知道，自己还有这么一件东西，所以一个个像丢了魂一样。</p></li><li><p>人就是四十岁时最难过。那时候脑子很清楚，可以发现自己在变老。以后就糊里糊涂，不知老之将至。</p></li><li><p>叔本华说：人在四十岁之前，过得很慢，过了四十岁，过得就快了。</p></li><li><p>我一直在干这件事，可是线条说，我写的小说中只有好的事，回避了坏的事，不是似水流年的全貌，算不得直笔。如果真的去写似水流年，就必须把一切事都写出来，包括乍看不可置信的事，不敢写出这样的事情，就是媚俗。比如不敢写这样的事，就是媚俗。</p></li><li><p>小时候和王二一起玩的孩子各有各的毛病，有人喜欢掐别人的脖子，有的喜欢朝别人裆下踢，不知他们的毛病都好了没有。</p></li><li><p>我后来到美国留学时，给×教授编软件，文件名总叫“caonima”，caonima.1，caonima.2，等等。但是他总把第一个音节念成“考”，给我打电话说：考你妈一可以了，考你妈二还得往短里改。我就纠正他道：不是考你妈，操你妈。我们一共是四个研究生给他编程序，人人都恨他。这是因为按行算钱，他又不让编长。这种情形就叫做受压迫。毛主席教导我们说，有压迫就有反抗。所以就考你妈，就射精，就吐吐沫。</p></li><li><p>我们生活在漫漫寒夜，人生好似长途旅行。仰望天空寻找方向，天际却无引路的明星！</p></li><li><p>我觉得自己是个不会种地的农民，总是赶不上节气。</p><blockquote><p>这种体会很难受</p></blockquote></li><li><p>于是她就揉起眼睛来，那架势活像是猫洗脸；</p><blockquote><p>形象生动！</p></blockquote></li><li><p>走进了寂寞里，你就变成了黑夜里的巨灵神，想干啥就干啥，效率非常之高。你可以夜以继日地干任何事，不怕别人打断，直到事情干成。但是寂寞中也有让人不能忍受的时刻，那就是想说话时没有人听。</p></li><li><p>我以为自己的本分就是把小说写得尽量好看，而不应在作品里夹杂某些刻意说教。我的写作态度是写一些作品给读小说的人看，而不是去教诲不良的青年。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2016/09/11/《黄金时代》-王小波/黄金时代.jpg&quot; title=&quot;《黄金时代》-王小波&quot;&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;在这之前没有看过王小波的书，只闻其名。看过这本书之后，的确眼前一亮，文章原来还能这么写！&lt;br&gt;&amp;emsp;&amp;emsp;这本
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
      <category term="读书笔记" scheme="http://muchstudy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>安全算法梳理</title>
    <link href="http://muchstudy.com/2016/09/04/%E5%AE%89%E5%85%A8%E7%AE%97%E6%B3%95%E6%A2%B3%E7%90%86/"/>
    <id>http://muchstudy.com/2016/09/04/安全算法梳理/</id>
    <published>2016-09-04T10:16:52.000Z</published>
    <updated>2016-09-04T16:41:36.849Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>&emsp;&emsp;经常见到RSA、MD5、SHA系列算法，另外还有数字摘要、数字签名、数字证书等名词，以及对称加密与非对称加密。他们之间到底是什么关系呢？下面就通过这篇文章来梳理一下。</p></blockquote><h3 id="一、加密算法"><a href="#一、加密算法" class="headerlink" title="一、加密算法"></a>一、加密算法</h3><p>&emsp;&emsp;加密算法，简而言之就是一种能够把原始内容加密，然后再解密获得原始内容的算法。</p><img src="/2016/09/04/安全算法梳理/加密与解密.jpg" title="加密与解密"><p><a href="http://baike.baidu.com/view/155969.htm" target="_blank" rel="noopener">加密算法</a>可以划分为如下两类：</p><h4 id="1-对称加密"><a href="#1-对称加密" class="headerlink" title="1.对称加密"></a>1.对称加密</h4><p>&emsp;&emsp;对称加密可以理解为加密与解密都使用同一套算法（即密钥）。</p><img src="/2016/09/04/安全算法梳理/循环移位算法.jpg" title="循环移位算法"><p>&emsp;&emsp;上图是一个经典对称加密算法。采用字母移位的办法对原始字符串进行转换，解密时再根据之前的移位,转换为原始字符串。可以根据此种算法，设计一个密码机，输入移位n，自动进行编码与解码。<br>&emsp;&emsp;在谍战电视剧中经常出现你争我抢的密码本，加密与解密双方使用同一个密码本对要传递的内容进行加解密，这也是一种对称加密算法。<br>&emsp;&emsp;对于对称加密在实际使用中的问题，可以通过如下样例来说明。<br>&emsp;&emsp;假如淘宝网的登录密码传输部分使用的是对称加密算法。此时，张三、李四、还有王五同学需要访问淘宝。那么，服务器就需要生成3个不同的密钥，比如张三的密钥为移5位，李四的密钥为移6位。如果全部都用一个密钥，显然张三用自己的密钥可以解密其它人加密后的密码。对于服务器来讲，有多少个用户就得维护多少组密钥，这样做显然是不合理的。  </p><blockquote><ol><li>常用的对称加密算法有：DES、3DES、TDEA、Blowfish、RC2、RC4、RC5、IDEA、SKIPJACK、AES等。  </li><li>百度百科：<a href="http://baike.baidu.com/link?url=0qjwcCKyQIEi1v9AQFWCZgM0xC-rB8D4xNwEg1zxBMywtgwILONBk4ex0l2CQ2HcnaZi5fAy5YfXxP4FpLz5nK" target="_blank" rel="noopener">对称加密</a></li></ol></blockquote><h4 id="2-非对称加密"><a href="#2-非对称加密" class="headerlink" title="2.非对称加密"></a>2.非对称加密</h4><p>&emsp;&emsp;针对于对称加密存在的问题，使用非对称加密即可完美的解决。  </p><img src="/2016/09/04/安全算法梳理/对称加密与非对称加密.jpg" title="对称加密与非对称加密"><p>&emsp;&emsp;由上图可以看出，左侧的对称加密为A、B、C、D四个用户分别分配了一个密钥，而右侧的非对称加密（也叫公开密钥加密技术）为A、B、C、D四个用户分配了相同的密钥。<br>&emsp;&emsp;非对称加密的密钥分为<code>公钥</code>和<code>私钥</code>，其中公钥和私钥都可以加密与解密。特别的是，公钥所加密的内容只有私钥能够解密。这样，对于服务器来讲，只需要把公钥分发给所有客户，自己保存好私钥即可。  </p><blockquote><ol><li>常用的非对称加密算法有：RSA、Elgamal、背包算法、Rabin、D-H、ECC（椭圆曲线加密算法）等。</li><li>百度百科：<a href="http://baike.baidu.com/link?url=8MulbP9azuXwFgYkk-6OBVL0sDO7lFi4OeWewhENEdHo5o4dp-drc-HR6SnMm2gqSPg7B9hqM2bH0e1ZNfNBFq" target="_blank" rel="noopener">非对称加密</a></li></ol></blockquote><h3 id="二、摘要算法"><a href="#二、摘要算法" class="headerlink" title="二、摘要算法"></a>二、摘要算法</h3><p>&emsp;&emsp;首先需要指明的是，摘要算法不属于加解密算法。<br>&emsp;&emsp;对摘要两字可以理解为<strong>对信息主体的浓缩</strong>。这种浓缩是一个<strong>不可逆</strong>的过程。<br>&emsp;&emsp;可以在这些地方使用摘要算法：明文密码取摘要后把摘要存入数据库、文件断点续传与秒传（用文件摘要确定唯一性）、不在网络中传输密码（密码做摘要后传输，在服务器端取出密码用相同的摘要算法计算摘要后再跟客户端传过来的摘要比对）  </p><blockquote><ol><li>常用的摘要算法有：MD5、SHA1、SHA256、SHA384、SHA512</li><li>百度百科：<a href="http://baike.baidu.com/link?url=tCGQhcauD76QaTOjKvDaDmm5bS4Mw3bXf91WlepD2tumL4WBsexxaCxWrZqB-nBpJaIzY8s9bOduekfpCUxRNK" target="_blank" rel="noopener">摘要算法</a></li></ol></blockquote><h3 id="三、数字签名"><a href="#三、数字签名" class="headerlink" title="三、数字签名"></a>三、数字签名</h3><p>&emsp;&emsp;数字签名可以理解为<code>摘要算法</code>与<code>非对称加密</code>的综合使用。<br>&emsp;&emsp;数字签名可以对应为经常见到的骑缝章（经常有人喜欢把名字写在书的侧面）。数字签名需要说明是谁编写的报文，同时证明报文未被篡改过。  </p><img src="/2016/09/04/安全算法梳理/数字签名.jpg" title="数字签名"><p>&emsp;&emsp;通过上图，可以清楚的看出，使用<code>摘要算法</code>来证明报文未被篡改过，使用<code>非对称加密</code>来说明是谁写的报文。</p><blockquote><p>百度百科:<a href="http://baike.baidu.com/link?url=UjEIytZExoysf06dwc8LWXHNbMapFlmtm4UNmxy2ynHXzjlxqIOEMac7Qhel4qBaiSwv1EGmOLd08sr1wOpp2K" target="_blank" rel="noopener">数字签名</a></p></blockquote><h3 id="四、数字证书"><a href="#四、数字证书" class="headerlink" title="四、数字证书"></a>四、数字证书</h3><p>&emsp;&emsp;我们可以通过非对称加密可以解决报文裸奔的问题。<br>&emsp;&emsp;试想，有这么一个场景，服务器A分发一个公钥给客户端B，正常情况下很OK。此时A和B之前有个中间代理C，A和B之间的所有数据传输都要经过C来中转。C被黑客控制，C把自己的公钥发给B（B误以为是A的），C收到B传输给A的消息，先用自己的私钥解密，获得明文。然后用A的公钥加密密文再转发给A。<br>&emsp;&emsp;这里就牵涉到一个问题，B怎么确定收到的公钥的确是A的，而不是别人伪造的？现实中的身份证，要想确定身份证是否是真实的，去权威机构（也就是公安局）查一下就行了。<br>&emsp;&emsp;数字证书也是这个原理，需要一个<strong>权威机构</strong>来颁发。以此来证明这个公钥到底是谁的。</p><img src="/2016/09/04/安全算法梳理/数字证书.jpg" title="数字证书"><p>&emsp;&emsp;上图是百度的数字证书，详细标明了颁发者、使用者、有效期、加密算法等信息。</p><blockquote><p>资料：<a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener">“数字签名”（digital signature）和”数字证书”（digital certificate）到底是什么?</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;经常见到RSA、MD5、SHA系列算法，另外还有数字摘要、数字签名、数字证书等名词，以及对称加密与非对称加密。他们之间到底是什么关系呢？下面就通过这篇文章来梳理一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、
      
    
    </summary>
    
      <category term="HTTP" scheme="http://muchstudy.com/categories/HTTP/"/>
    
    
      <category term="安全" scheme="http://muchstudy.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>RSA加密解密样例</title>
    <link href="http://muchstudy.com/2016/09/03/RSA%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E6%A0%B7%E4%BE%8B/"/>
    <id>http://muchstudy.com/2016/09/03/RSA加密解密样例/</id>
    <published>2016-09-03T08:32:29.000Z</published>
    <updated>2016-09-04T16:42:06.864Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>场景：当未启用HTTPS时，用户的登录密码，以及当用户修改密码时，密码在网络中需要加密传输。</p></blockquote><h3 id="一、交互逻辑"><a href="#一、交互逻辑" class="headerlink" title="一、交互逻辑"></a>一、交互逻辑</h3><img src="/2016/09/03/RSA加密解密样例/RSA.png" title="交互逻辑"><p>&emsp;&emsp;上图中，前端部分运行在浏览器上，所以需要用JavaScript来加密需要传输的密码，后端部分使用Java来实现。</p><h3 id="二、前端部分"><a href="#二、前端部分" class="headerlink" title="二、前端部分"></a>二、前端部分</h3><p>&emsp;&emsp;前端部分的加密，选择<a href="https://github.com/travist/jsencrypt" target="_blank" rel="noopener">jsencrypt</a>来实现，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用户修改密码样例</span></span><br><span class="line">$(<span class="string">"#ModifyPasswordBtn"</span>).bind(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>($(<span class="string">"#ModifyPasswordForm"</span>).valid())&#123;</span><br><span class="line">      <span class="comment">//这里的RSA是使用的模块化加载的入口</span></span><br><span class="line">      <span class="keyword">var</span> encrypt = <span class="keyword">new</span> RSA.JSEncrypt();</span><br><span class="line">      <span class="comment">//KEY为公钥</span></span><br><span class="line">      encrypt.setPublicKey(KEY);</span><br><span class="line">      <span class="keyword">var</span> data = &#123;</span><br><span class="line">          userUuid:USER.userUuid,</span><br><span class="line">          oldPassword:encrypt.encrypt($(<span class="string">'#oldPassword'</span>).val()),</span><br><span class="line">          newPassword:encrypt.encrypt($(<span class="string">'#newPassword'</span>).val())</span><br><span class="line">      &#125;;</span><br><span class="line">      $.ajax(&#123;</span><br><span class="line">          url:getServer()+<span class="string">"your action"</span>,</span><br><span class="line">          type:<span class="string">"post"</span>,</span><br><span class="line">          data:data,</span><br><span class="line">          success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">              <span class="keyword">var</span> status = data.modifyStatus;</span><br><span class="line">              <span class="keyword">if</span>(status==<span class="number">1</span>)&#123;</span><br><span class="line">                  Util.alert(<span class="string">"修改成功"</span>);</span><br><span class="line">              &#125;<span class="keyword">else</span> <span class="keyword">if</span>(status==<span class="number">0</span>)&#123;</span><br><span class="line">                  Util.alert(<span class="string">"原密码不正确."</span>);</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  Util.alert(<span class="string">"修改失败"</span>);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="三、后端部分"><a href="#三、后端部分" class="headerlink" title="三、后端部分"></a>三、后端部分</h3><p>&emsp;&emsp;后端部分使用Java来实现</p><h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.share.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;  </span><br><span class="line"><span class="keyword">import</span> java.security.KeyFactory;  </span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;  </span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;  </span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;  </span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPrivateKey;  </span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPublicKey;  </span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;  </span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;  </span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.BadPaddingException;  </span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;  </span><br><span class="line"><span class="keyword">import</span> javax.crypto.IllegalBlockSizeException;  </span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSATools</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成RAS公钥与私钥字符串，直接返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HashMap&lt;String,String&gt; <span class="title">getKeys</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">     KeyPairGenerator keyPairGen = <span class="keyword">null</span>;  </span><br><span class="line">         <span class="keyword">try</span> &#123;  </span><br><span class="line">             keyPairGen = KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);  </span><br><span class="line">         &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;  </span><br><span class="line">             <span class="comment">// TODO Auto-generated catch block  </span></span><br><span class="line">             e.printStackTrace();  </span><br><span class="line">         &#125;  </span><br><span class="line">         <span class="comment">// 初始化密钥对生成器，密钥大小为96-1024位  </span></span><br><span class="line">         keyPairGen.initialize(<span class="number">1024</span>,<span class="keyword">new</span> SecureRandom());  </span><br><span class="line">         <span class="comment">// 生成一个密钥对，保存在keyPair中  </span></span><br><span class="line">         KeyPair keyPair = keyPairGen.generateKeyPair();  </span><br><span class="line">         <span class="comment">//得到公钥字符串  </span></span><br><span class="line">         String publicKey= base64ToStr(keyPair.getPublic().getEncoded());  </span><br><span class="line">         <span class="comment">//得到私钥字符串  </span></span><br><span class="line">         String privateKey= base64ToStr(keyPair.getPrivate().getEncoded());  </span><br><span class="line">         map.put(<span class="string">"publicKey"</span>, publicKey);</span><br><span class="line">         map.put(<span class="string">"privateKey"</span>, privateKey);</span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从字符串中加载公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKeyStr公钥字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RSAPublicKey <span class="title">loadPublicKey</span><span class="params">(String publicKeyStr)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">byte</span>[] buffer = javax.xml.bind.DatatypeConverter.parseBase64Binary(publicKeyStr);  </span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);  </span><br><span class="line">            X509EncodedKeySpec keySpec = <span class="keyword">new</span> X509EncodedKeySpec(buffer);  </span><br><span class="line">            <span class="keyword">return</span> (RSAPublicKey) keyFactory.generatePublic(keySpec);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"无此算法"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeySpecException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"公钥非法"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"公钥数据为空"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从字符串中加载私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKeyStr私钥字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RSAPrivateKey <span class="title">loadPrivateKey</span><span class="params">(String privateKeyStr)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">byte</span>[] buffer = javax.xml.bind.DatatypeConverter.parseBase64Binary(privateKeyStr);  </span><br><span class="line">            PKCS8EncodedKeySpec keySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(buffer);  </span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);  </span><br><span class="line">            <span class="keyword">return</span> (RSAPrivateKey) keyFactory.generatePrivate(keySpec);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"无此算法"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeySpecException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"私钥非法"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"私钥数据为空"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥加密过程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey      公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> plainTextData  明文数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception     加密过程中的异常信息</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(RSAPublicKey publicKey, <span class="keyword">byte</span>[] plainTextData)</span><span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (publicKey == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"加密公钥为空, 请设置"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        Cipher cipher = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 使用默认RSA  </span></span><br><span class="line">            cipher = Cipher.getInstance(<span class="string">"RSA"</span>);  </span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, publicKey);  </span><br><span class="line">            <span class="keyword">byte</span>[] output = cipher.doFinal(plainTextData);  </span><br><span class="line">            <span class="keyword">return</span> base64ToStr(output);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"无此加密算法"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"加密公钥非法,请检查"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"明文长度非法"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"明文数据已损坏"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥加密过程</span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey       私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> plainTextData    明文数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception       加密过程中的异常信息</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">(RSAPrivateKey privateKey, <span class="keyword">byte</span>[] plainTextData)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (privateKey == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"加密私钥为空, 请设置"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        Cipher cipher = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 使用默认RSA  </span></span><br><span class="line">            cipher = Cipher.getInstance(<span class="string">"RSA"</span>);  </span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, privateKey);  </span><br><span class="line">            <span class="keyword">byte</span>[] output = cipher.doFinal(plainTextData);  </span><br><span class="line">            <span class="keyword">return</span> base64ToStr(output);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"无此加密算法"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"加密私钥非法,请检查"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"明文长度非法"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"明文数据已损坏"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私钥解密过程</span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> privateKey   私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cipherData   密文数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>       明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception   解密过程中的异常信息</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(RSAPrivateKey privateKey, <span class="keyword">byte</span>[] cipherData)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (privateKey == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"解密私钥为空, 请设置"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        Cipher cipher = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 使用默认RSA  </span></span><br><span class="line">            cipher = Cipher.getInstance(<span class="string">"RSA"</span>);  </span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, privateKey);  </span><br><span class="line">            <span class="keyword">byte</span>[] output = cipher.doFinal(cipherData);  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(output);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"无此解密算法"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"解密私钥非法,请检查"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"密文长度非法"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"密文数据已损坏"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公钥解密过程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> publicKey    公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cipherData   密文数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 明文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 解密过程中的异常信息</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(RSAPublicKey publicKey, <span class="keyword">byte</span>[] cipherData)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (publicKey == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"解密公钥为空, 请设置"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        Cipher cipher = <span class="keyword">null</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 使用默认RSA  </span></span><br><span class="line">            cipher = Cipher.getInstance(<span class="string">"RSA"</span>);  </span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, publicKey);  </span><br><span class="line">            <span class="keyword">byte</span>[] output = cipher.doFinal(cipherData);  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(output);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"无此解密算法"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"解密公钥非法,请检查"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"密文长度非法"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"密文数据已损坏"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">base64ToStr</span><span class="params">(<span class="keyword">byte</span>[] b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> javax.xml.bind.DatatypeConverter.printBase64Binary(b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] strToBase64(String str)&#123;</span><br><span class="line">    <span class="keyword">return</span> javax.xml.bind.DatatypeConverter.parseBase64Binary(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生成公钥-私钥"><a href="#生成公钥-私钥" class="headerlink" title="生成公钥/私钥"></a>生成公钥/私钥</h4><p>&emsp;&emsp;在第一次请求时生成公钥与私钥，并放到当前线程上。返回公钥给客户端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String, String&gt; map = RSATools.getKeys();</span><br><span class="line">session.setAttribute(<span class="string">"PD_CurrentRSAKey"</span>, map);</span><br></pre></td></tr></table></figure><h4 id="私钥解密"><a href="#私钥解密" class="headerlink" title="私钥解密"></a>私钥解密</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从session上拿到上次生成的密钥</span></span><br><span class="line">HashMap&lt;String, String&gt; map   = (HashMap&lt;String, String&gt;) session.getAttribute(<span class="string">"PD_CurrentRSAKey"</span>);</span><br><span class="line">RSAPrivateKey privateKey      = RSATools.loadPrivateKey(map.get(<span class="string">"privateKey"</span>));</span><br><span class="line"><span class="comment">//使用私钥解密传输过来的密码</span></span><br><span class="line">String userUuid     = request.getParameter(<span class="string">"userUuid"</span>);</span><br><span class="line">String oldPassword  = RSATools.decrypt(privateKey, RSATools.strToBase64(request.getParameter(<span class="string">"oldPassword"</span>)));</span><br><span class="line">String newPassword  = RSATools.decrypt(privateKey, RSATools.strToBase64(request.getParameter(<span class="string">"newPassword"</span>)));</span><br></pre></td></tr></table></figure><h3 id="四、可运行的样例"><a href="#四、可运行的样例" class="headerlink" title="四、可运行的样例"></a>四、可运行的样例</h3><p>&emsp;&emsp;后续提供github地址</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;场景：当未启用HTTPS时，用户的登录密码，以及当用户修改密码时，密码在网络中需要加密传输。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、交互逻辑&quot;&gt;&lt;a href=&quot;#一、交互逻辑&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="安全" scheme="http://muchstudy.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="RSA" scheme="http://muchstudy.com/tags/RSA/"/>
    
      <category term="Java" scheme="http://muchstudy.com/tags/Java/"/>
    
      <category term="JavaScript" scheme="http://muchstudy.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>《嫌疑人X的献身》</title>
    <link href="http://muchstudy.com/2016/08/28/%E3%80%8A%E5%AB%8C%E7%96%91%E4%BA%BAX%E7%9A%84%E7%8C%AE%E8%BA%AB%E3%80%8B/"/>
    <id>http://muchstudy.com/2016/08/28/《嫌疑人X的献身》/</id>
    <published>2016-08-28T14:09:42.000Z</published>
    <updated>2020-04-20T16:53:48.160Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/08/28/《嫌疑人X的献身》/嫌疑人X的献身.jpg" title="《嫌疑人X的献身》"><blockquote><p>黑色的封面，代表着这是一个悲伤的故事。</p></blockquote><p>&emsp;&emsp;紧接<a href="http://muchstudy.com/2016/08/28/%E3%80%8A%E7%99%BD%E5%A4%9C%E8%A1%8C%E3%80%8B/">上一篇</a>,看完《白夜行》后，发现节奏带太快，收不住。忍不住搜一搜东野圭吾的其他小说，最后确定目标：《嫌疑人X的献身》。就是想一窥到底，看看东野圭吾是不是像网评的那么神！<br>&emsp;&emsp;之所以会盯上这本书，是因为大家都说这本书的故事神奇。一开始，读者便知道了作案凶手以及详细的作案细节！我勒个去！这么搞那还有什么悬念可言？在平生所看的悬疑类小说中，通常一开始就埋坑，然后到结尾才知道答案，抓住凶手。东野圭吾这是要搞哪样，太嚣张了！<br>&emsp;&emsp;这本书讲述的是一个理工男暗恋上隔壁女邻居的故事。这个女邻居离异，和女儿一起生活。前任老公一直缠着她不放，经常找她要钱。一次来找她，她和她女儿一起把前任老公杀死了。住在隔壁的理工男协助掩盖真相，故事由此展开。<br>&emsp;&emsp;最多剧透到此，不能再剧透了！照例放点儿书中的内容片段勾起大家的想要一睹为快的冲动！</p><ul><li><p>石神并不排斥森冈这种质疑的态度，<strong>对于为何要学习某种东西抱有疑问，本是理所当然。唯有疑问解除了，才会产生求知的欲望，才能走上理解数学本质之路。</strong>可惜太多老师不愿回答这种单纯的疑问。不，是答不出，石神知道，他们也没真正理解数学，只是按照既定的教材照本宣科，只想着让学生拿到好分数。对森冈提出的这种质疑，恐怕只会觉得不耐烦。</p><blockquote><p>可惜自己开窍得太晚！当需要用知识去赚钱生活时才发现上学那会儿的课程是多么的重要！线性代数、统计、积分……想想都是泪！</p></blockquote></li><li><p>这个世上没有无用的齿轮，只有齿轮自身才能决定自己的用途</p><blockquote><p>人也一样，需要自己成全自己。（突然想到《霸王别姬》中大师兄让小师弟自己成全自己。假霸王，真虞姬，哎！）</p></blockquote></li><li><p>草薙告诉我一件有趣的事，是关于你出考题的方式，针对自以为是的盲点。比方说看起来是几何问题，其实是函数问题，我听了恍然大悟。对那种不懂数学的本质、早已习惯根据思维定势解答的学生来说，这种题目想必很有效。乍看之下是几何问题，学生拼命朝那个方向想，却解不出来，唯有时间分秒流逝。要说是坏心眼，确实有点儿过分，但用来测试真正的实力，诚然有效。”</p><blockquote><p>上学时，就经常碰到这样坏心眼儿的老师！好像暴露了什么……强行逆转，看问题不应该被问题的表象所蒙蔽，应该直达问题的本质。解决程序Bug也一样。再次成功穿越……</p></blockquote></li><li><p>“最后一次见到石神时，他问了我一个问题——P≠NP。自己想出答案和判断别人的答案是否正确，何者较容易——这是著名的数学难题。” 　　草薙皱起眉头。 　　“那是数学？听起来像哲学。” 　　“你明白吗？石神给你们提出了一个答案，也就是这次的自首、供述内容。这一自白怎么看都像正确无误的解答，是他充分发挥智慧想出来的。如果就这么乖乖相信，那就表示你们输了。你们正受到来自他的挑战和考验！接下来，该轮到你们全力以赴，判断他提供的答案是否正确。” 　　“我们已经作了各种证实。” 　　“你们做的，只是按照他的证明方法走。你们该做的，是探寻有没有别的答案。除了他提供的答案之外别无可能——唯有证明到这个地步，才能断言，那个答案是唯一的答案！”</p><blockquote><p>由此可见，判断别人给的答案是否正确远比自己想出答案更难。自信的数学家，妙！</p></blockquote></li><li><p>指示之后，还有这么一段。工藤邦明先生是个诚实可靠的人。和他结婚，你和美里获得幸福的几率较高。把我完全忘记，不要有任何负罪感。如果你过得不幸福，我所做的一切才是徒劳。她看了又看，再次落泪。</p><blockquote><p>这就是一个数学家，一个理工男对爱的表达。</p></blockquote></li><li><p>心如明镜不带丝毫阴霾的，世上只有石神。</p><blockquote><p>理工男往往是比较单纯的，内心世界只有逻辑。</p></blockquote></li><li><p>他再次感到，自己并不需要任何人的肯定。他也有发表论文、受人重视的欲望，但那非关数学本质。让别人知道是谁第一个爬上山顶固然重要，但只要当事人自己明白其中的真味，也就足够了。</p><blockquote><p>很理解这种乐在其中的快乐。</p></blockquote></li><li><p>他已毫无留恋。没有理由寻死，也没有理由活着，如此而已。 　　他站上台子，正要把脖子套进绳索时，门铃响了。 　　是扭转命运方向的门铃。 　　他没有置之不理，他不想给任何人添麻烦。门外的某人，说不定有急事。 　　开门一看，门外站着两个女子，是一对母女。 　　母亲自我介绍说她们刚搬来隔壁，女儿在一旁鞠躬。看到两人时，石神的身体仿佛猛然被某种东西贯穿。 　　怎么会有眼睛如此美丽的母女？在那之前，他从未被任何东西的美丽吸引、感动过，也不了解艺术的意义。然而这一瞬间，他全都懂了，他发觉这和求解数学的美感在本质上乃是殊途同归。</p><blockquote><p><a href="http://muchstudy.com/2016/08/16/%E7%9C%9F%E3%80%81%E5%96%84%E3%80%81%E7%BE%8E/">真、善、美</a>其实是共通的，殊途同归。</p></blockquote></li><li><p>石神早已忘记她们是怎么打招呼的，但两人凝视他的明眸如何流转，至今仍清晰烙印在记忆深处。</p><blockquote><p>喜欢上一个人往往只需要一瞬！</p></blockquote></li></ul><p>&emsp;&emsp;看完了全书，由衷的赞叹本田圭吾能写出如此神作，故事架构精巧慎密，看到最后，当知道实情后眼前一亮，虎躯一震，惊叹万分。<br>&emsp;&emsp;整本书的感受只能用Perfect、Amazing、Heartbreaking 来形容。</p><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2016/08/28/《嫌疑人X的献身》/嫌疑人X的献身.jpg&quot; title=&quot;《嫌疑人X的献身》&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;黑色的封面，代表着这是一个悲伤的故事。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;紧接&lt;a hr
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
      <category term="读书笔记" scheme="http://muchstudy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>《白夜行》</title>
    <link href="http://muchstudy.com/2016/08/28/%E3%80%8A%E7%99%BD%E5%A4%9C%E8%A1%8C%E3%80%8B/"/>
    <id>http://muchstudy.com/2016/08/28/《白夜行》/</id>
    <published>2016-08-28T06:08:51.000Z</published>
    <updated>2016-08-28T14:12:04.549Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好东西需要分享，所以今天来义务当一回五毛。</p></blockquote><p>&emsp;&emsp;前段时间休了一次长假，长假回来发现状态全无，晚上下班回家无所事事，什么事儿没干一晃就到了睡觉时间，这种状态让人感觉很不踏实。为了找找学习状态，重找晚上回家看书的习惯，需要带一波节奏。<br>&emsp;&emsp;据以往经验，想要把节奏带起来，不能来得太陡，必须循序渐进。如果一上来就找本技术大部头来啃绝对容易打瞌睡！很早之前在知乎就看到有人推荐东野圭吾的《白夜行》，说这本小说很不错，属于推理悬疑小说。看到推理悬疑，想到这种小说肯定属于不断挖坑，引人入胜，打开就停不下来的小说。每天晚上回家来上一章，绝对停不下来！带节奏神器！<br>&emsp;&emsp;下面，就来先见见这本书的封面。</p><img src="/2016/08/28/《白夜行》/白夜行.jpg" title="《白夜行》"><p>&emsp;&emsp;从封面上看，可能会觉得很普通，老实说，当时看到的第一眼也是这么认为的。不过当我看完全书再回过头来着封面，觉得设计得真TMD的有深意！<br>&emsp;&emsp;作为摇旗呐喊的五毛，当然是不可能剧透的！不过倒是可以放点儿书中的内容勾引勾引….</p><ul><li><p>她的眼神里有一种微妙得难以言喻的刺。但那并不是社交舞社社长无视她的存在，只顾和朋友讲话而自尊受伤的样子。那双眼睛里栖息的光并不属于那种类型。 那是更危险的光——这才是一成的感觉，可以说是隐含了卑劣下流的光。他认为真正的名门闺秀，眼神里不应栖息着那样的光。</p><blockquote><p>&emsp;&emsp;公司最近招了一拨实习生，好怀念自己当年初入职场时那单纯、清澈的眼神！随着阅历的增加，眼神中的那股清流慢慢的消失。如果能一直保持住像三四岁小孩儿那种干净清澈的眼神该多好！已入职场6年，希望能不断学习成长，通过智慧让自己的眼神不至于渐渐变得黯淡无光，不求清澈见底，至少炯炯、明亮。</p></blockquote></li><li><p>“捡别人丢的东西不还，跟偷别人随意放置的东西，并没有什么差别。有错的难道不是把装了钱的包随便放的人吗？<strong>这个社会上，让别人有机可乘的人注定要吃亏。</strong>”</p></li><li>“我很不想承认，可你的确是本世纪最幸运的男人。娶到那么美的老婆就该偷笑了，她竟然还烧得一手好菜！<strong>一想到我跟你活在同一个世界上，实在很难不嫌弃自己。</strong>”</li><li>看着她，总会感到一种莫名的诡异，我实在不认为她只是个坚强的女子。”<blockquote><p>坚强往往是需要某种力量来支撑的！</p></blockquote></li><li>一双看尽人性丑恶的眼睛，一种堪称真正冷静清澈的光静静地栖息其中。<blockquote><p>这句话是形容书中一直追踪命案二十年一直不放弃的老警察</p></blockquote></li><li>“枪虾会挖洞，住在洞里。可有个家伙却要去住在它的洞里，那就是虾虎鱼。不过虾虎鱼也不白住，它会在洞口巡视，要是有外敌靠近，就摆动尾鳍通知洞里的枪虾。它们合作无间，这好像叫互利共生。”<blockquote><p>仔细想想，这种相互依偎取暖也挺可怜的！</p></blockquote></li><li>“有一株芽应该在那时就摘掉，因为没摘，芽一天天成长茁壮，长大了还开了花，而且是作恶的花。”<blockquote><p>恶之花一开始就应该摘掉，越晚摘除后果越大。写代码也一样，问题代码一开始就应该干掉，而不应该一味的容忍做兼容！神转折吧！</p></blockquote></li><li>曾经拥有的东西被夺走，并不代表就会回到原来没有那种东西的时候。<blockquote><p>这句话很有深意啊！值得仔细思考！</p></blockquote></li><li>“那时，我比现在的你更小，真的还是小孩子。但是，恶魔不会因为你是小孩子就放过你。而且，恶魔还不止一个。”  <blockquote><p>遇到恶魔就不要指望得到恶魔的同情。</p></blockquote></li><li>“喏，夏美，一天当中，有太阳升起的时候，也有下沉的时候。人生也一样，有白天和黑夜，只是不会像真正的太阳那样，有定时的日出和日落。看个人，有些人一辈子都活在太阳的照耀下，也有些人不得不一直活在漆黑的深夜里。人害怕的，就是本来一直存在的太阳落下不再升起，也就是非常害怕原本照在身上的光芒消失，现在的夏美就是这样。” 夏美听不懂老板在说什么，只好点头。 “我呢，从来就没有生活在太阳底下过。” “怎么会！”夏美笑了，“社长总是如日中天呢。” 她摇头。她的眼神是那么真挚，夏美的笑容也不由得消失了。 “我的天空里没有太阳，总是黑夜，但并不暗，因为有东西代替了太阳。虽然没有太阳那么明亮，但对我来说已经足够。凭借着这份光，我便能把黑夜当成白天。你明白吧？我从来就没有太阳，所以不怕失去。”“代替太阳的东西是什么呢？” “你说呢？也许夏美以后会有明白的一天。”<blockquote><p>看到这儿，终于明白书名为何取为《白夜行》。这样的人生居然还能如此坚强！在白夜中行走需要多大的勇气！</p></blockquote></li></ul><p>&emsp;&emsp;看完书的最后一个字，合上书，静静的看着书的封面，思绪万千！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;好东西需要分享，所以今天来义务当一回五毛。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;前段时间休了一次长假，长假回来发现状态全无，晚上下班回家无所事事，什么事儿没干一晃就到了睡觉时间，这种状态让人感觉很不踏实。为了找找学习状
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
      <category term="读书笔记" scheme="http://muchstudy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>字符编码详解</title>
    <link href="http://muchstudy.com/2016/08/26/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
    <id>http://muchstudy.com/2016/08/26/字符编码详解/</id>
    <published>2016-08-26T15:23:08.000Z</published>
    <updated>2016-09-24T14:55:17.810Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>&emsp;&emsp;经常有人问，为啥出来乱码呢？要么是前端浏览器显示乱码，要么是后台服务器接收是乱码。前两天又碰到一哥们儿来问我这问题！那么，今天就来聊聊字符编码。</p></blockquote><h3 id="一、字符编码要解决什么问题？"><a href="#一、字符编码要解决什么问题？" class="headerlink" title="一、字符编码要解决什么问题？"></a>一、字符编码要解决什么问题？</h3><p>&emsp;&emsp;就一句话，解决二进制与字符相互转换的问题！</p><h3 id="二、字符编码是如何工作的？"><a href="#二、字符编码是如何工作的？" class="headerlink" title="二、字符编码是如何工作的？"></a>二、字符编码是如何工作的？</h3><p>&emsp;&emsp;以ASCII编码为例，规定以一个字节来表示一个字符，一个字节8位（11111111），一共可以表示256个字符，目前只用到0-127号。</p><img src="/2016/08/26/字符编码详解/ASCII码表.jpg" title="ASCII码表"><p>&emsp;&emsp;有了这个规则，那么字符在网络间传输时就可以按照这个规则进行编码解码。</p><img src="/2016/08/26/字符编码详解/编码解码过程.png" title="编码解码过程"><p>&emsp;&emsp;上图是以一个大写的字符A为例，基于ASCII编码字符集的编码解码过程。</p><h3 id="三、各种字符编码间是何种关系？"><a href="#三、各种字符编码间是何种关系？" class="headerlink" title="三、各种字符编码间是何种关系？"></a>三、各种字符编码间是何种关系？</h3><p>&emsp;&emsp;谈到字符编码，就会有人问<code>UTF-8</code>和<code>GB2312</code>到底啥关系，跟<code>ASCII</code>编码又是啥关系？<br>&emsp;&emsp;还是一句话，他们相互间无直接关系！<br>&emsp;&emsp;解释一下，可以简单粗暴的理解为每一种字符编码对应于一种语言字符与二进制间的转换Map关系，最终形成一个字符集。当初设计的时候，只考虑到英文字符，用ASCII绰绰有余。但是后来碰到日文字符、中文字符、阿拉伯语字符等当然就不好使了，而且对于汉字来讲，有上万个字符，一个字节8位显然无法完全表示这么多个汉字字符。这个时候当然需要设计新的字符编码规则来解决不同语言编码的问题。紧接着，世界上的语言那么多种类，如果大家都各自为自己的设计一套，那岂不是很难管理，所以就整出个Unicode来统一标准。<br>&emsp;&emsp;这里的<code>无直接</code>是指一些编码规则保留了前面127位与最早的<code>ASCII</code>编码相兼容。<strong>这也是为什么大部分时候只有中文出现乱码，而英文字符能正常使用的原因。</strong></p><p>这里有两篇文章帮助理解：  </p><ol><li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank">字符编码笔记：ASCII，Unicode和UTF-8</a></li><li><a href="http://dengo.org/archives/901" target="_blank">ASCII、Unicode、GBK和UTF-8字符编码的区别联系</a></li></ol><h3 id="四、浏览器跟服务器是如何勾搭上的？"><a href="#四、浏览器跟服务器是如何勾搭上的？" class="headerlink" title="四、浏览器跟服务器是如何勾搭上的？"></a>四、浏览器跟服务器是如何勾搭上的？</h3><p>&emsp;&emsp;当然，要想勾搭上，当然得先有暗号！这样才能暗送秋波。不然两边各自讲相互听不懂的语言当然就无法沟通。  </p><table><thead><tr><th>名称</th><th>说明</th><th>样例</th></tr></thead><tbody><tr><td>Accept-Charset</td><td>客户端告诉服务器接收哪种字符编码</td><td><code>Accept-Charset:utf-8,is0-8859-1;1=0.8</code>,q表示优先级，1最高</td></tr><tr><td>charset</td><td>告诉接收者传输内容使用何种字符编码，这里的接收者既可以是服务器端也可以是客户端</td><td><code>Content-Type: text/html;chart=utf-8</code></td></tr></tbody></table><p>&emsp;&emsp;上面是通过HTTP头信息设置编码规则，还可以在页面上设置编码规则<br>HTML中：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">HEAD</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">"Content-Type"</span> <span class="attr">CONTENT</span>=<span class="string">"text/html; charset=iso-2022-jp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">META</span> <span class="attr">LANG</span>=<span class="string">"jp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">TITLE</span>&gt;</span>A Japanese Document<span class="tag">&lt;/<span class="name">TITLE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">HEAD</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>JSP中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; contentType=&quot;text/html;charset=utf-8&quot;%&gt;</span><br></pre></td></tr></table></figure></p><p>JQuery ajax自动设置Content-Type:<br>&emsp;&emsp;在<code>http://v3.bootcss.com/</code>的console里运行<code>$.ajax({url:&quot;/ajaxDemo&quot;,type:&quot;post&quot;,data:{name:&quot;YiYing&quot;},success:function(){}})</code>，发起的ajax请求如下图所示：</p><img src="/2016/08/26/字符编码详解/请求头信息.jpg" title="请求头信息r"><p>jquery 源码：<br><img src="/2016/08/26/字符编码详解/jquery源码.jpg" title="jquery源码"></p><h3 id="五、造成乱码的原因"><a href="#五、造成乱码的原因" class="headerlink" title="五、造成乱码的原因"></a>五、造成乱码的原因</h3><p>&emsp;&emsp;查了一下<a href="https://www.w3.org/Protocols/rfc1341/7_1_Text.html" target="_blank" rel="noopener">RFC文档</a>，Content-Type的默认值为<code>Content-Type: text/plain; charset=us-ascii</code>。如果客户端的字符A以ASCII编码，最终在网络中传输的是二进制的65。如果服务器以另外一种编码规则解码（这个时候恰好未兼容ASCII），那么通过65解码出来的字符就不是字符A，而是其它字符了，从而造成传说中的乱码。     &emsp;&emsp;或者一端用可变长度的UTF-8编码，另一端用ASCII解码（只能表示128个字符，固定一个字节），UTF-8这边如果一个字符占3个字节，如果用ASCII来解码，一个字符被当成3个字符来解码，当然结果就不对。</p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>&emsp;&emsp;看到这里，以后碰到乱码问题解决起来就so easy了吧！只需要检查编码与解码规则在哪个环节未对应上即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;经常有人问，为啥出来乱码呢？要么是前端浏览器显示乱码，要么是后台服务器接收是乱码。前两天又碰到一哥们儿来问我这问题！那么，今天就来聊聊字符编码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、字符编码要解决什么问题
      
    
    </summary>
    
      <category term="HTTP" scheme="http://muchstudy.com/categories/HTTP/"/>
    
    
  </entry>
  
  <entry>
    <title>《南渡北归》</title>
    <link href="http://muchstudy.com/2016/08/22/%E3%80%8A%E5%8D%97%E6%B8%A1%E5%8C%97%E5%BD%92%E3%80%8B/"/>
    <id>http://muchstudy.com/2016/08/22/《南渡北归》/</id>
    <published>2016-08-22T15:29:34.000Z</published>
    <updated>2016-08-28T05:54:39.117Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/08/22/《南渡北归》/南渡北归.jpg" title="大师远去再无大师"><blockquote><p>看完《南渡北归》，感慨万千，真正理解了何谓“大师”！  </p></blockquote><p>&emsp;&emsp;此书分本《南渡》《北归》《伤离别》三部，共计150余万字，以时间线划分为抗战前、抗战期间、抗战后大致到文革结束。<br>     &emsp;&emsp;书中牵涉到一系列人物，读完全书，到现在还能记起来的有：梁启超、王国维、赵元任、陈寅恪、胡适、傅斯年、李济、吴宓、吴晗、闻一多、刘文典、梁思永、梁思成、林徽因、金岳霖、冯友兰、冰心、徐志摩、陆小曼、张伯苓、梅贻琦、陶孟和、吴金鼎、夏鼐、曾国藩家族的曾昭抡、曾昭橘、穆旦、钱穆、钱钟书，童第周、华罗庚、李政道、杨振宁…….<br>     &emsp;&emsp;这三部书差不多耗时3个月，大部分是在上班的地铁上读完。此书虽然在文笔上不尽如意，而且很多摘录、备注，有点像个大杂烩的感觉。但是对于了解1880-1980这100年间中国近代史还是有帮助的，特别是能了解在此期间大师、名人学者在此大时代中的抉择、命运纠葛，等等。</p><p>&emsp;&emsp;下面是一些还能回想起来的内容片段:</p><ul><li>清华四大导师：梁启超、王国维、陈寅恪、赵元任；</li><li>当年皇帝老师，著名国学大师王国维的跳未名湖自杀；</li><li>陈寅恪为王国维撰写碑文中的“独立之精神、自由之思想”;</li><li>梁启超住院错割好肾，反而为现代医学辩护；</li><li>梁启超希望两个儿子所从事两个事业的远大抱负，梁思成建筑、梁思永考古；</li><li>李济、董作宾、梁思永、吴金鼎、夏鼐、曾昭橘一票考古学专家，发现殷墟遗址，发现甲骨文，从而打破中国文化外来说；</li><li>抗战打响前，国军将领张自忠、宋哲元等的私心导致北平失守；</li><li>纨绔子弟张学良，对于他至死都没回过大陆，隐约能猜出几分原因；</li><li>衡阳会战，中国战场上最惨烈的一战，双方紧张窒息的氛围达到极致，战至最后守军上下严守军人职责苦苦支撑，以死报国的决心电文”来生再见“的精神让人感动，蒋介石与方先觉见面的悲喜交集让人动容。</li><li>全书有大量笔墨的傅斯年，史语所所长、北大代校长、台大校长，唯一的不成器在美国的儿子。最终归骨于田横之岛</li><li>林徽因与梁思成、徐志摩、金岳霖的关系；徐志摩与陆小曼，书中有一张陆小曼年轻时候的照片，的确漂亮…. 金岳霖的一生未娶；</li><li>冰心讥讽林徽因的“太太的客厅”；</li><li>徐悲鸿的感情纠葛，1949年，妻子蒋碧薇留下与徐悲鸿的一子一女与张道藩去台湾；</li><li>吴宓苦追毛彦文而不得….</li><li>西南联大时期的吴晗、共产党胜利后出任北京市副市长，风光一时；文革中由于《海瑞罢官》引火烧身，吴晗与妻子袁震分别惨死，留下十来岁的一儿一女，不久女儿精神病自杀，一家人最后只剩下十来岁的儿子吴彰在好心人的帮助下长大。</li><li>胡适，抗战赴美担任驻美大使，执意留在大陆不去台湾的胡思杜在文革中惨死，胡适在台湾至死都不明确儿子在大陆的情况。</li><li>从国民党在抗战中艰苦办学、之后的抢救学人计划，可以看出国民党政府对知识分子还是相当重视的；</li><li>抗战时期国民政府的腐败还是有目共睹的，孔氏家族大发国难财，孔二小姐把抢救学人的飞机用来拉私物，甚至把国民党大佬赶下飞机。</li><li>抗战时期，从北平、辗转长沙、昆明、四川李庄的学生、教授；</li><li>西南联大时期，斗士闻一多之死，记得闻一多有七八个小孩，上有老，死后这么一大家子人怎么办，想想就觉得心酸…..</li><li>一生未婚的曾昭橘在文革中从灵骨塔上一跃而下….</li><li>在文革中化学家曾昭抡也被斗死，这位是参与了国民党原子弹建造计划的人,为后续原子弹的爆炸提供了很多资料</li><li>叶企孙在文革中也被斗死，在23位获得“两弹一星功勋奖章”的科学家中，有9位是他的学生，两位是他学生的学生！~~~</li><li>李政道与杨振宁的分道扬镳，对于这两个人谁对谁错，我更相信沉默者;</li><li>穆氏家族一大票知名人物，最为人所知的就是穆旦和金庸，金庸倒是不错，可惜的是穆旦，从国外学成归来，抱着对祖国的期望，在回国后的20年间没有过上一天好日子，最终死于文革。</li><li>文革中的陈梦家、 赵萝蕤夫妇，一个死、一个精神失常；</li><li>《伤离别》中所讲述的傅斯年、胡适、李济、梅贻琦、吴晗、陈寅恪、金岳霖、林徽因、梁思成、穆旦之死，相当令人感伤，同时，不得不承认，文革是相当可怕的！~~<br>文革十年，“大师之后再无大师 ”这句话也不是没有道理的！  </li></ul><p>&emsp;&emsp;写了这么多，各中体会，无法表达，如人饮水，冷暖自知，总的来说收获颇丰，值得一读。  </p><p>其它阅读记录：<br>《南渡北归.离别》  </p><ul><li><p>我没有什么心愿了，唯一让我遗憾的是没能再见一下我的恩师金岳霖先生。50年了，我很想念他。你们将来有机会去大陆，请替我问候一下，就说他的学生殷福生很想念他。”  </p></li><li><p>知名学人傅斯年归骨于田横之岛，按岳南的文章所写，文革期间留着大陆的傅氏家族惨遭“灭亡”之患，儿子在美国一生未娶，并不如意。抱着多了解一些事实的态度google了一下，发现并不像作者所写的那样。以此，独立之精神的必要性，妄不可贸然听信一家之言，应小心谨慎、多方求证之后方可做出自己的判断，切忌听信一家之言与鼓动之后影响自己的情绪与判断而做出错误的举动。</p></li><li><p>胡适对人多次提起自己曾说过不止一遍的话：“吴晗可惜，走错了路。” 此话传入吴晗耳中，吴颇不以为然，认为这位前老师脑子灌水，老糊涂了。当北平地覆天翻，半壁江山易主，蛰伏在西柏坡一间黑屋里的吴晗露出头来，在乍暖还寒的阳光照耀下，以接收大员的特殊身份，气宇轩昂地接管、掌控了北大、清华局势时，大有飘飘然羽化登仙之感。</p></li><li><p>由文革期间知识分子的惨痛遭遇，以及吴晗一家的遭遇，可见文革是多么的可怕。文革中消灭掉了太多的知识分子与有识之士，期间人人自危。重庆从打黑到唱红歌，如果再这样发展下去，后续的情况就很难说了，在网上看到有人说可能再来一次文革并不是危言耸听！~~  </p></li><li>而冯友兰则指斥胡适处于对中国共产党建立新政权的恐惧，胡说什么<strong>“汉帝国的创立者都是平民，刘邦是个不事生产的无赖，萧何是个刀笔吏，樊哙是个屠狗的。……其中只有极少数的人，如张良、陈平是受过教育的”；”这一班乡下人统治下的政治，确实有点可怕”</strong>。</li></ul><p>批胡运动：<br> &emsp;&emsp;一些“极左地区”的胡姓青年失去了当兵入伍和进工厂做工的资格，而正处于找对象年龄的胡姓青年，许多因自己姓胡而遭到对方讥讽并最终告吹。对飘荡于社会各阶层，看不见却能清晰感受到的恐怖气氛，有的胡姓人家在大骂胡适、胡风与胡汉三等胡氏宗族不肖子孙的同时，一并发出了<strong>“但愿来生不姓胡”</strong>的激愤之语。<br>   &emsp;&emsp;1949年以后多阶段、多波次、多形式、多阶层“批胡运动”影响面之大难以想象，高压下人人自危，造成一大批人，包括大多数上层知识分子“识时务为俊杰”的跟风、表态，人性的阴暗面尽显。由此可见，大多数在一些情况下也不一定是对的，应该建立在自由的环境，已经拥有独立思想、客观、公正的大多数上。从这里可以引申出，网上大家天天喊的民主并实现起来并没有那么简单，不仅需要上层政治上的开放，还需要一大批、广泛的有独立思想的人民大众做支撑，民主的路还很长！<br>   &emsp;&emsp;胡适在致杨杏佛的信中曾这样说过：<strong>“记得五六年前曾与周豫才先生兄弟闲谈，我说，《西游记》的‘八十一难’，最不能令人满意，应该这样改作：唐僧取了经回到通天河边，梦见黄风大王等妖魔向他索命，唐僧醒来，叫三个徒弟驾云把经卷送回唐土去讫，他自己却念动真言，把当日想吃唐僧一块肉延寿三千年的一切冤魂都召请来，他自己动手，把身上的肉割下来布施给他们吃，一切冤魂吃了唐僧的肉，都得超生极乐世界，唐僧的肉布施完了，他也成了正果。如此结束，最合佛教精神。”</strong><br>    &emsp;&emsp;接下来，胡适拿这个例子喻自己的经历：<strong>“我受了十余年的骂，从来不怨恨骂我的人。有时他们骂的不中肯，我反替他们着急。有时他们骂的太过火了，反损骂者自己的人格，我更替他们不安。如果骂我而使骂者有益，便是我间接于他有恩了，我自然很情愿挨骂。如果有人说，吃胡适一块肉可以延寿一年半年，我也一定情愿自己割下来送给他，并且祝福他。”  </strong></p><p>&emsp;&emsp;在那样的历史背景上，个人命运跌宕起伏，不值一提，被历史洪流推动着快步往前走！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2016/08/22/《南渡北归》/南渡北归.jpg&quot; title=&quot;大师远去再无大师&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;看完《南渡北归》，感慨万千，真正理解了何谓“大师”！  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;此书分本《
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
      <category term="读书笔记" scheme="http://muchstudy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Markdown中嵌入优酷视频</title>
    <link href="http://muchstudy.com/2016/08/22/Markdown%E4%B8%AD%E5%B5%8C%E5%85%A5%E4%BC%98%E9%85%B7%E8%A7%86%E9%A2%91/"/>
    <id>http://muchstudy.com/2016/08/22/Markdown中嵌入优酷视频/</id>
    <published>2016-08-22T14:58:22.000Z</published>
    <updated>2016-08-22T16:11:18.461Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;翻了很多篇帖子都是说直接使用iframe就好了，结果试了又试一直不行（也不是不行，就是直接跳转到了优酷页面，而不是在页面上内嵌一个视频窗口）。<br>&emsp;&emsp;最后终于找到了原因：<code>不是填浏览器地址栏的url！</code>、<code>不是填浏览器地址栏的url！</code>、<code>不是填浏览器地址栏的url！</code></p><p>直接拷贝这里的放到Markdown上：<br><img src="/2016/08/22/Markdown中嵌入优酷视频/优酷视频播放地址.jpg" title="优酷视频播放地址"></p><h3 align="center">短片《一维》</h3><iframe height="498" width="510" src="http://player.youku.com/embed/XNTk1Nzg4MzEy" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;翻了很多篇帖子都是说直接使用iframe就好了，结果试了又试一直不行（也不是不行，就是直接跳转到了优酷页面，而不是在页面上内嵌一个视频窗口）。&lt;br&gt;&amp;emsp;&amp;emsp;最后终于找到了原因：&lt;code&gt;不是填浏览器地址栏的url！&lt;/code&gt;、
      
    
    </summary>
    
      <category term="其它" scheme="http://muchstudy.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
  </entry>
  
  <entry>
    <title>HTTP连接管理</title>
    <link href="http://muchstudy.com/2016/08/20/HTTP%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/"/>
    <id>http://muchstudy.com/2016/08/20/HTTP连接管理/</id>
    <published>2016-08-20T09:27:00.000Z</published>
    <updated>2016-08-20T15:25:23.109Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>&emsp;&emsp;曾经有同事给我说有客户问她我们的产品是否支持长连接，听到这问题，我告诉她长连接可以通过websocket来实现，考虑到目前的浏览器兼容性，大部分时候采用客户端轮询来曲线救国。当了解到HTTP的keep-alive时，不禁回想起这件事，当初我的回答可能并不是客户想要的的答案！</p></blockquote><p>&emsp;&emsp;下面，分享一下HTTP连接的一些情况，所有的截图均来自《HTTP权威指南》。想更详细了解的可以直接去看这本书的第四章，更深入的可以去翻翻RFC文档以及TCP/IP协议。有大部头恐惧症，以及只希望能有个初步以及概要性的了解的，接下来的内容很适合您!</p><h3 id="一、HTTP连接的过程"><a href="#一、HTTP连接的过程" class="headerlink" title="一、HTTP连接的过程"></a>一、HTTP连接的过程</h3><img src="/2016/08/20/HTTP连接管理/1.jpg" title="HTTP连接的过程"><blockquote><p> &emsp;&emsp;上图为从客户端-服务器端-客户端交互的整个过程。接下来介绍在这个交互过程中影响性能因素的几个关键点。</p></blockquote><h3 id="二、连接中的性能聚焦区域"><a href="#二、连接中的性能聚焦区域" class="headerlink" title="二、连接中的性能聚焦区域"></a>二、连接中的性能聚焦区域</h3><h4 id="HTTP事务的时延"><a href="#HTTP事务的时延" class="headerlink" title="HTTP事务的时延"></a>HTTP事务的时延</h4><img src="/2016/08/20/HTTP连接管理/2.jpg" title="HTTP 事务主要的连接、 传输以及处理时延"><p>HTTP 事务的时延有以下几种主要原因：  </p><ol><li>客户端首先需要根据URI确定Web服务器的IP地址和端口号。</li><li>接下来，客户端会向服务器发送一条 TCP 连接请求， 并等待服务器回送一个请求接受应答。</li><li>一旦连接建立起来了，客户端就会通过新建立的 TCP 管道来发送 HTTP 请求。</li><li>最后，Web 服务器会回送 HTTP 响应。</li></ol><blockquote><p> &emsp;&emsp;这些TCP网络时延的大小取决于硬件速度、网络和服务器的负载，请求和响应报文的尺寸，以及客户端和服务器之间的距离。</p></blockquote><h4 id="TCP连接的握手时延"><a href="#TCP连接的握手时延" class="headerlink" title="TCP连接的握手时延"></a>TCP连接的握手时延</h4><p>&emsp;&emsp;TCP连接的握手时延对应于上图的建立连接部分。发送任意数据，当新建立一条TCP连接时，都会走一下如下握手过程。如果连接只用来传送少量数据，这些握手过程就会严重降低 HTTP 的性能。</p><img src="/2016/08/20/HTTP连接管理/3.jpg" title="TCP连接的握手时延"><p>TCP 连接握手需要经过以下几个步骤：  </p><ol><li>请求新的 TCP 连接时， 客户端要向服务器发送一个小的 TCP 分组（ 通常是 40 ～60 个字节）。 这个分组中设置了一个特殊的 SYN 标记，说明这是一个连接请求。（a部分）</li><li>如果服务器接受了连接，就会对一些连接参数进行计算，并向客户端回送一个TCP 分组，这个分组中的 SYN 和 ACK 标记都被置位，说明连接请求已被接受。（b部分）</li><li>最后， 客户端向服务器回送一条确认信息， 通知它连接已成功建立（c部分）</li></ol><blockquote><p>这部分对用户不可见</p></blockquote><h4 id="TCP慢启动"><a href="#TCP慢启动" class="headerlink" title="TCP慢启动"></a>TCP慢启动</h4><p>&emsp;&emsp;TCP 连接会随着时间进行自我“ 调谐”， 起初会限制连接的最大速度， 如果数据成功传输， 会随着时间的推移提高传输的速度。 这种调谐被称为 TCP 慢启动（ slow start）， 用于防止因特网的突然过载和拥塞。<br>&emsp;&emsp;由于存在这种拥塞控制特性， 所以新连接的传输速度会比已经交换过一定量数据的、“ 已调谐” 连接慢一些。</p><h3 id="三、HTTP连接的处理"><a href="#三、HTTP连接的处理" class="headerlink" title="三、HTTP连接的处理"></a>三、HTTP连接的处理</h3><h4 id="1-并行连接"><a href="#1-并行连接" class="headerlink" title="1.并行连接"></a>1.并行连接</h4><p> &emsp;&emsp;试想，当浏览器加载一个页面时，如果一个个HTTP请求都串行执行，那显示出这个页面将会奇慢无比。</p><p>下面用两个图来做个对比：<br><img src="/2016/08/20/HTTP连接管理/4.jpg" title="4个事务（串行）"></p><img src="/2016/08/20/HTTP连接管理/5.jpg" title="4个事务（并行）"><p>&emsp;&emsp;打开大量连接会消耗很多内存资源，从而引发自身的性能问题。复杂的Web页面可能会有数十或数百个内嵌对象。客户端可能可以打开数百个连接，但 Web 服务器通常要同时处理很多其他用户的请求， 所以很少有 Web 服务器希望出现这样的情况。 一百个用户同时发出申请， 每个用户打开 100 个连接， 服务器就要负责处理10000个连接。 这会造成服务器性能的严重下降。</p><blockquote><p> &emsp;&emsp;实际上，浏览器确实使用了并行连接,但它们会将并行连接的总数限制为一个较小的值（通常是4个）。之前看baidu的webuploader的设计文档，经过测试，当文件分片上传时，建议开始的线程为3个。<br>&emsp;&emsp;地址在<a href="http://fex.baidu.com/blog/2014/04/html5-uploader/?qq-pf-to=pcqq.c2c" target="_blank">这里</a>,更详细的在<a href="https://github.com/fex-team/webuploader/tree/research/experiment" target="_blank">这里</a>，上面的目录里也还有一些</p></blockquote><h4 id="2-持久连接"><a href="#2-持久连接" class="headerlink" title="2.持久连接"></a>2.持久连接</h4><p>&emsp;&emsp;HTTP/1.1（以及 HTTP/1.0 的各种增强版本）允许 HTTP 设备在事务处理结束之后将 TCP 连接保持在打开状态， 以便为未来的 HTTP 请求重用现存的连接。 在事务处理结束之后仍然保持在打开状态的 TCP 连接被称为持久连接。 非持久连接会在每个事务结束之后关闭。持久连接会在不同事务之间保持打开状态， 直到客户端或服务器决定将其关闭为止。<br>&emsp;&emsp;持久连接降低了时延和连接建立的开销，将连接保持在已调谐状态， 而且减少了打开连接的潜在数量。</p><p>持久连接有两种类型：</p><ol><li>HTTP/1.0+ “keep-alive”连接</li><li>HTTP/1.1 “persistent”连接</li></ol><h5 id="HTTP-1-0-keep-alive连接"><a href="#HTTP-1-0-keep-alive连接" class="headerlink" title="HTTP/1.0+ keep-alive连接"></a>HTTP/1.0+ keep-alive连接</h5><p> &emsp;&emsp;实现 HTTP/1.0 keep-alive 连接的客户端可以通过包含 <code>Connection: Keep-Alive</code>首部请求将一条连接保持在打开状态。<br>&emsp;&emsp;如果服务器愿意为下一条请求将连接保持在打开状态，就在响应中包含相同的首部。如果响应中没有 Connection: Keep-Alive 首部， 客户端就认为服务器不支持 keep-alive， 会在发回响应报文之后关闭连接。</p><img src="/2016/08/20/HTTP连接管理/6.jpg" title="串行与持久连接"><blockquote><p> &emsp;&emsp;上图中将在串行连接上实现 4 个HTTP 事务的时间线与在一条持久连接上实现同样事务所需的时间线进行了比较。由于去除了进行连接和关闭连接的开销， 所以时间线有所缩减。</p></blockquote><h6 id="keep-alive选项："><a href="#keep-alive选项：" class="headerlink" title="keep-alive选项："></a>keep-alive选项：</h6><p>例如：<code>Keep-Alive: max=5, timeout=120</code>  </p><ol><li>参数 timeout 是在 Keep-Alive 响应首部发送的。 它估计了服务器希望将连接保持在活跃状态的时间。 这并不是一个承诺值。</li><li>参数 max 是在 Keep-Alive 响应首部发送的。 它估计了服务器还希望为多少个事务保持此连接的活跃状态。 这并不是一个承诺值。</li><li>Keep-Alive 首部还可支持任意未经处理的属性， 这些属性主要用于诊断和调试。语法为 name [=value]。</li></ol><blockquote><p> &emsp;&emsp;在 HTTP/1.0 中，keep-alive 并不是默认使用的。客户端必须发送一个<code>Connection: Keep-Alive</code>请求首部来激活 keep-alive 连接。</p></blockquote><h5 id="HTTP-1-1-persistent连接"><a href="#HTTP-1-1-persistent连接" class="headerlink" title="HTTP/1.1 persistent连接"></a>HTTP/1.1 persistent连接</h5><p>&emsp;&emsp;HTTP/1.1 逐渐停止了对 keep-alive 连接的支持， 用一种名为持久连接（persistent connection） 的改进型设计取代了它。<br>&emsp;&emsp;与 HTTP/1.0+ 的 keep-alive 连接不同， HTTP/1.1 持久连接在默认情况下是激活的。 除非特别指明， 否则 HTTP/1.1 假定所有连接都是持久的。 要在事务处理结束之后将连接关闭， HTTP/1.1 应用程序必须向报文中显式地添加一个<code>Connection:close</code>首部。 这是与以前的 HTTP 协议版本很重要的区别， 在以前的版本中， keep-alive 连接要么是可选的，要么根本就不支持.<br>&emsp;&emsp;这种连接相当于是在HTTP/1.1之上默认开启keep-alive</p><h4 id="3-管道化连接"><a href="#3-管道化连接" class="headerlink" title="3.管道化连接"></a>3.管道化连接</h4><p>&emsp;&emsp;HTTP/1.1 允许在持久连接上可选地使用请求管道。 这是相对于 keep-alive 连接的又一性能优化。 在响应到达之前， 可以将多条请求放入队列。当第一条请求通过网络流向地球另一端的服务器时， 第二条和第三条请求也可以开始发送了。 在高时延网络条件下， 这样做可以降低网络的环回时间，提高性能。  </p><img src="/2016/08/20/HTTP连接管理/7.jpg" title="性能对比"><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>&emsp;&emsp;随着HTTP协议版本以及浏览器版本的不断升级更新，以上这些针对HTTP连接性能优化的选项基本上都实现了自动化、智能化。所以，大家了解了解就好，被人问到避免出现我之前的尴尬境况。<br>&emsp;&emsp;把这块弄清楚并整理出来后，强迫症减轻了不少……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;曾经有同事给我说有客户问她我们的产品是否支持长连接，听到这问题，我告诉她长连接可以通过websocket来实现，考虑到目前的浏览器兼容性，大部分时候采用客户端轮询来曲线救国。当了解到HTTP的keep-alive时，不禁回想
      
    
    </summary>
    
      <category term="HTTP" scheme="http://muchstudy.com/categories/HTTP/"/>
    
    
      <category term="HTTP连接" scheme="http://muchstudy.com/tags/HTTP%E8%BF%9E%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>HTTP状态码详解</title>
    <link href="http://muchstudy.com/2016/08/20/HTTP%E7%8A%B6%E6%80%81%E7%A0%81%E8%AF%A6%E8%A7%A3/"/>
    <id>http://muchstudy.com/2016/08/20/HTTP状态码详解/</id>
    <published>2016-08-20T06:31:14.000Z</published>
    <updated>2016-08-20T15:25:29.635Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>触发整理这篇资料的初心为在工作中，经常看到不规范的HTTP状态码使用，实际的问题原因与应有的原因范围不符，很容易对人造成误解。</p></blockquote><h3 id="一、状态码分类"><a href="#一、状态码分类" class="headerlink" title="一、状态码分类"></a>一、状态码分类</h3><blockquote><p>HTTP状态码分为如下5类</p></blockquote><table><thead><tr><th>总体范围</th><th>已定义范围</th><th>类别</th></tr></thead><tbody><tr><td>100~199</td><td>100~101</td><td>信息</td></tr><tr><td>200~299</td><td>200~206</td><td>成功</td></tr><tr><td>300~399</td><td>300~305</td><td>重定向</td></tr><tr><td>400~499</td><td>400~417</td><td>客户端错误</td></tr><tr><td>500~599</td><td>500~505</td><td>服务器错误</td></tr></tbody></table><h3 id="二、状态码详细说明"><a href="#二、状态码详细说明" class="headerlink" title="二、状态码详细说明"></a>二、状态码详细说明</h3><h4 id="100-199（已定义：100-101）"><a href="#100-199（已定义：100-101）" class="headerlink" title="100~199（已定义：100~101）"></a>100~199（已定义：100~101）</h4><table><thead><tr><th>状态码</th><th>原因短语</th><th>含义</th></tr></thead><tbody><tr><td>100</td><td>Continue（ 继续）</td><td>收到了请求的起始部分， 客户端应该继续请求</td></tr><tr><td>101</td><td>Switching Protocols（ 切换协议）</td><td>服务器正根据客户端的指示将协议切换成 Update首部列出的协议</td></tr></tbody></table><h4 id="200-299（已定义：200-206）"><a href="#200-299（已定义：200-206）" class="headerlink" title="200~299（已定义：200~206）"></a>200~299（已定义：200~206）</h4><table><thead><tr><th>状态码</th><th>原因短语</th><th>含义</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>服务器已成功处理请求</td></tr><tr><td>201</td><td>Created（ 已创建）</td><td>对那些要服务器创建对象的请求来说， 资源已创建完毕</td></tr><tr><td>202</td><td>Accepted（ 已接受）</td><td>请求已接受， 但服务器尚未处理</td></tr><tr><td>203</td><td>Non-Authoritative Information（ 非权威信息）</td><td>服务器已将事务成功处理， 只是实体首部包含的信息不是来自原始服务器， 而是来自资源的副本</td></tr><tr><td>204</td><td>No Content（ 没有内容）</td><td>响应报文包含一些首部和一个状态行， 但不包含实体的主体内容</td></tr><tr><td>205</td><td>Reset Content（ 重置内容）</td><td>另一个主要用于浏览器的代码。 意思是浏览器应该重置当前页面上所有的 HTML 表单</td></tr><tr><td>206</td><td>Partial Content（ 部分内容）</td><td>部分请求成功</td></tr></tbody></table><h4 id="300-399（已定义300-307）"><a href="#300-399（已定义300-307）" class="headerlink" title="300~399（已定义300~307）"></a>300~399（已定义300~307）</h4><table><thead><tr><th>状态码</th><th>原因短语</th><th>含义</th></tr></thead><tbody><tr><td>300</td><td>Multiple Choices（ 多项选择）</td><td>客户端请求了实际指向多个资源的 URL。 这个代码是和一个选项列表一起返回的， 然后用户就可以选择他希望使用的选项了</td></tr><tr><td>301</td><td>Moved Permanently（ 永久搬离）</td><td>请求的 URL 已移走。 响应中应该包含一个 LocationURL， 说明资源现在所处的位置</td></tr><tr><td>302</td><td>Found（ 已找到）</td><td>与状态码 301 类似， 但这里的搬离是临时的。 客户端应该用 Location 首部给出的 URL 对资源进行临时定位</td></tr><tr><td>303</td><td>See Other（ 参见其他）</td><td>告诉客户端应该用另一个 URL 获取资源。 这个新的URL 位于响应报文的 Location 首部</td></tr><tr><td>304</td><td>Not Modified（ 未修改）</td><td>客户端可以通过它们所包含的请求首部发起条件请求。 这个代码说明资源未发生过变化</td></tr><tr><td>305</td><td>Use Proxy（ 使用代理）</td><td>必须通过代理访问资源， 代理的位置是在 Location首部中给出的</td></tr><tr><td>306</td><td>（ 未用）</td><td>这个状态码当前并未使用</td></tr><tr><td>307</td><td>Temporary Redirect（ 临时重定向）</td><td>和状态码 301 类似。 但客户端应该用 Location 首部给出的 URL对资源进行临时定位</td></tr></tbody></table><h4 id="400-499（已定义400-417）"><a href="#400-499（已定义400-417）" class="headerlink" title="400~499（已定义400~417）"></a>400~499（已定义400~417）</h4><table><thead><tr><th>状态码</th><th>原因短语</th><th>含义</th></tr></thead><tbody><tr><td>400</td><td>Bad request（ 坏请求）</td><td>告诉客户端它发送了一条异常请求</td></tr><tr><td>401</td><td>Unauthorized（ 未授权）</td><td>与适当的首部一起返回， 在客户端获得资源访问权之前， 请它进行身份认证</td></tr><tr><td>402</td><td>Payment Required（ 要求付款）</td><td>当前此状态码并未使用， 是为未来使用预留的</td></tr><tr><td>403</td><td>Forbidden（ 禁止）</td><td>服务器拒绝了请求</td></tr><tr><td>404</td><td>Not Found（ 未找到）</td><td>服务器无法找到所请求的 URL</td></tr><tr><td>405</td><td>Method Not Allowed（ 不允许使用的方法）</td><td>请求中有一个所请求的 URI 不支持的方法。 响应中应该包含一个 Allow 首部，以告知客户端所请求的资源支持使用哪些方法</td></tr><tr><td>406</td><td>Not Acceptable（ 无法接受）</td><td>客户端可以指定一些参数来说明希望接受哪些类型的实体。 服务器没有资源与客户端可接受的 URL 相匹配时可使用此代码</td></tr><tr><td>407</td><td>Proxy Authentication Required（ 要求进行代理认证）</td><td>和状态码 401 类似， 但用于需要进行资源认证的代理服务器</td></tr><tr><td>408</td><td>Request Timeout（ 请求超时）</td><td>如果客户端完成其请求时花费的时间太长， 服务器可以回送这个状态码并关闭连接</td></tr><tr><td>409</td><td>Conflict（ 冲突）</td><td>发出的请求在资源上造成了一些冲突</td></tr><tr><td>410</td><td>Gone（ 消失了）</td><td>除了服务器曾持有这些资源之外， 与状态码 404 类似</td></tr><tr><td>411</td><td>Length Required（ 要求长度指示）</td><td>服务器要求在请求报文中包含Content-Length首部时会使用这个代码。发起的请求中若没有Content-Length 首部， 服务器是不会接受此资源请求的</td></tr><tr><td>412</td><td>Precondition Failed（ 先决条件失败）</td><td>如果客户端发起了一个条件请求， 如果服务器无法满足其中的某个条件， 就返回这个响应码</td></tr><tr><td>413</td><td>Request Entity Too Large（ 请求实体太大）</td><td>客户端发送的实体主体部分比服务器能够或者希望处理的要大</td></tr><tr><td>414</td><td>Request URI Too Long（请 求 URI太长）</td><td>客户端发送的请求所携带的请求 URL 超过了服务器能够或者希望处理的长度</td></tr><tr><td>415</td><td>Unsupported Media Type（ 不支持的媒体类型）</td><td>服务器无法理解或不支持客户端所发送的实体的内容类型</td></tr><tr><td>416</td><td>Requested Range Not Satisfiable（ 所请求的范围未得到满足）</td><td>请求报文请求的是某范围内的指定资源， 但那个范围无效，或者未得到满足</td></tr><tr><td>417</td><td>Expectation Failed（ 无法满足期望）</td><td>请求的 Expect 首部包含了一个预期内容， 但服务器无法满足</td></tr></tbody></table><h4 id="500-599（已定义500-505）"><a href="#500-599（已定义500-505）" class="headerlink" title="500~599（已定义500~505）"></a>500~599（已定义500~505）</h4><table><thead><tr><th>状态码</th><th>原因短语</th><th>含义</th></tr></thead><tbody><tr><td>500</td><td>Internal Server Error（ 内 部 服 务 器错误）</td><td>服务器遇到了一个错误， 使其无法为请求提供服务</td></tr><tr><td>501</td><td>Not Implemented（ 未实现）</td><td>服务器无法满足客户端请求的某个功能</td></tr><tr><td>502</td><td>Bad Gateway（ 网关故障）</td><td>作为代理或网关使用的服务器遇到了来自响应链中上游的无效响应</td></tr><tr><td>503</td><td>Service Unavailable（未提供此服务）</td><td>服务器目前无法为请求提供服务， 但过一段时间就可以恢复服务</td></tr><tr><td>504</td><td>Gateway Timeout（ 网关超时）</td><td>与状态码 408 类似， 但是响应来自网关或代理， 此网关或代理在等待另一台服务器的响应时出现了超时</td></tr><tr><td>505</td><td>HTTP Version Not Supported（ 不支持的 HTTP 版本）</td><td>服务器收到的请求是以它不支持或不愿支持的协议版本表示的</td></tr></tbody></table><blockquote><p>以上资料来自于《HTTP权威指南》，看了一下百度百科，发现有几个新的，后续可能还会增加，所以就不补充进来了，可以查阅百度百科的<a href="http://baike.baidu.com/link?url=rOqqmW08lpN2g6oY7pvcMBWwDlsn7-FOXFqd0oHVu8gZKZcAxHkMzUYfiD963Cnc-n8AfY4rIKH2ubYn64vuR_" target="_blank">HTTP状态码</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;触发整理这篇资料的初心为在工作中，经常看到不规范的HTTP状态码使用，实际的问题原因与应有的原因范围不符，很容易对人造成误解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、状态码分类&quot;&gt;&lt;a href=&quot;#一、状态码分类&quot; class=
      
    
    </summary>
    
      <category term="HTTP" scheme="http://muchstudy.com/categories/HTTP/"/>
    
    
      <category term="HTTP状态码" scheme="http://muchstudy.com/tags/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>HTTP缓存详解</title>
    <link href="http://muchstudy.com/2016/08/18/HTTP%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3/"/>
    <id>http://muchstudy.com/2016/08/18/HTTP缓存详解/</id>
    <published>2016-08-18T04:18:46.000Z</published>
    <updated>2020-04-20T16:53:31.349Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文对我目前所了解的HTTP缓存知识做一个分享，希望能通过本文能让大家对HTTP缓存的基础知识有所了解。</p></blockquote><p>使用缓存有如下几个好处：</p><ul><li>缓存减少了冗余的数据传输， 节省了你的网络费用。</li><li>缓存缓解了网络瓶颈的问题。 不需要更多的带宽就能够更快地加载页面。</li><li>缓存降低了对原始服务器的要求。 服务器可以更快地响应，避免过载的出现。</li><li>缓存降低了距离时延， 因为从较远的地方加载页面会更慢一些。</li></ul><h3 id="一、HTTP请求的过程"><a href="#一、HTTP请求的过程" class="headerlink" title="一、HTTP请求的过程"></a>一、HTTP请求的过程</h3><img src="/2016/08/18/HTTP缓存详解/1.jpg" title="浏览器-源服务器请求过程"><p>&emsp;&emsp;我们可以知道，从在浏览器地址栏敲入域名-DNS解析-实际IP-（中间可能多个代理服务器分发）- 源服务器，请求抵达源服务器后，在服务器上找到请求的资源，再通过代理服务器一层层的返回数据到浏览器端。</p><p>&emsp;&emsp;缓存要解决的核心问题为减少客户端对源服务器的HTTP请求，提升性能。试想，像jquery、bootstrap这种更新不频繁的资源当然没有必要每次都从源服务器上获取。</p><blockquote><p>实际上大部分静态文件在下一次内容更新之前都没有必要再走一遍网络从源服务器获取</p></blockquote><h3 id="二、服务器控制缓存的能力"><a href="#二、服务器控制缓存的能力" class="headerlink" title="二、服务器控制缓存的能力"></a>二、服务器控制缓存的能力</h3><blockquote><p>当客户端<code>第一次</code>请求服务器端的资源时，服务器端可以通过如下几种方式控制资源的缓存能力。</p></blockquote><ol><li><code>Cache-Control:no-store</code>,禁止缓存对响应进行复制。</li><li><code>Cache-Control:no-cache</code>,以前老认为这个是不缓存的意思，下面从《HTTP权威指南》摘录一段解释：标识为 no-cache 的响应实际上是可以存储在本地缓存区中的。 只是在与原始服务器进行新鲜度再验证之前，缓存不能将其提供给客户端使用。这个首部使用 donot-serve-from-cache-without-revalidation 这个名字会更恰当一些。</li><li><code>Cache-Control: must-revalidate</code>,在事先没有跟原始服务器进行再验证的情况下，不能提供这个对象的陈旧副本。 缓存仍然可以随意提供新鲜的副本。如果在缓存进行 must-revalidate 新鲜度检查时，原始服务器不可用，缓存就必须返回一条 504 Gateway Timeout 错误。</li><li><code>Cache-Control: max-age=3600</code>,从服务器将文档传来之时起， 可以认为此文档处于新鲜状态的秒数。</li><li><code>Expires: Fri, 05 Jul 2002, 05:00:00 GMT</code>,实际的过期日期,不推荐使用。</li><li><code>不附加过期信息，让缓存确定自己的过期日期</code>,如果响应中没有 Cache-Control: max-age 首部， 也没有 Expires 首部， 缓存可以计算出一个试探性最大使用期。 可以使用任意算法， 但如果得到的最大使用期大于 24 小时， 就应该向响应首部添加一个 Heuristic Expiration Warning（ 试探性过期警告， 警告 13） 首部。LM-Factor 算法是一种很常用的试探性过期算法。</li></ol><h3 id="三、强缓存"><a href="#三、强缓存" class="headerlink" title="三、强缓存"></a>三、强缓存</h3><blockquote><p>浏览器强缓存什么意思呢，就是说当请求一个资源时，直接从本地的浏览器缓存中读取，不发起HTTP请求，对于源服务器来讲，好爽！~~  </p></blockquote><p>下面是京东首页的截图<br><img src="/2016/08/18/HTTP缓存详解/2.jpg" title="浏览器强缓存"></p><blockquote><p>像这种显示<code>from cache</code>的就是直接读取的浏览器本地缓存，那么HTTP是如何控制直接读取本地缓存的呢？有如下两种方式。</p></blockquote><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Expires</td><td>响应失效的日期和时间。类似于：<code>Expires:Sat, 20 Aug 2016 01:40:57 GMT</code>，绝对值，告诉客户端在这个时间点之后资源过期，需要重新从服务器取。</td></tr><tr><td>Cache-Control</td><td>类似于：<code>Cache-Control:max-age=315360000</code>，相对值，在多久后过期</td></tr></tbody></table><blockquote><p>通过上面两种方式，当资源的缓存还在有效期时，浏览器直接从本地缓存中取资源，而不是发起HTTP请求从源服务器取。由于客户端与服务器端存在时间差，Expires并不是那么的靠谱，所以建议使用max-age</p></blockquote><h3 id="四、协商缓存"><a href="#四、协商缓存" class="headerlink" title="四、协商缓存"></a>四、协商缓存</h3><blockquote><p>当浏览器强缓存过期后，就会触发协商缓存机制。这个时候需向服务器发送一个http请求，带上如下列表中的头部信息，如果符合规则（即服务器跟客户端资源一致），直接返回304,不再返回资源内容；否则，返回状态码200与资源内容；最后，更新缓存头信息。</p></blockquote><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>If-Modified-Since</td><td>告诉服务器只要服务器在这个时间之后又对资源做了修改则发送该资源</td></tr><tr><td>If-None-Match与ETag</td><td>根据资源内容是否变更来判断是否继续使用本地缓存。第一次请求资源时，服务器在response头信息中设置ETag，当资源过期后再次向服务器请求时用<code>If-None-Match:ETag</code>去验证资源是否变更</td></tr></tbody></table><blockquote><p>从《HTTP权威指南》中截个图来说明If-None-Match与ETag如何使用的<br><img src="/2016/08/18/HTTP缓存详解/3.jpg" title="If-None-Match与ETag"></p></blockquote><p>&emsp;&emsp;当本地缓存过期后，客户端如何知到该使用上述哪种方式呢？其实，在客户端第一次请求资源时，服务器需要带上<code>Last-Modified</code>与<code>ETag</code>，然后缓存起来，当缓存失效重新进行新鲜度检查时，这两个头部就可以派上用场了。一般来说，<code>ETag</code>的优先级高于<code>Last-Modified</code>。</p><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>&emsp;&emsp;上面分享了缓存的基础知识，在实际情景中，最理想的情况我们当然希望所有静态资源都使用强缓存，当第一次使用资源后，下一次就不再从源服务器取，而是直接从本地获取，这样一来就大大减轻了服务器的压力。But！如果这样的话，那当下一版本发布，用户如何拿到我的更新呢？</p><p>&emsp;&emsp;这里已经有一个讲得<a href="https://www.zhihu.com/question/20790576" target="_bank">通熟易懂的轮子</a>了，我就不再重新造了。</p><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文对我目前所了解的HTTP缓存知识做一个分享，希望能通过本文能让大家对HTTP缓存的基础知识有所了解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用缓存有如下几个好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓存减少了冗余的数据传输， 节省了你的网络费用。
      
    
    </summary>
    
      <category term="HTTP" scheme="http://muchstudy.com/categories/HTTP/"/>
    
    
      <category term="缓存" scheme="http://muchstudy.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>哈佛大学公开课《死亡》</title>
    <link href="http://muchstudy.com/2016/08/17/%E5%93%88%E4%BD%9B%E5%A4%A7%E5%AD%A6%E5%85%AC%E5%BC%80%E8%AF%BE%E3%80%8A%E6%AD%BB%E4%BA%A1%E3%80%8B/"/>
    <id>http://muchstudy.com/2016/08/17/哈佛大学公开课《死亡》/</id>
    <published>2016-08-17T15:41:25.000Z</published>
    <updated>2016-08-20T08:02:51.690Z</updated>
    
    <content type="html"><![CDATA[<img src="/2016/08/17/哈佛大学公开课《死亡》/1.png" title="Professor"><p>下载地址：<a href="http://data.movie.kankan.com/movie/65382" target="_blank" rel="noopener">http://data.movie.kankan.com/movie/65382</a><br>目录：<br><img src="/2016/08/17/哈佛大学公开课《死亡》/2.png"></p><p>笔记：  </p><ul><li>1、二元论，首先身体（body）和灵魂（soul）有一定的互动，如果身体的死亡可以描述为b1-bn，那么伴随着b1-bn会不会也存在S1-Sn呢？即灵魂跟身体一起死亡。</li><li>2、当我们在电视机里看到曼哈顿的新闻，我们可能会认为我们就在曼哈顿，因为身体而戴上有色眼镜，那么soul是否也有可能在别处？</li><li>3、描述死亡，首先得对死亡下定义，给“存在”下定义，对于我是谁这个问题，就得首先找出对于我有哪些属性，去掉这些属性呢？</li><li>4、a smile是为了表述肉体具有微笑的能力，是对一系列事件的综合描述，并不是代表smile是存在的某一事物，那soul呢？</li><li>5、一元论认为，心灵并不代表大脑，而只是身体具有一系列属性的整体描述而已，就跟smile一样。</li><li>6、看不见的病毒造成我们生病，而不是魔鬼，这种属于“最佳解释”，b1-bn导致s1-sn呢？</li><li>7、二元论反驳认为，人会不会是上帝创造的机器人，是先注入soul，自由意识是否也属于上帝所划分的范围之内？</li><li>8、通过对象棋程序的拟人话，是否能说明任何存物理对象都不能真正又有信念和欲望呢？信念和欲望只是我们强加的一个词汇而已</li><li><p>9、free will 自由意志</p></li><li><p>推论：</p><blockquote><p>1.我们有自由意识<br>2.任何服从决定论的系统都没有自由意识<br>3.所有纯物理系统的准守决定论<br>4.我们不仅仅是纯物理系统</p></blockquote></li><li><p>10、柏拉图认为，对于像数字加减这种，数字是不存在的，身体无法掌握，必然需要soul</p></li><li><p>推论：</p><blockquote><p>1.理念或者型向是永恒的 是非现实的<br>2.永恒和非现实的事物只能被永恒和非现实的事物所认知<br>3.能认知理念或型向的事物必须是永恒和非现实的<br>非物理的—not the body</p></blockquote></li><li><p>11、苏格拉底的回忆论认为灵魂出现在我们之前，举个简单的例子，当看到一张相片，我们必须对相片上的人之前认识或熟悉才能认识这张相片，对于圆形之类的东西，肯定是我们的前世有所认知，才能够在现在能认知</p></li><li><p>12、越简单越无懈可击</p></li><li><p>柏拉图的推论：</p><blockquote><p>1.只有合成的事物才能被摧毁<br>2.只有会改变的事物才是合成的<br>3.无形的事物不会被改变<br>4.无形的事物不会被摧毁<br>5.灵魂是无形的<br>6.so 灵魂无法被摧毁<br>赛贝斯：以上论点并不能说明soul不朽，也有可能经过几世不断泯灭</p></blockquote></li><li><p>研究哲学的经常在自己画的圈里找出口</p></li><li><p>13、灵魂理论，即使活下去也没多大意义.who cares？ so what ？ 那又怎样呢   重要的不是活下去，而是带着相同的人格活下去</p></li><li>14、 we are die alone.</li><li>15、当我们存在时，死亡还未降临，当死亡来临时，我们已不复存在</li><li>16、剥夺说从一个方面解释了我们害怕死亡的原因</li><li>17、对于不朽，没有任何生活对于一个人永远有吸引力</li><li>18、如果从死亡可以解除年老时带来的一些痛苦，那么死亡并不是一件坏事</li><li>19、如果你陷入永生的怪圈，那么你想过一种怎么样的生活？</li><li>20、正因为生活中包含无数的意外以及相对负面的东西才使生活充满了乐趣以及无限的可能，产生不同的人生体验，同时包含完美与不完美的世界才能称得上是完美的</li><li>21、“上帝制作了泥人，上帝烦了。所以上帝对一些泥人说，‘站起来。看我创造的一切。高山，大海，天空，星辰。’我就是那种坐起来环顾四周的泥人。幸福的我，幸福的泥人。我，一个泥人坐了起来，看见了上帝创造的奇迹。你太棒了，上帝！世界上只有您上帝才能做到这一切！我当然不能。和您相比，我感到自己十分渺小。一想到还有许多泥人未能做起来环顾四周，我便感到自己还有一点重要。我已经得到这么多，而大多数泥人却一无所获。谢谢您的垂顾！现在泥人又躺下睡了，泥人又多少值得回忆的事啊！我曾和多少有趣的坐起来的泥人见过面啊！我爱我看见过的一切。”</li></ul><p>摘自 库尔特·冯内古特《猫的摇篮》</p><blockquote><p>“God made mud. God got lonesome. So God said to some of the mud, ‘Sit up.See all I’ve made,’ Said God. ‘The hills, the sea, the sky, the stars.’ And I, with some of the mud, had got to sit up and look around. Lucky me, lucky mud. I, mud, sat up and saw what a nice job God had done. Nice going God! Nobody but you could have done it God! I certainly couldn’t have. I feel very unimportant compared to You. The only way I can feel the least bit important is to think of all the mud that didn’t even get to sit up and look around. I got so much, and most mud got so little. Thank you for the honor! Now mud lies down again and goes to sleep. What memories for mud to have! What interesting other kinds of sitting-up mud I met! I loved everything i saw.”</p></blockquote><p>from Kurt Vonnegut &lt;Cat’s Cradle&gt;</p><ul><li>22、应当为成为坐起来的泥人而感到幸运</li><li>23、我们对失去生命无能为力，唯一能做的是让它更有价值，让有限的人生更饱满</li><li>24、在合理条件下，自杀也有其合理性</li><li>25、我们只是这个世界的过客，we are on this earth for a while,and then we’re not anymore!</li><li>26、There is no soul,we are just machines.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2016/08/17/哈佛大学公开课《死亡》/1.png&quot; title=&quot;Professor&quot;&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;http://data.movie.kankan.com/movie/65382&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
      <category term="哲学" scheme="http://muchstudy.com/tags/%E5%93%B2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>真、善、美</title>
    <link href="http://muchstudy.com/2016/08/16/%E7%9C%9F%E3%80%81%E5%96%84%E3%80%81%E7%BE%8E/"/>
    <id>http://muchstudy.com/2016/08/16/真、善、美/</id>
    <published>2016-08-16T15:10:41.000Z</published>
    <updated>2016-08-16T15:15:05.985Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;很小的时候从书本上就听说了这几个字，到真正理解这几个字的含义之前，姑且只能算作是认识而已，给我的感觉就是普普通通，平平凡凡，没有什么特别的含义。  </p><p>&emsp;&emsp;谈到我对这几个字的理解，要从一本书开始，这本书叫做《晚霞消失的时候》，看完这本书后，可以说是对我影响很大，对野蛮与文明，对真善美的理解真的是重重的hit my heart！让我对这几个字有了深刻的认识，当我再次见到这几个字的时候脑中不再空洞无物。  </p><p>&emsp;&emsp;用自己的话来讲，数学，万事万物不变的逻辑，一杯水、一个苹果，这些实实在在的东西，这是“真”；看到一幅画、一片风景、一株小花而生出的情愫、“我见青山多妩媚，料青山见我应如是”、听到一首歌而莫名的感动，这是“美”；如今我把知道的花时间写出来，助人为乐、舍己为人、这是“善”。读了这么多的书，发现所有的宗教，不管是佛教、基督教、道教都有一个共通的地方，那便是“善”。  </p><p>&emsp;&emsp;这几个字在我眼中变得不再平凡后，我发现我自己也莫名其妙的有了一些变化。突然间有了一种向往真善美，追求真善美的劲儿，感觉这是一股能给我力量的劲儿，推动着我去感受真善美、接近真善美。  </p><p>&emsp;&emsp;比如以前对字画书法不感冒，现在莫名喜欢上了字画书法所透露出来的那一股美感，逛历史古迹比以前多留意了一些碑刻、字画、书法、从一些对联中体会到文字的美；通过文字透露出来的美与真（哲理），从而感觉跟古人有了一次亲密接触，深深体会到老子、庄子、孔子为什么值得人崇拜，为什么大师称之为大师，这些人在我的脑子中也不再是仅仅一个名字那么简单，而是异常丰满，让人敬仰。对于宗教，让我意识到为什么要拜释迦摩尼，不是因为有所求，而是因为深深的敬仰、佩服！~被他的思想深深的折服那种佩服、感动、感激！~对于音乐而言，经常听着听着好像走进了创作者的内心世界，跟着创作者一起喜怒哀乐，这种感觉真是妙不可言，一个不注意就会让人泪流满面。理解了在《久石让在武道馆》中，演奏完一曲，久石让转过身向观众鞠躬，抬起头来一脸笑容，让人不解的是一脸笑容的同时居然满眼泪水，我想，他的眼泪应当是沉浸在音乐中被音乐之美而感动所留下来的眼泪，怪不得久石让的音乐那么好听，原来他跟上帝有过亲密接触! 终于也理解了什么叫做“感动得哭了”，什么叫做“喜极而泣”，理解了“念天地之悠悠，独怆然而涕下”的真正意境，理解了佛学中“空”，道家中的“道”的真正含义。  </p><p>&emsp;&emsp;总结起来就这么一句话，追求真的，是科学，追求美的，是艺术，追求善的，这就是宗教。  </p><p>&emsp;&emsp;不管是谁，都有一颗追求真善美的心，只有对真善美的追求与感受才能使人的精神不再空虚与空洞，感谢上帝让世间存在“真善美”！没有它们，我想人类的精神世界将会是一片荒芜！  </p><p>&emsp;&emsp;把这些文字写下来，希望看到它的人能够因此而能够蜕变，这也算是功德一件吧，”善”哉！~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;很小的时候从书本上就听说了这几个字，到真正理解这几个字的含义之前，姑且只能算作是认识而已，给我的感觉就是普普通通，平平凡凡，没有什么特别的含义。  &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;谈到我对这几个字的理解，要从一本书开始，这本书叫做《晚霞消失的
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
      <category term="随笔" scheme="http://muchstudy.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>《失控》</title>
    <link href="http://muchstudy.com/2016/08/16/%E3%80%8A%E5%A4%B1%E6%8E%A7%E3%80%8B/"/>
    <id>http://muchstudy.com/2016/08/16/《失控》/</id>
    <published>2016-08-15T16:19:35.000Z</published>
    <updated>2016-08-20T05:55:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这本书因为种种原因断断续续读了一年才读完，把整本书中觉得有价值的东西以及读书过程中记录的笔记整理出来也花了不少时间，不想去看砖头的可以通过下文了解到整本书到底讲了些什么。对于书中的各种脑洞，欢迎探讨。</p></blockquote><h3 id="第一章-人造与天生"><a href="#第一章-人造与天生" class="headerlink" title="第一章 人造与天生"></a>第一章 人造与天生</h3><p>　　 1.1 新生物文明<br>　　 1.2 生物逻辑的胜利<br>　　 1.3 学会向我们的创造物低头<br>Notes and Thinking：  </p><ol><li>自然不仅仅是一个储量丰富的生物基因库，还是一个“文化基因库”</li><li>文化基因（meme）：也称弥母，文化传播的最小单位，通过模仿等非遗传途径而得以代代相传。</li><li><code>相对于机械系统，生物系统更具优势，从生物系统角度看，Person just a machine.</code></li><li>我们的未来是技术性的，但这并不意味着未来的世界一定会是灰色冰冷的钢铁世界。相反，我们的技术所引导的未来，朝向的正是一种新生物文明。</li><li>在将生命的力量释放到我们所创造的机器中的同时，我们就丧失了对他们的控制。他们获得了野性，并因野性而获得一些意外和惊喜。之后，就是所有造物主都必须面对的两难窘境：他们将不再完全拥有自己最得意的创造物。</li></ol><h3 id="第二章-蜂群思维"><a href="#第二章-蜂群思维" class="headerlink" title="第二章 蜂群思维"></a>第二章 蜂群思维</h3><p>　　 2.1 蜜蜂之道：分布式管理<br>　　 2.2 群氓的集体智慧<br>　　 2.3 非匀质的看不见的手<br>　　 2.4 认知行为的分散记忆<br>　　 2.5 从量变到质变<br>　　 2.6 群集的利与弊<br>　　 2.7 网络是二十一世纪的图标<br>Notes and Thinking：  </p><ol><li>蜂群是彻底的母权制，蜜蜂群体分为蜂后，少量雄蜂，大量工蜂。工蜂最可怜，出生时蜂王浆吃得少（如果连吃5天蜂王浆则会发育为蜂后，即每只工蜂都有机会成为蜂后），羽翼未丰时照管和饲养幼虫，能分泌蜂胶时筑巢，没办法分泌蜂胶后就白天采蜜、晚上酿蜜，直至死亡，平均生命时间为45天。当蜜蜂蜇人后，由于毒针跟内脏相连，所以自己也会死亡，完全是以命相搏！</li><li>群氓可以涌现出集体智慧，<code>人的思维、智慧也有可能是集体涌现的结果</code></li><li>“蜂群思维”的神奇在于，没有一只蜜蜂在控制它，但是有一只看不见的手，一只从大量愚钝的成员中涌现出来的手，控制着整个群体。</li><li>动听的音乐从和弦中涌现出来，波浪也是一种涌现</li><li><code>汽车由很多零件组成，人也一样，“人”跟“汽车”其实都是一个组成体的简称，同理，“我”也一样。</code></li><li><code>“上帝”可以理解为一只无形的看不见的自然之手，道家之谓“道”，佛家之谓“不可说”。</code></li><li><code>我是谁？我从哪里来？要到哪里去？迎刃而解</code></li><li><code>当重现某一段经历时，实际上是重新进行了组合，且每次回忆起来都会重新进行组合。每次组合即印象加深，并留存下来，重组得越少，则不被保存下来的几率越大。</code></li><li>我们的意识正是通过许许多多散布在记忆中的线索创造了现在。</li><li><code>强调重要的东西，忽略不重要的东西，这种选择过程实际上就是感知。</code></li><li>稀疏分布记忆</li><li>漩涡是一种涌现的事物——如同群一样，它的能量及结构蕴涵于群体而非单个水分子的能量和特性之中。不论你多么确切地了解H2O（水的分子式）的化学特征，它都不会告诉你任何有关漩涡的特征。</li><li>群聚的个体孕育出必要的复杂性，足以产生涌现的事物。随着成员数目的增加，两个或更多成员之间可能的相互作用呈指数级增长。当连接度高且成员数目大时，就产生了群体行为的动态特性。——量变引起质变。</li><li>网络在哪里出现，哪里就会出现对抗人类控制的反叛者。</li><li>网络不断孕育着小的故障，以此来避免大故障的频繁发生。正是其容纳错误而非杜绝错误的能力，使分布式存在成为学习、适应和进化的沃土。</li><li>由真正多元化的部件所组成的群体只有在网络中才能相安无事。其它结构——链状、金字塔状、树状、圆形、星形——都无法包容真正的多元化、以一个整体的形式运行。这就是为什么网络差不多与民主和市场意义等同的原因。</li><li>为已经拥堵的网络增加线路只会使其运行速度更慢，称其为布拉斯悖论。</li><li>群体的利：可适应、可进化、弹性、无限性、新颖性；缺陷：非最优、不可控、不可预测、不可知、非即刻；</li></ol><h3 id="第三章-有心智的机器"><a href="#第三章-有心智的机器" class="headerlink" title="第三章 有心智的机器"></a>第三章 有心智的机器</h3><p>　　 3.1 取悦有身体的机器<br>　　 3.2 快速、廉价、失控<br>　　 3.3 众愚成智<br>　　 3.4 嵌套层级的优点<br>　　 3.5 利用现实世界的反馈实现交流<br>　　 3.6 无躯体则无意识<br>　　 3.7 心智/躯体的黑盲性精神错乱<br>Notes and Thinking：  </p><ol><li>任何机器人只要能够做到独立行走和独立生存，就会更上层楼。</li><li>一直以来主流的机器人研发、人造生物、人工智能走的都是中枢指挥的套路</li><li>意识的各种功能，比如思考，都来自不司职思考的部分。爬虫似的移动机器人所具有的半意识，就是动物和人类意识的极好样本。意思也是一个组合体的概念</li><li>即使给定一个起点，其结果也并非命中注定。没有可重复的结局，有的只是随机而生的结果。某个特定念头的涌现，都需要借助一点点运气。</li><li>”我“是我们内心世界的一个笼统外延，我们以此来区分自己和他人。一旦”我“失去了”我“，就会忙不迭地创设一个”我“。明斯基说，我们正是这么做的。世上本无”我“，庸人自设之。它就如同亿万个水分子汇成的瞬间的漩涡，指尖轻轻一碰，便即销饵无形。然而须臾之际，那些分布在低层的乌合之众又搅起了漩涡。这个漩涡是新象，抑或是旧影？你有过濒死体验吗？是感觉浴火重生呢，还是历经沧桑？如果本书的章节打乱次序，还会是原来这本书吗？想想吧，想到白头愁未解，你就明白什么是分布式系统了。</li><li>自上而下的控制就如同将乘积分解成因子一样困难，而用因子来得乘积则非常容易。</li><li>底层的活动较快，上层的活动较慢</li><li>利用现实世界的反馈实现交流——-程序中的监听和回调</li><li><code>意识从愚笨的身体中生长出来，思考即行动，行动即思考</code></li><li>到了1968年，脑死亡已经成为判断临床死亡的依据。无意识则无生命。</li><li>黑盲性精神错乱—–   一些人在极度无聊的时候会出现诡异的幻觉</li><li>自然进化强调我们是猿类；而人工进化则强调我们是有心智的机器。</li></ol><h3 id="第四章-组装复杂性"><a href="#第四章-组装复杂性" class="headerlink" title="第四章 组装复杂性"></a>第四章 组装复杂性</h3><p>　　 4.1 生物——机器的未来<br>　　 4.2 用火和软体种子恢复草原<br>　　 4.3 通往稳定生态系统的随机路线<br>　　 4.4 如何同时做好一切<br>　　 4.5 艰巨的“拼蛋壳”任务<br>Notes and Thinking：  </p><ol><li>火使草原有效地运转。它使那些需要浴火重生的种子得以发芽，将那些入侵的树苗一笔抹去，让那些经不起考验的“城里人”望而却步。</li><li>浴火重生的种子：某些硬壳类植物种子，非火烧去外壳不能发芽。比如澳洲桉树的种子有厚厚的木质外壳，借助大火把它的木质外壳烤裂，便于生根发芽。因此桉树林就像凤凰，大火过后不仅能获得新生，而且会长得更好。</li><li>借助拇指的抓握，灵巧的手使人类的智能更进一步，具备了制造工具的能力。但是一旦智能建立，手就没那么重要了。</li><li>只要所有的碎片都还存在，我们就能将其还原。只是，不知道我们能否还能得到所有的碎片。也许陪伴生态系统早期发展的某些物种——正如助推智能发展的拇指——在附近已不复存在了</li></ol><h3 id="第五章：共同进化"><a href="#第五章：共同进化" class="headerlink" title="第五章：共同进化"></a>第五章：共同进化</h3><p>　　 5.1 放在镜子上的变色龙是什么颜色的？<br>　　 5.2 生命之无法理喻之处<br>　　 5.3. 在持久的摇摇欲坠状态中保持平衡<br>　　 5.4. 岩石乃节奏缓慢的生命<br>　　 5.5. 不讲交情或无远见的合作<br>Notes and Thinking：  </p><ol><li><code>每个消费者都将成为反射镜像与反射体，既是因，也是果。</code></li><li>而蜥蜴-镜子系统展示的是一种完全不同的逻辑——一种网状的因果循环。相对于佛家的因果循环，此种循环在社会中更合理。</li><li>物质世界中，一件事对另一件事的影响随两者之间的时间或空间距离的增大而衰减。</li><li>事物的推演不像箭那样直线行进，而是像风一样四散开来。</li><li>为了防止蝴蝶幼虫完全吞噬自己的茎叶，马利筋步步设防，迫使黑脉金斑蝶“改变颜色”－－想法子绕过植物的防线。这种相互投映仿佛两条贴着肚皮跳舞的变色龙。马利筋如此投入地进行自我保护，以抗拒黑脉金斑蝶的侵袭，结果反而变得与蝴蝶难舍难分。反之亦然。任何长期敌对的关系似乎都包容这样的相互依存。1952年，关注机器如何学习的控制论专家罗斯?艾希比写道：“［生物的基因模式］并没有具体规定小猫如何抓老鼠，但是提供了学习机制和游戏的旨趣，因此是老鼠将捕鼠的要领教给了小猫。”</li><li>二战之后的核军备竞赛让我们同样有种愚蠢地追赶自我倒影的感觉。</li><li>物种的进化与其所处环境的演变密不可分</li><li>任何有生命的星球，都会展现奇特的不稳定的化学性质。有益生命的大气层不一定富含氧气，但应该突破规范的平衡。那只看不见的手就是共同进化的生命。</li><li>大气层像一个高空悬索上摇摇摆摆的杂技演员，而且几百万年来一直保持着那个欲跌还休的姿势。她永不坠落，也永远摆脱不了坠落的趋势，始终处于摇摇欲坠的状态。</li><li>进化的不只是生物或物种，而是物种加环境的整个系统。没有生命，地球的脸面就会失去表情，变得像月球般木然。生命是最具威力的地质力量</li><li><code>引入少许的随机因素（如差错、缺陷）反而能够在共同进化的世界里缔造出长久的稳定</code></li><li>人们常用零和游戏的观点看世界，其实他们本不该这样。他们常说：“我比别人做得好，所以我就该发达。”而在非零和游戏里，尽管你比别人做得好，你也可能和他一样潦倒</li></ol><h3 id="第六章-自然之流变"><a href="#第六章-自然之流变" class="headerlink" title="第六章 自然之流变"></a>第六章 自然之流变</h3><p>　　 6.1 均衡即死亡<br>　　 6.2 谁先出现，稳定性还是多样性？<br>　　 6.3 生态系统：超有机体，抑或是身份作坊？<br>　　 6.4 变化的起源<br>　　 6.5 生生不息的生命<br>　　 6.6 负熵<br>　　 6.7 第四个间断：生成之环<br>Notes and Thinking：  </p><ol><li>这些“小联邦”之间保持着动态的平衡，它们相互间自我维持的姿态持续保持着将跌未跌的状态，就像春天溪流中的驻波。</li><li>振动频率、振幅和传播速度相同而传播方向相反的两列波叠加时，就产生驻波。</li><li>生态学家偏爱自然界中的各种均衡状态，其主要原因和经济学家偏爱经济中的各种均衡状态相同：均衡态可以用数学模型来表达，你可以为一个过程写出你能够求解的方程。但如果你说这个系统永远处于非均衡状态，你就是在说它的模型是无法求解的，也就无从探究。那就相当于你几乎什么都没说。</li><li>不稳定的自然力量是多样性产生的根源</li><li>与简单的系统相比，复杂的系统更有可能不稳定</li><li>当食物链越长，环境破坏带来的影响就会使得互相作用的食物链网越不稳定</li><li>由许多成员组成的系统成员彼此之间的联系会很弱，而成员很少的系统其成员彼此间的联系会很紧密</li><li>连接性守恒：意指由连接数量和连接强度组成的某种形式的合量保持不变，即连接数量增加时，强度降低；反之亦然。</li><li>群落演替的最终阶段是顶级群落</li><li>若依普通的物理度量，无论是质量还是能量，松鸡在一英亩的土地生态系统中仅是沧海一粟。但是若从系统里拿走松鸡，整个系统也就停转了</li><li>生态系统更应是身份作坊</li><li>身份作坊：进化到某处，自然而然地涌现出来的，因而是漫无目的的、作坊式的、细敲碎打的。</li><li>从控制论的角度看，象蝌蚪这样的有机体和淡水沼泽这样的生态系统之间控制方式的不同在于，单个有机体受到严格紧密的束缚，而生态系统则宽松自由，不受束缚</li><li>想要得到和生命真正类似的行为，不是设法创造出真正复杂的生物，而是给简单的生物提供一个极其丰饶的变异环境</li><li><code>每个人的出生情况都大致相同，每一例死亡却不相同</code></li><li>活系统的复杂性越高，里面栖息的生命力就可能越多</li><li>热寂和熵减的关系：本书作者在2008年的一次访谈中说道：“人们都说，没有什么能逃脱冷酷的热力学第二定律，宇宙的最后归宿是一片热死寂。但这不是故事的全部，宇宙在沉寂的同时，也在热闹起来，从旧物中带来新生、增加复杂性的新层次。宇宙充满了无尽的创造力。熵和进化，两者就象两支时间之矢，一头在拖拽着我们退入无穷的黑暗，一头在拉扯着我们走向永恒的光明。”</li><li>最大化扩张的属性是活物与生俱来的，就如同热从温度较高的物体传到温度较低的物体，可溶性物质溶入溶剂，以及气体扩散到空间。</li><li>假如我们这个物种不走在前头，别的物种就会带头，也许已经走在前头了。假如我们这个物种灭绝，其它物种会更聪明更幸运。</li><li>哥白尼排除了地球和物理宇宙其他部分之间的间断。接着，达尔文排除了人类和有机世界其他部分之间的间断，最后，弗洛伊德排除了自我的理性世界和无意识的非理性世界之间的间断。但是正如历史学家和心理学家布鲁斯?马兹利士所指出的，我们依然面对着第四个间断，人类和机器之间的间断。</li><li>我们正在跨越这第四个间断。我们不必在生物或机械间选择了，因为区别不再有意义。确实，这个即将到来的世纪里最有意义的发现一定是对即将融为一体的技术和生命的赞美、探索与开发利用。</li></ol><h3 id="第七章-控制的兴起"><a href="#第七章-控制的兴起" class="headerlink" title="第七章 控制的兴起"></a>第七章 控制的兴起</h3><p>　　 7.1 古希腊的第一个人工自我<br>　　 7.2 机械自我的成熟<br>　　 7.3 抽水马桶：套套逻辑的原型<br>　　 7.4 自我能动派<br>Notes and Thinking：  </p><ol><li>机械控制、人类可控制，电路自动化。由蒸汽机所引发的能量控制是第一阶段。而对物质的精确控制，就是控制体制的第二阶段。控制革命的第三阶段，是对信息本身的控制。</li><li>反馈回路，A引发B，B引发C，C又引发A。以一种直白的悖论形式来说：A既是原因，又是结果。</li><li><code>3种语言互编译，组成圈，完美的语言。道生一，一生二，二生三，三生万物。</code></li><li><code>三方机构、民主、活系统</code></li><li><code>如果有什么东西既是因又是果的话，那么所谓的理性，岂非对任何人来说都是唾手可得之物？</code></li><li>自我从何而来？控制论给出了这样让人摸不着头脑的答案：它是从它自己那里涌现出来的。而且没有别的法子。</li><li><code>我是谁？我就是我！</code></li><li>衔尾蛇是人类灵魂在永恒概念上的最经典的投影之一。</li><li>一个活系统就是一个“缓慢地进行自我复原的同义反复。”</li><li>自动化的历史，就是一条从人类控制到自动控制的单向通道。其结果就是从人类的自我到第二类自我的不可逆转的转移。而这些第二类自我是在我们控制之外的，是失控的。</li><li>要想获得有智能的控制，唯一的办法就是给机器自由。</li></ol><h3 id="第八章-封闭系统"><a href="#第八章-封闭系统" class="headerlink" title="第八章 封闭系统"></a>第八章 封闭系统</h3><p>　　 8.1 密封的瓶装生命<br>　　 8.2 邮购盖亚<br>　　 8.3 人与绿藻息息相关<br>　　 8.4 巨大的生态技术玻璃球<br>　　 8.5 在持久的混沌中进行的实验<br>　　 8.6 另外一种合成生态系统<br>Notes and Thinking：  </p><ol><li>地球在物质上是一个封闭系统。而另一方面，从能量/信息的角度来看，地球又是开放的：阳光照射着地球，信息则来来去去。</li><li>无论能够生存多长时间，这些瓶装系统都需要一个启动阶段，一个大概会持续60到100天的波动危险期，在此期间任何意外都可能发生。复杂性的开端植根于混沌之中。不过，如果复杂系统能够在一段时间的互相迁就之后获得共同的平衡，那么之后就再没有什么能够让它脱离轨道了。</li><li><code>地球的启动阶段如何来？</code></li><li>那些引起我们注意的生物，那些需要我们照料的生物，就环境而言，可能仅仅是一些点缀性的、装饰性的东西。正是哺乳动物肠道中的微生物，还有黏附在树根上的微生物，使树木和哺乳动物在包括地球在内的封闭系统中有了价值。</li><li>生态球</li><li>生态球越大，达到稳定所需时间就越长，破坏它也就越困难。</li><li>一个完美的生态球，就是一个完善的自循环系统，可以称之为一个新的世界。</li><li><code>多样性保证了稳定性</code></li><li>设计一个生态群系，实际上是一个像上帝一样去思考的机会</li><li>作为一个上帝，能够从无中生出某种有来。你可以创造出某些东西——某些奇妙的、合成的、活生生的生态系统——但是对于其中到底会进化出什么，你是控制不了的。</li><li>生物圈二号的结局：在经过两年半的实验后，生物圈二号宣告其长期维持八个人生存的努力失败。原因主要有化学元素循环平衡失调、物种关系失调、水循环失调、食物短缺等。2005年该工程被出售，现在已用于观光和社区建设。</li></ol><h3 id="第九章-“冒出”的生态圈"><a href="#第九章-“冒出”的生态圈" class="headerlink" title="第九章 “冒出”的生态圈"></a>第九章 “冒出”的生态圈</h3><p>　　 9.1 一亿美元玻璃方舟的副驾驶<br>　　 9.2 城市野草<br>　　 9.3 有意的季节调配<br>　　 9.4 生命科学的回旋加速器<br>　　 9.5 终极技术<br>Notes and Thinking：  </p><ol><li>生物圈二号是一个试验工作台，用来揭示环境如何统治浸入其中的生物，以及生物如何反过来支配环境。大气是极为重要的环境因素，大气产生生命，而生命也产生大气。结果表明，生物圈二号这个透明的玻璃容器是观察大气和生命交互作用的理想场所。</li><li>大气中的二氧化碳含量每天都呈周期性变化</li><li>生物圈二号的管理机构SBV寄望于从该项目中剥离出一种潜在的盈利技术——精密的环境监控技术</li><li>生物圈二号是生命科学的回旋加速器</li><li>表面上为人类搭建的生物圈，实际上代表的是行星尺度内的生物系统的复制……</li><li>如果我们真想在太空中过人类一样的生活，那么我们就必须学会如何建立生态圈</li><li>生命就是技术。生命是终极技术。机器技术只不过是生命技术的临时替代品而已。</li><li>总有一天，机器和生物间的差别会很难区分</li></ol><h3 id="第十章-工业生态学"><a href="#第十章-工业生态学" class="headerlink" title="第十章 工业生态学"></a>第十章 工业生态学</h3><p>　　 10.1 全天候、全方位的接入<br>　　 10.2 看不见的智能<br>　　 10.3 咬人的房间与不咬人的房间<br>　　 10.4 规划一个共同体<br>　　 10.5 闭环制造<br>　　 10.5 适应的技术<br>Notes and Thinking：  </p><ol><li><code>接口化、数据总线</code></li><li>音量往往要么过大，要么过小；大家都像投票似地使用自己口袋里的控制器。声音最终定格在一个平均值上</li><li>虚拟现实的出发点是将自己置身于电脑世界，与之相反的，你将被电脑的智慧所包围</li><li><code>当人们处在电脑智能环境中时，权限如何设计？隐私如何保障？</code></li><li>机器不能完全依靠自己而发展，但它们会变得更能意识到其它机器的存在</li><li>在共同体的海量数据中，单一数据是没有任何作用的，但是可以进行大数据分析，比如结果分析后的推荐引擎</li><li>闭环制造：一道工序的排出物…..成为下一道工序的原料，尽量做到无废弃制造，制造的成品可回收</li><li>工业生态：将自然环境的模式作为解决环境问题的模板</li><li>在拉动式系统中，由客户订单拉动生产，再拉动原料和配件采购，从而实现零库存</li><li>其实从燃料中获 得的真正能量并不是来自碳氢化合物中的碳， 而是它的氢</li><li>下个世纪中引领 风骚的并非大家所鼓吹的硅，而是生物：老 鼠，病毒，基因，生态学，进化，生命。</li><li>下个纪元的特色是新生物学而不是仿生学</li><li>生物学是一个必然——近 于数学的必然——所有复杂性归向的必然。它 是一个欧米茄点</li></ol><h3 id="第十一章-网络经济学"><a href="#第十一章-网络经济学" class="headerlink" title="第十一章 网络经济学"></a>第十一章 网络经济学</h3><p>　　 11.1 脱离实体<br>　　 11.2 以联结取代计算<br>　　 11.3 信息工厂<br>　　 11.4 与错误打交道<br>　　 11.5 联通所有的一切<br>Notes and Thinking：  </p><ol><li>《黑客帝国》电影中的matrix就是一个赛博空间 的极端形式，人类自从出生便被接入（jiack-in），醉 生梦死在这个虚拟空间内而不能自拔。</li><li><code>决定当季流行色的就不再 是时尚专家，而是那些收款机</code></li><li>用很短的时间先设计出一个样式，然后少量地生产和投放，再根据反馈快速地进行修改，一旦成功则迅速增加 产量</li><li>通过网络，以及计算机的智能分析，用户反馈就会 直接影响到生产线上应该生产什么东西、以及 如何生产这些东西</li><li>一个纯粹 网络化的公司，应该具有以下几个特点：分布 式、去中心化、协作以及可适应性。</li><li>通过分包实现去中心化的做 法，被称为“外包”。网络使得外 包成为一个具备可行性、可盈利性、且具有竞 争力的选择</li><li>生产带有主动微 型芯片而不是被动条形码的小东西，就意味着 在一家有数以千计的货架的折扣店里，每个货 架上都摆放着数百个智力迟钝的小东西</li><li>一 个产品还可以记住你是否在看了一眼标价后就 走开了——这可是店主和制造商很感兴趣的信息。无论如何，广告商可以吹嘘说：至少你抬眼看了。这就迸发出完全不同的经济形态。</li><li>计算机软件、分布式网络以及绝大多数的 活系统都是非连续的系统。对于非连续性系统不能通过抽样的方式来对系统进行测试</li><li>对于开发工具，普通的防错设计为“语法检查”，顶尖的研发工具可以对程序的逻辑进行分析和评价</li><li>你可以去生产零缺陷的产品。但问题在于你是否能够以一种有利可图的方式来生产它？这种经济的本质就是bug是无法杜绝的。</li><li>结盟、伙伴 关系、协作——哪怕是暂时的甚至是矛盾的 ——成为行业根本和规范。</li><li>批量化的制造、共同进化的消费者、以知识为基础、收益递增、隐性经济、数字货币</li><li>产品随着消费者的不断使用而得到不断的改进和进化，一 家公司如果不能教育和培训消费者，也就无法从消费者那里学习。</li><li>从网络文化中还会涌现出一种全球意识</li><li>我们人类将无从得知这种全球意识在想什么。这并不是因为我们不够聪明，而是因为意 识本身就不允许其部分能够理解整体</li><li>网络经济所哺育的将是一种新的灵魂</li><li>要理解由网络文化形成的全球意识，最主要的困难在于，它没有一个中心的 “我” 可以让我们去诉求</li></ol><h3 id="第十二章-电子货币"><a href="#第十二章-电子货币" class="headerlink" title="第十二章 电子货币"></a>第十二章 电子货币</h3><p>　　 12.1 密码无政府状态：加密永胜<br>　　 12.2 传真机效应和收益递增定律<br>　　 12.3 超级传播<br>　　 12.4 带电荷的东西就可用于电子货币充值<br>　　 12.5 点对点金融与超级小钱<br>　　 12.6 对隐密经济的恐惧<br>Notes and Thinking：  </p><ol><li>在网络中要阻止信息的越界流动是一件毫无希望的事情</li><li>密码无政府状态：加密，数字货币，匿名网络，数字假名，零知识，信誉，信息市场，黑市，政府倒台</li><li>当游戏参与者不是只进行一次博弈，而是在同一局面下反复博弈时，收益会有所变化；在反复博弈所形成的关系中，信誉至关重要。</li><li>经济活动是驱动社会前进的一种力量。加密技术加剧了失控状态。</li><li>加密技术是经济学。加密始终是可能的，就是很贵</li><li>网络经济奖励那些“较多者”，而不是那些“较少者”——你可以通过免费传播这些工具而从一开始就为这个“较多者”播撒下种子。</li><li>在所有的东西都相互联结在一起的世界，联结、信息还有知识都非常便宜，贵重的反而是那些隔离、反信息和零知识</li><li>加密系统及其同类都是隔离的技术。它们在某种程度上令网络那种无差别的联结和发送信息的固有倾向得到抑制。</li><li>观念或弥母（即文化基因）在人群中的传播与基因在种群中的传播非常相似。基因和“文化基因”都依赖于一个由复制机器组成的网络——细胞、大脑或者电脑终端。</li><li>如果收费机制是以监控计算机里面软件的使用为基础的话，那么卖主们就可以完全省去版权保护了。</li></ol><h3 id="第十三章-上帝的游戏"><a href="#第十三章-上帝的游戏" class="headerlink" title="第十三章 上帝的游戏"></a>第十三章 上帝的游戏</h3><p>　　 13.1 电子神格<br>　　 13.2 有交互界面的理论<br>　　 13.3 “神”临其境<br>　　 13.4 拟像的传送<br>　　 13.5 数字之战<br>　　 13.6 无缝分布的军队<br>　　 13.7 一个万千碎片的超真实<br>　　 13.8 两厢情愿的文字超级有机体<br>　　 13.9 放手则赢<br>Notes and Thinking：  </p><ol><li>这种超现实性被一再强调，最终《华尔街日报》用“电子迷幻药”这个大标题来形容虚拟现实。</li><li>帝国的地图绘制师们绘制了一幅极其详尽的地图，与帝国的领地分毫不差。但随之帝国的衰败也见证着这幅地图逐渐变得破损，最后完全毁掉，只剩下几缕残丝在沙漠中依稀可辨……</li><li><code>not perfect；满招损，谦受益；</code></li><li>“由观众驾驭”的电视传输方法。媒体实验室的一个主要研究目标就是允许消费者对信息的呈现进行个性化</li><li>模型而非内容的传输，内容是接受者从模型中演绎出来的东西。（<code>视频传输先缓存模型，再传输基于模型产生的实时数据</code>）</li><li>五角大楼要求所有军官趁着美国尚能控制这块地盘并且对于战斗的记忆仍未消退时，重新回到“东距73战役”的战场上。军方准备重建起整个战役的三维仿真实现，以便未来军校的任何学员都可以进入并从头经历那场战斗。“一本活的历史书”，他们如此称它。一个战争的拟像。</li><li>如果没有提出“如果”的能力，这个“东距73战役”的仿真就只不过是一个非常昂贵的引人入胜的纪录片而已</li><li>《安德的游戏》（<code>游戏和真实之间还是有很大区别的，在不知情的真实游戏中可避免人的一系列感情影响，让人更理性，从而做出更有益的决定</code>）</li><li>所谓真实，首先指的是共同进化的动力，其次才是什么六百万像素。</li><li>网络游戏中游戏玩家共同进化，联系越紧密，真实感越强，越容易沉迷其中</li><li>诺斯洛普公司的“仿真优先”方法则把重新设计的部件比例降到了3%。（<code>利用计算机仿真模型，节省了建造实际模型的成本</code>）</li><li>分布式智能是未来的趋势。（<code>面相接口，每台主机提供独立服务，由多个人碎片组成一个完整的整体</code>）</li><li>你所需要的只不过是一个多用户的聚会地点。一个可以让大家在线上群集的地方。（<code>现实世界中能聚集人气的活动同样能搬到网上</code>）</li><li>真实生活和虚拟生活之间模糊不清的界限，正是“泥巴”吸引人的主要地方之一，尤其对那些正纠结于自我认同的青少年来说更是如此。（<code>沉迷的关键点</code>）</li><li>这种融合在某个点上就会诞生出终极版的上帝游戏。在我的想象中，这是一个广阔的世界，遵从几条精心选择过的规则而运动。居于其间的是无数自治的活物，以及其他人类玩家的拟像。随着时间的推移，角色们一个个登场，彼此交织缠绵在一起。</li><li>自由意志和创造性带来一个开放而无限制的世界。任何事情都可以想象，任何事情都可能实现。这就意味着，人这种东西，既可能创造令人痛恨之物，又可能创造为人所爱之事。</li><li>要想成为上帝——至少是有创造性的上帝——你就必须放弃控制，拥抱不确定性。绝对的控制也就是绝对的无趣。要想诞生出新的、出乎意料的、真正不同的东西——也就是真正让自己惊讶的东西——你就必须放弃自己主宰一切的王位，让位于那些底层的群氓。</li></ol><h3 id="第十四章-在形式的图书馆中"><a href="#第十四章-在形式的图书馆中" class="headerlink" title="第十四章 在形式的图书馆中"></a>第十四章 在形式的图书馆中</h3><p>　　 14.1 “大千”图书馆之旅<br>　　 14.2 一切可能图像之空间<br>　　 14.3 倘佯在生物形态王国<br>　　 14.4 御变异体而行<br>　　 14.5 形式库中也有性<br>　　 14.6 三步轻松繁育艺术杰作<br>　　 14.7 穿越随机性<br>Notes and Thinking：  </p><ol><li>所有的书，不管它们如何千差万别，都是由相同的要素构成的：空格，句号，逗号，字母表上的二十二个字母。</li><li>当下往往不为我们所见。（注：<code>我们往往回忆过去，寄希望于将来</code>）</li><li>人工进化 （<code>不断选优，在选优的基础上迭代，循环往复</code>）</li><li>每段文本都沉睡在这座虚拟图书馆的某个虚拟书架上的指定位置上。当被选中时，神奇的硅芯片就给这本书的虚拟本体注入了形式  （<code>注入形式即赋予意义，创造出实体，好比由木头组成的东西我们赋予桌子、椅子的名称</code>）</li><li>进化的创造力是无穷的。它能够超过人类的设计能力</li><li>生物的胚胎发育限制了它们变异的可能性</li><li>限定在一个更有意思的方向上，你就更有可能碰到有意义的东西。</li></ol><h3 id="第十五章-人工进化"><a href="#第十五章-人工进化" class="headerlink" title="第十五章 人工进化"></a>第十五章 人工进化</h3><p>　　 15.1 汤姆•雷的电进化机<br>　　 15.2 你力所不逮的，进化能行<br>　　 15.3 并行实施的盲目行为<br>　　 15.4 计算中的军备竞赛<br>　　 15.5 驾驭野性的进化<br>　　 15.6 进化聪明分子的愚钝科学家<br>　　 15.7 死亡是最好的老师<br>　　 15.8 蚂蚁的算法天赋<br>　　 15.9 工程霸权的终结<br>Notes and Thinking：  </p><ol><li>“我们知道，只有两种方法能制造出结构极其复杂的东西，”希利斯说，“一个是依靠工程学，另一个是通过进化。（注：<code>通过进化更省力</code>）</li><li>寄生虫式的军备竞赛也许很丑陋，但它们大大加快了进化的速度。（注：<code>要想创造出真正的人工智能，这种方法值得一试</code>）</li><li>这种被称为“合理化药物设计”的逻辑方法，实际上已经撞上了工程方法所能处理的复杂性的极限。（注：<code>进化系统，优胜劣汰来解决</code>）</li><li>这种有缺陷、无能力的替代品就是所谓的疫苗。因而，疫苗也可以通过非工程的方法进化出来.<code>非理性设计的产物</code></li><li>对个体而言最好的，对物种而言却不一定。<code>没有缺憾的完美也是不完美的</code></li><li>生物意义上的生命是与特殊的硬件绑定在一起的，这就是以碳为基础的DNA分子。</li><li>求多个质数的乘积极其容易，但分解质因素则异常困难。<code>可用于加密算法</code></li><li>最聪明的拉马克个体比最聪明的达尔文个体聪明得多。<code>父代可以把突变的基因遗传给子代，并通过优胜劣汰来进行选择</code></li><li>如果进化的对象不局限于分子的话，也许会有更有效的进化方式和搜索方法。<code>人工智能的进化速度可能会远远超过人们的想象</code></li><li>路径越短的话，信息素挥发得越少。而信息素的信号越强，循迹而来的蚂蚁就越多。那些较短的路径由此得到自我强化。运行5000回合之后，蚂蚁的群体思维就会进化出一条相当理想的路径。<code>旅行商问题</code></li><li>除了能够创造我们制造不出来的东西以外，进化还有一点值得夸耀：它能造出来缺陷更少的东西。</li><li>随着软件越来越大，生存变得越重要，同时也越来越困难。<code>模块化，可插拔</code></li><li>人工进化是工程霸权的终结。</li><li>进化的代价就是——失控。<code>这种失控是目前大部分人观念上无法接受的，人类还是喜欢强有力的控制，从而从中获得安全感</code></li><li><code>在巨大的变化面前，‘正确’将被‘生存能力’所取代。</code></li><li>我们舍控制而取力量。对我们这些执着于控制的家伙来说，这无异于魔鬼的交易。<code>人工智能也具有两面性，即可能是天使，也可能是魔鬼！</code></li></ol><h3 id="第十六章-控制的未来"><a href="#第十六章-控制的未来" class="headerlink" title="第十六章 控制的未来"></a>第十六章 控制的未来</h3><p>　　 16.1 玩具世界的卡通物理学<br>　　 16.2 合成角色的诞生<br>　　 16.3 没有实体的机器人<br>　　 16.4 行为学架构中的代理<br>　　 16.5 给自由意志强加宿命<br>　　 16.6 米老鼠重装上阵<br>　　 16.7 寻求协同控制<br>Notes and Thinking：  </p><ol><li>一个动画形象即使按照人类的正确顺序来行动，如果它甩膀掀胯的相对速度跟不上节奏，仍会显得很机械。人类大脑能够轻易地识别出这种赝品。所以说，时机的掌握是动作的又一个复杂面。</li><li>我可以储存不同的手部动作，但难办的是不知道什么东西支配着这些动作。</li><li>为了创造出不仅仅会走路的生物，动画师们（还有机器人研究者们）需要找出办法来培育出所有类型的自然行为。<code>让这些行为通过简单元素自然的进化出来或者涌现出来</code></li><li>如何组织一个既允许一定偏离又围绕着既定结局的故事？</li><li>怎样在不剥夺人工生命角色自由的情况下，给它设定某种结局？<code>定律、规则、细思极恐！</code></li><li>控制的未来是：伙伴关系，协同控制，人机混合控制。所有这些都意味着，创造者必须和他的创造物一起共享控制权，而且要同呼吸共命运。</li></ol><h3 id="第十七章-开放的宇宙"><a href="#第十七章-开放的宇宙" class="headerlink" title="第十七章 开放的宇宙"></a>第十七章 开放的宇宙</h3><p>　　 17.1 拓展生存的空间<br>　　 17.2 生成图像的基元组<br>　　 17.3 无心插柳柳成荫<br>　　 17.4 打破规则求生存<br>　　 17.5 掌握进化工具<br>　　 17.6 从滑翔意外到生命游戏<br>　　 17.7 生命的动词<br>　　 17.8 在超生命的国度中安家落户<br>Notes and Thinking：  </p><ol><li>对逻辑单元而不是数字位元做进化，最根本的优势还在于它能马上将系统引上通往开放宇宙的大道。</li><li>大自然并不会只为了优雅而简化</li><li>人类的智慧有一个近乎神秘的盲点。我们不能凭直觉理解概率、横向因果关系及同步逻辑方面的各种概念。它们完全不符合我们的思维方式。我们的思维退而求其次地选择了串行叙述——线性描述。那正是最早的计算机使用冯·诺依曼串行设计方案的原因：因为人类就是这样进行思考的。</li><li>他大脑深层的功能一个接一个地重现。朗顿记得那灵光一现的刹那，他的本体感受——那种在一具躯体之中的感知——复原了。他为一种“强烈的发自内心深处的直觉”所震撼</li><li>胚细胞只不过是经过伪装的机器人。</li></ol><h3 id="第十八章-有组织的变化之架构"><a href="#第十八章-有组织的变化之架构" class="headerlink" title="第十八章 有组织的变化之架构"></a>第十八章 有组织的变化之架构</h3><p>　　 18.1 日常进化的革命<br>　　 18.2 绕开中心法则<br>　　 18.3 学习和进化之间的区别<br>　　 18.4 进化的进化<br>　　 18.5 进化解释一切<br>Notes and Thinking：  </p><ol><li>大自然就是一个有序变化的王国。</li><li>迄今为止的无序变化正是技术的真实写照。无序变化的极致是“革命”</li><li>基因中没有管理信息交通的中央管理局。基因组就是极致的分权系统——蔓生的冗余片断，大规模并行处理，没有主管，无人监察各个事务。</li><li>生物所进行的探索式学习实质上是一个对确定问题的随机搜索算法</li><li>人类历史就是一个文化传承的过程。随着社会的发展，人类的学习与传授技能与生物学意义上继承的记忆与能力是遥相呼应的。<code>弥母</code></li><li>先前的人类所获得的每一个文化进步（刀耕、火种、书写），都为人类心智和躯体的转变预备了“可能的空间”，从而使昔日的生物行为转化为日后的文化行为。</li><li>如果我们把文化看作是一个自组织系统——一个具有自己的日程和生存压力的系统——那么，人类的历史就会显得更有意思了。</li><li>揭示深度进化的内在本质之时，也即是触动我们灵魂之日。</li></ol><h3 id="第十九章-后达尔文主义"><a href="#第十九章-后达尔文主义" class="headerlink" title="第十九章 后达尔文主义"></a>第十九章 后达尔文主义</h3><p>　　 19.1 达尔文进化论不完备之处<br>　　 19.2 只有自然选择还不够<br>　　 19.3 生命之树上的连理枝<br>　　 19.4 非随机突变的前提<br>　　 19.5 怪亦有道<br>　　 19.6 化抽象为具象<br>　　 19.7 物以类聚<br>　　 19.8 DNA并不能给所有东西编码<br>　　 19.9 不确定的生物搜索空间密度<br>　　 19.10 自然选择之数学原理<br>Notes and Thinking：</p><ol><li>他想不出一个没有晶状体与之配套的视网膜，或者反过来，没有视网膜与之配套的晶状体能对它的拥有者有什么用处。而既然生物不会囤积它的发明（“嘿，等熬到白垩纪这东西就有用了！”），那每个阶段的物种进步就都得是马上就能用上、能产生效果的。每次突破，都必须首演即获成功。</li><li>由一个细胞系继承而来、负责运送氧气的经过验证的系统，可能和另一个细胞系中负责气体交换的现存系统紧密结合在一起。双方共生相连，就有可能形成一个呼吸系统，而这一发育过程未必是累进的。<code>达尔文进化论的补充，进化可能是并行的</code></li><li>处于交互关系中的进化过程可以跃过个体的上百万年反复试错的时间。<code>并行进化过程</code></li><li>自然选择是编辑，而不是作者.<code>那么谁才是真正的创造者？</code></li><li>进化是物质与信息相互混合的过程，遗传逻辑不能违背其所栖身的物质世界的规律。</li><li>进化过程是跳跃式前进的。发育早期的小变化会导致成熟期的大变化，从而诞生一个怪物。尽管多数极端变异都会夭折，但偶尔也会有些大的变化能融入整体，于是诞生某种“有前途”的怪物。这个有前途的怪物可能会长出一对完整的翅膀；而按照达尔文理论则需要有一种半翅的中间态。生物体也许能够一步到位实现最终形态，那些所谓中间形态的物种也许从未出现过。这种有前途怪物的出现，也能解释为什么化石中找不到过渡形态的物种。</li><li>进化应该是既有宽度，又有纵深的。</li></ol><h3 id="第二十章-沉睡的蝴蝶"><a href="#第二十章-沉睡的蝴蝶" class="headerlink" title="第二十章 沉睡的蝴蝶"></a>第二十章 沉睡的蝴蝶</h3><p>　　 20.1 无序之有序<br>　　 20.2 反直觉的网络数学<br>　　 20.3 迭坐，喷涌，自催化<br>　　 20.4 值得一问的问题<br>　　 20.5 自调节的活系统<br>Notes and Thinking：  </p><ol><li>闭环控制系统.<code>互为因果关系，自洽系统</code></li><li>宇宙自己为自己制订规则，并脱胎于一个自洽的系统</li><li>任何系统寻求的首要目标都是生存。其次是保证系统最大灵活度的理想参数。而最令人兴奋的是第三个层级的目标：寻找系统在进化过程中不断增强自调节的策略和反馈机制。</li></ol><h3 id="第二十一章-水往高处流"><a href="#第二十一章-水往高处流" class="headerlink" title="第二十一章 水往高处流"></a>第二十一章 水往高处流</h3><p>　　 21.1 四十亿年的庞氏骗局<br>　　 21.2 进化的目的是什么<br>　　 21.3 超进化的七个趋势<br>　　 21.4 土狼般的自我进化<br>Notes and Thinking：  </p><ol><li>不可逆性、递增的复杂性、递增的多样性、递增的个体数量、递增的专业性、递增的相互依存关系，以及递增的进化力。</li><li>社会化的加深正是生命递增的相依共生关系的另一种形式。人类正是一个越来越依赖生命而不是非生物的极端例子</li><li>仅仅依靠不断地积累越来越多的新知识，心智不能真正很好地成长。它还必须开发出更新更好地运用已有知识的方法.<code>必须归纳总结，灵活运用。心理发育的关键一步</code></li><li>一个进化系统是稳定的，因为它会不断回归到最优进化力的状态。但是因为这个最优点是变化的——就像镜子上变色龙的颜色——这个系统又永远处在非均衡状态。</li><li>群选择.<code>自然选择不仅以个体为单位，而且以群为单位。甚至文化也属于进化的一部分</code></li></ol><h3 id="第二十二章-预言机"><a href="#第二十二章-预言机" class="headerlink" title="第二十二章 预言机"></a>第二十二章 预言机</h3><p>　　 22.1 接球的大脑<br>　　 22.2 混沌的另一面<br>　　 22.3 具有正面意义的短视<br>　　 22.4 从可预测性范围里挣大钱<br>　　 22.5 前瞻：内视行动<br>　　 22.6 预测的多样性<br>　　 22.7 以万变求不变<br>　　 22.8 系统存在的目的就是揭示未来<br>　　 22.9 全球模型的诸多问题<br>　　 22.10 舵手是大家<br>Notes and Thinking：</p><ol><li>在混沌中存在着秩序.<code>经济体，股票市场，短期趋势</code></li><li>与其花费数年的时间去搞一本预测一切可能发生状况的公司员工手册——它在付印之际就过时了——不如采用那种有正面意义的短视</li><li>在一个股票市场中，成功会激发起强烈的、自我取消的反馈流</li><li>适应性，就是利用信息来应付环境的不确定性</li><li>“适应就是以万变求不变。”一个系统（根据定义是不变的）适应（变化）的目的就是为了存续（不变）。</li><li>学习就意味着生存。</li></ol><h3 id="第二十三章-整体，空洞，以及空间"><a href="#第二十三章-整体，空洞，以及空间" class="headerlink" title="第二十三章 整体，空洞，以及空间"></a>第二十三章 整体，空洞，以及空间</h3><p>　　 23.1 控制论怎么了？<br>　　 23.2 科学知识网之缺口<br>　　 23.3 令人惊讶的琐碎小事<br>　　 23.4 超文本：权威的终结<br>　　 23.5 新的思考空间<br>Notes and Thinking：</p><ol><li>大片无知的荒漠中横亘着一个个自成体系的知识山峰。</li><li>宇宙运行的规律也会进化吗？如果主宰宇宙运行的规律是宇宙自行生成的，它会受到宇宙自我调节力的影响吗？也许维持所有理性规律的特殊的基本规律都处于不断变动中。我们是否在玩一场所有规则都在被不断重写的游戏？</li><li>我们组织写作空间的方式，也就是我们组织思想的方式</li></ol><h3 id="第二十四章-九律"><a href="#第二十四章-九律" class="headerlink" title="第二十四章 九律"></a>第二十四章 九律</h3><p>　　 4.1 如何无中生有<br>　　 24.2 将宇宙据为己有<br>Notes and Thinking：</p><ol><li>工业时代的标志是机械设计能力的登峰造极；而新生物文明的标志则是使设计再次回归自然。</li><li>无中生有.<code>涌现</code></li></ol><h3 id="“失控”的协作与进化——翻译后记"><a href="#“失控”的协作与进化——翻译后记" class="headerlink" title="“失控”的协作与进化——翻译后记 "></a>“失控”的协作与进化——翻译后记 </h3><p>如何既不抹杀创造性和进化空间又能保证产品和服务的质量？<br>答案就是层级架构，而且往往只需要两个层级就足够了：下层是充满活力的“蜂群”式协作，上层则对产品或服务的最终质量进行把控。</p><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div> ]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这本书因为种种原因断断续续读了一年才读完，把整本书中觉得有价值的东西以及读书过程中记录的笔记整理出来也花了不少时间，不想去看砖头的可以通过下文了解到整本书到底讲了些什么。对于书中的各种脑洞，欢迎探讨。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
      <category term="读书笔记" scheme="http://muchstudy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>远程访问API设计</title>
    <link href="http://muchstudy.com/2016/08/15/%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AERESTFull%20API%E8%AE%BE%E8%AE%A1/"/>
    <id>http://muchstudy.com/2016/08/15/远程访问RESTFull API设计/</id>
    <published>2016-08-15T13:59:06.000Z</published>
    <updated>2016-08-16T15:09:19.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果启用HTTPS，基本上就不用考虑传输的安全问题，只需要考虑身份认证问题</p></blockquote><h3 id="一、开始之前"><a href="#一、开始之前" class="headerlink" title="一、开始之前"></a>一、开始之前</h3><p>&emsp;&emsp;在平时的工作中，经常会碰到跟第三方系统做集成的需求，常用的技术手段有webservice，现在要给大家分享的是如何设计一个安全的可供远程访问API。<br>提供两种调用方式：<br>1.前端ajax调用（当然前提是解决了跨域问题）<br>2.后端发起HTTP请求调用</p><h3 id="二、整体结构"><a href="#二、整体结构" class="headerlink" title="二、整体结构"></a>二、整体结构</h3><p><img src="/images/20160815/RemoteAPI1.jpg" alt="整体结构"></p><h4 id="简要说明"><a href="#简要说明" class="headerlink" title="简要说明"></a>简要说明</h4><ul><li>服务器端提供给请求端key与secret密钥，这里可以增加IP过滤，如果带上key请求的请求端IP跟服务器上配置的IP不相符则返回401</li><li>请求端拿到key与secret密钥后，发起请求时，直接把key放到header中，然后用数据摘要算法（如md5，sha512）对请求数据生成数字签名sign（其实就是一个字符串），一起放到header中</li><li>服务器端的第一个过滤器首先过滤远程API（可以考虑远程API都用api/前缀打头），在这里首先验证key在系统中有没有，可选验证IP；如果待用sign，则意味着带请求数据，这个时候用服务器存着的secret对数据进行数字签名，与客户端传过来的进行对比（防数据篡改），一切都通过后再把这个key对应的user放session上</li><li>顺利通过session登录验证过滤器</li><li>URL ACL权限验证过滤器一般是控制哪些人、角色、群组能访问这个URL</li><li>所有权限验证通过后到action-service顺利取到数据并返回</li></ul><blockquote><p>总的来说，远程API访问在于开一个口供HTTP请求交互数据，核心在于<code>权限的控制</code></p></blockquote><h3 id="三、安全设计"><a href="#三、安全设计" class="headerlink" title="三、安全设计"></a>三、安全设计</h3><h4 id="防篡改"><a href="#防篡改" class="headerlink" title="防篡改"></a>防篡改</h4><blockquote><p>防篡改的意思为防止数据在网络传输过程中被恶意篡改，比如在客户端-服务器端之间有个代理服务器（客户端-代理服务器-服务器），这个时候就可以在代理服务器在对数据动手脚，雁过拔毛</p></blockquote><p>&emsp;&emsp;数据防篡改的核心原理在于对传输的数据进行数字签名。客户端发起请求钱，用服务器端拿到的密钥对数据进行前面，然后把签名与数据一起发送给服务器端，服务器端再用自己的密钥对收到的数据进行数字签名，与传过来的签名对比是否一致<br>下面是一些相关java代码：  </p><h5 id="1-服务器端生成密钥并保存到数据库中"><a href="#1-服务器端生成密钥并保存到数据库中" class="headerlink" title="1. 服务器端生成密钥并保存到数据库中"></a>1. 服务器端生成密钥并保存到数据库中</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产生HmacSHA512摘要算法的密钥</span></span><br><span class="line"><span class="comment"> * 密钥可以为任意字符串，使用它来生成密钥可以获得更高的安全性</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] initHmacSHA512Key() <span class="keyword">throws</span> NoSuchAlgorithmException &#123;  </span><br><span class="line">    <span class="comment">// 初始化HmacMD5摘要算法的密钥产生器  </span></span><br><span class="line">    KeyGenerator generator = KeyGenerator.getInstance(<span class="string">"HmacSHA512"</span>);  </span><br><span class="line">    <span class="comment">// 产生密钥  </span></span><br><span class="line">    SecretKey secretKey = generator.generateKey();  </span><br><span class="line">    <span class="comment">// 获得密钥  </span></span><br><span class="line">    <span class="keyword">byte</span>[] key = secretKey.getEncoded();  </span><br><span class="line">    <span class="keyword">return</span> key;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把byte数组转为为字符串方便存入数据库</span></span><br><span class="line">String secret = <span class="keyword">new</span> BigInteger(<span class="number">1</span>, initHmacSHA512Key()).toString(<span class="number">16</span>);</span><br></pre></td></tr></table></figure><h5 id="2-客户端-服务器端对传输的数据计算摘要"><a href="#2-客户端-服务器端对传输的数据计算摘要" class="headerlink" title="2. 客户端/服务器端对传输的数据计算摘要"></a>2. 客户端/服务器端对传输的数据计算摘要</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//还原密钥字符串为byte数组</span></span><br><span class="line"><span class="keyword">byte</span>[] secret = <span class="keyword">new</span> BigInteger(config.get(key).getConnectSecret(),<span class="number">16</span>).toByteArray();</span><br><span class="line">String sign = Tools.encodeHmacSHA512(postData.getBytes(), secret);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HmacSHA512摘要算法</span></span><br><span class="line"><span class="comment"> * 对于给定生成的不同密钥，得到的摘要消息会不同，所以在实际应用中，要保存我们的密钥</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encodeHmacSHA512</span><span class="params">(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">    <span class="comment">// 还原密钥  </span></span><br><span class="line">    SecretKey secretKey = <span class="keyword">new</span> SecretKeySpec(key, <span class="string">"HmacSHA512"</span>);  </span><br><span class="line">    <span class="comment">// 实例化Mac  </span></span><br><span class="line">    Mac mac = Mac.getInstance(secretKey.getAlgorithm());  </span><br><span class="line">    <span class="comment">//初始化mac  </span></span><br><span class="line">    mac.init(secretKey);  </span><br><span class="line">    <span class="comment">//执行消息摘要  </span></span><br><span class="line">    <span class="keyword">byte</span>[] digest = mac.doFinal(data);  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HexBinaryAdapter().marshal(digest);<span class="comment">//转为十六进制的字符串  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实这里的密钥可以为任意字符串，这里之所以用生成的方式原因为这样长度更长，更安全，不易破解</p></blockquote><h4 id="防重放"><a href="#防重放" class="headerlink" title="防重放"></a>防重放</h4><blockquote><p>防重放的意思这样的，假如请求链为客户端-代理-服务器，那么不法分子可以在代理上把整个整个请求拷贝下来，然后再很遥远的未来用拷贝下来的请求重新请求服务器获取数据。很多时候我们是通过cookie信息来让服务器确认客户端的身份，这种情况就相当于走了一趟别人的通道，然后身份被窃取了。</p></blockquote><p>&emsp;&emsp;有两种方式解决重放攻击问题，一种为随机数办法，第二种为TOTP算法（google的动态验证码就使用这种算法，另外还有很多银行的动态密钥）</p><h5 id="1-随机数办法"><a href="#1-随机数办法" class="headerlink" title="1.随机数办法"></a>1.随机数办法</h5><blockquote><p>《HTTP权威指南》中的13章讲得很清楚，可以看看这章。直接从书中截个图开始讲</p></blockquote><p><img src="/images/20160815/RemoteAPI2.jpg" alt="请求逻辑"><br>&emsp;&emsp;图中的(a)部分为未改进方式，(b)为性能改进方式。从图a中可以看出，每次<code>真正请求</code>前都必须发起一次质询请求拿到授权授权码（随机数），然后再发起真正请求，在真正请求中带上这个授权码，服务器接收到请求后先验证授权码是否存在，不存在则意味着不合法，如果存在，则删除旧的授权码。<code>相当每次请求都必须带上授权码，且一个授权码只能使用一次</code>。图(b)是做的一个改进，不用每次请求前都请求一次，只需要请求一次即可，每次正式请求成功后都返回下一次的授权码。</p><blockquote><p>实际中的问题：需要考虑http请求的并发特性，在并发情况下妥善生成与删除授权码</p></blockquote><h4 id="2-TOTP算法"><a href="#2-TOTP算法" class="headerlink" title="2.TOTP算法"></a>2.TOTP算法</h4><p>&emsp;&emsp;这种算法跟google的动态验证码一样，客户端与服务器端通过相同的密钥与时间生成授权码（在一段时间内有效，需保证服务器端与客户端无时间差异，或差异很小）<br>算法说明：  </p><blockquote><p>google动态验证码原理：服务器端通过特定算法随机生成一个密钥，并且把这个密钥保存在数据库中。根据生成的密钥在页面上生成一个二维码，内容是一个 URI 地址。用户通过扫描二维码，把密钥保存在客户端。 客户端每 30 秒使用密钥和时间戳通过一种算法生成一个 6 位数字的一次性 密码。服务器端使用保存在数据库中的密钥和时间戳通过同一种算法生成一个 6 位数字的一次性密码， 用户登陆时输入一次性密码与服务器端进行验证，如果一 样，就登录成功了。<br>资料：<br><a href="https://www.zhihu.com/question/20462696" target="_blank" rel="noopener">谷歌验证 (Google Authenticator) 的实现原理是什么？</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;如果启用HTTPS，基本上就不用考虑传输的安全问题，只需要考虑身份认证问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、开始之前&quot;&gt;&lt;a href=&quot;#一、开始之前&quot; class=&quot;headerlink&quot; title=&quot;一、开始之前&quot;&gt;
      
    
    </summary>
    
      <category term="架构" scheme="http://muchstudy.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="HTTP安全" scheme="http://muchstudy.com/tags/HTTP%E5%AE%89%E5%85%A8/"/>
    
      <category term="restfull" scheme="http://muchstudy.com/tags/restfull/"/>
    
  </entry>
  
  <entry>
    <title>nexus2.x禁用匿名访问配置</title>
    <link href="http://muchstudy.com/2016/08/15/nexus2-x%E7%A6%81%E7%94%A8%E5%8C%BF%E5%90%8D%E8%AE%BF%E9%97%AE%E9%85%8D%E7%BD%AE/"/>
    <id>http://muchstudy.com/2016/08/15/nexus2-x禁用匿名访问配置/</id>
    <published>2016-08-15T13:45:13.000Z</published>
    <updated>2016-08-16T02:21:19.738Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-禁用匿名访问"><a href="#1-禁用匿名访问" class="headerlink" title="1.禁用匿名访问"></a>1.禁用匿名访问</h4><p><img src="/images/20160815/1.jpg" alt="禁止匿名访问"></p><h4 id="2-创建新用户"><a href="#2-创建新用户" class="headerlink" title="2. 创建新用户"></a>2. 创建新用户</h4><p><img src="/images/20160815/2.jpg" alt="创建新用户"></p><h4 id="3-在maven的setting-xml中配置新用户账号密码"><a href="#3-在maven的setting-xml中配置新用户账号密码" class="headerlink" title="3.在maven的setting.xml中配置新用户账号密码"></a>3.在maven的setting.xml中配置新用户账号密码</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">username</span>&gt;</span>sworddev<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">password</span>&gt;</span>sworddev<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：这里的id需与eclipse中pom.xml中的repositories中的id一致</p></blockquote><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Public Repositories<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://127.0.0.1:8081/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-禁用匿名访问&quot;&gt;&lt;a href=&quot;#1-禁用匿名访问&quot; class=&quot;headerlink&quot; title=&quot;1.禁用匿名访问&quot;&gt;&lt;/a&gt;1.禁用匿名访问&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/20160815/1.jpg&quot; alt=&quot;禁止匿名访问&quot;
      
    
    </summary>
    
      <category term="Maven" scheme="http://muchstudy.com/categories/Maven/"/>
    
    
      <category term="nexus" scheme="http://muchstudy.com/tags/nexus/"/>
    
  </entry>
  
  <entry>
    <title>《人子》</title>
    <link href="http://muchstudy.com/2016/08/14/%E3%80%8A%E4%BA%BA%E5%AD%90%E3%80%8B/"/>
    <id>http://muchstudy.com/2016/08/14/《人子》/</id>
    <published>2016-08-14T15:46:09.000Z</published>
    <updated>2020-04-20T16:54:03.014Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>&emsp;&emsp;看这本书起源于在优酷看到一个短片，名字要“一维”，很有意思，据说是根据这本书中的故事改编而来。花了一个周末看完了这本书的电子版，的确很有意思，每个故事都能引人思考，十分值得读。后续还在万能的淘宝购买了实体书，台湾版本，从后往前读，全是繁体字，竖着读，很有feel！  </p></blockquote><p> 短片《一维》:</p><iframe height="498" width="510" src="http://player.youku.com/embed/XNTk1Nzg4MzEy" frameborder="0" allowfullscreen></iframe><h3 id="汪洋"><a href="#汪洋" class="headerlink" title="汪洋"></a>汪洋</h3><p>&emsp;&emsp;一个关于人生的故事</p><h3 id="幽谷"><a href="#幽谷" class="headerlink" title="幽谷"></a>幽谷</h3><p>&emsp;&emsp;一株小花的故事</p><h3 id="忘情"><a href="#忘情" class="headerlink" title="忘情"></a>忘情</h3><p>&emsp;&emsp;一个小男孩的诞生</p><h3 id="人子"><a href="#人子" class="headerlink" title="人子"></a>人子</h3><p>&emsp;&emsp;不适合做国王的太子</p><h3 id="灵妻"><a href="#灵妻" class="headerlink" title="灵妻"></a>灵妻</h3><p>&emsp;&emsp;虔诚与喜悦的背后伴随着野蛮与无知。</p><h3 id="花豹"><a href="#花豹" class="headerlink" title="花豹"></a>花豹</h3><p>&emsp;&emsp;跑着跑着，似乎忘了什么…</p><h3 id="宫堡"><a href="#宫堡" class="headerlink" title="宫堡"></a>宫堡</h3><p>&emsp;&emsp;无法言语的画面……</p><h3 id="皮貌"><a href="#皮貌" class="headerlink" title="皮貌"></a>皮貌</h3><p>&emsp;&emsp;初心和本我还在否？</p><h3 id="鹞鹰"><a href="#鹞鹰" class="headerlink" title="鹞鹰"></a>鹞鹰</h3><p>&emsp;&emsp;他同他的代代祖先都一直希望早晚有这么一天，最出色的鹞鹰同最出色的鹰师会遇到一起。他们也许会以绝顶聪明的人性与绝顶聪明的鹰性作基础，寻觅到生命现象的通性，同那里面的道德与伦理。</p><h3 id="兽言"><a href="#兽言" class="headerlink" title="兽言"></a>兽言</h3><p>&emsp;&emsp;纯粹</p><h3 id="明还"><a href="#明还" class="headerlink" title="明还"></a>明还</h3><p>&emsp;&emsp;贪玩的小孩</p><h3 id="混沌"><a href="#混沌" class="headerlink" title="混沌"></a>混沌</h3><p>&emsp;&emsp;“空”</p><h3 id="不成人子"><a href="#不成人子" class="headerlink" title="不成人子"></a>不成人子</h3><p>&emsp;&emsp;生而为人，是很幸运的事。不成人子的故事很多，山魈鬼怪、魑魅魍魉，都是木、石、禽、兽变的。这些有灵、无灵的东西都想修成人，修的年代长短不一，至少也要几百年。上千年也是常事。生而为人的再也不会想到要修炼成人有这么难！”</p><p><a href="https://book.douban.com/review/5552822/" target="_blank" rel="noopener">胡兰成—评鹿桥的《人子》</a></p><div style="width:70%;margin:auto"><br><img src="http://muchstudy.com/2020/04/04/%E8%81%8A%E8%81%8A%E4%B8%80%E7%BA%BF%E5%BC%80%E5%8F%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%B4%A0%E5%85%BB/%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81.gif"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;看这本书起源于在优酷看到一个短片，名字要“一维”，很有意思，据说是根据这本书中的故事改编而来。花了一个周末看完了这本书的电子版，的确很有意思，每个故事都能引人思考，十分值得读。后续还在万能的淘宝购买了实体书，台湾版本，从后往
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
      <category term="读书笔记" scheme="http://muchstudy.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>用sqlmap验证sql注入</title>
    <link href="http://muchstudy.com/2016/08/14/%E7%94%A8sqlmap%E9%AA%8C%E8%AF%81sql%E6%B3%A8%E5%85%A5/"/>
    <id>http://muchstudy.com/2016/08/14/用sqlmap验证sql注入/</id>
    <published>2016-08-14T15:00:03.000Z</published>
    <updated>2016-08-16T02:18:27.680Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-安装python"><a href="#一-安装python" class="headerlink" title="一.安装python"></a>一.安装python</h3><p><a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a><br>使用python 2.x即可</p><h3 id="二-step-by-step安装完后添加环境变量path"><a href="#二-step-by-step安装完后添加环境变量path" class="headerlink" title="二.step by step安装完后添加环境变量path"></a>二.step by step安装完后添加环境变量path</h3><p><img src="/images/20160814/1.png" alt="描述"></p><h3 id="三-下载sqlmap"><a href="#三-下载sqlmap" class="headerlink" title="三.下载sqlmap"></a>三.下载sqlmap</h3><p><a href="http://sqlmap.org/" target="_blank" rel="noopener">http://sqlmap.org/</a><br>解压到本地磁盘即可</p><h3 id="四-使用sqlmap验证注入项"><a href="#四-使用sqlmap验证注入项" class="headerlink" title="四.使用sqlmap验证注入项"></a>四.使用sqlmap验证注入项</h3><p>例如：通过存在的注入点扫描出有哪些数据库，还可通过该注入点把整个数据库的数据下载到本地，基本上只要是拼字符串的sql都存在注入问题<br><img src="/images/20160814/2.png" alt="描述"></p><h3 id="五-sqlmap常用参数"><a href="#五-sqlmap常用参数" class="headerlink" title="五.sqlmap常用参数"></a>五.sqlmap常用参数</h3><p><img src="/images/20160814/3.png" alt="描述"></p><p>post注入<br> 使用 –data参数</p><pre><code>sqlmap -u “192.168.216.147/checklogin.php” –data “myusername=admin&amp;mypassword=admin&amp;Submit=Login” –level=5 –risk=3 –dbs</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一-安装python&quot;&gt;&lt;a href=&quot;#一-安装python&quot; class=&quot;headerlink&quot; title=&quot;一.安装python&quot;&gt;&lt;/a&gt;一.安装python&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.python.org/downlo
      
    
    </summary>
    
      <category term="安全" scheme="http://muchstudy.com/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="sql注入" scheme="http://muchstudy.com/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
      <category term="sqlmap" scheme="http://muchstudy.com/tags/sqlmap/"/>
    
  </entry>
  
  <entry>
    <title>博客开通</title>
    <link href="http://muchstudy.com/2016/08/13/%E5%8D%9A%E5%AE%A2%E5%BC%80%E9%80%9A/"/>
    <id>http://muchstudy.com/2016/08/13/博客开通/</id>
    <published>2016-08-13T09:54:43.000Z</published>
    <updated>2016-08-20T06:25:37.277Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;个人博客开通。<br>&emsp;&emsp;曾经觉得自己还没能力写出高质量的文章，所以一直未开通博客。在网络上获取的知识多了之后，慢慢的觉得即使不能写出高质量的文章，只要把自己知道的东西分享出来，总会帮助到一些人，避免走弯路耗费大量时间。<br>&emsp;&emsp;希望分享的内容对你有所帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;个人博客开通。&lt;br&gt;&amp;emsp;&amp;emsp;曾经觉得自己还没能力写出高质量的文章，所以一直未开通博客。在网络上获取的知识多了之后，慢慢的觉得即使不能写出高质量的文章，只要把自己知道的东西分享出来，总会帮助到一些人，避免走弯路耗费大量时间。&lt;br&gt;&amp;
      
    
    </summary>
    
      <category term="Life" scheme="http://muchstudy.com/categories/Life/"/>
    
    
      <category term="随笔" scheme="http://muchstudy.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
